{
  "mas_override_label": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_override_label",
    "line": 121,
    "docstring": "Label override function\n\nIN:\n    label_to_override - the label which will be overridden\n    override_label - the label to override with",
    "function_args": {
      "args": [
        "label_to_override",
        "override_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_m1_zz_submods__run": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_m1_zz_submods__run",
    "line": 166,
    "docstring": "Private function to run a function in the global store",
    "function_args": {
      "args": [
        "_function",
        "args"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getSessionLength": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getSessionLength",
    "line": 196,
    "docstring": "Gets length of current session, IF this cannot be determined, a\ntime delta of 0 is returned",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getAbsenceLength": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getAbsenceLength",
    "line": 210,
    "docstring": "Gets time diff between current session start and last session end\naka the diff between last session and this\nif not found, time delta of 0 is returned",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getCurrSeshStart": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getCurrSeshStart",
    "line": 219,
    "docstring": "Returns the current session start datetime\nIf there is None, we use first session",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getFirstSesh": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getFirstSesh",
    "line": 232,
    "docstring": "Returns the first session datetime.\n\nIf we could not get it, datetime.datetime.now() is returnd",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isFirstSeshPast": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isFirstSeshPast",
    "line": 245,
    "docstring": "Checks if the first session is past the given date\n\nIN:\n    _date - datetime.date to check against\n\nOUT:\n    boolean:\n        - True if first sesh is past given date\n        - False otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getLastSeshEnd": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getLastSeshEnd",
    "line": 259,
    "docstring": "Returns datetime of the last session\nNOTE: if there was no last session, we use first session instead",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getTotalPlaytime": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getTotalPlaytime",
    "line": 272,
    "docstring": "Gets total playtime.\n\nRETURNS: total playtime as a timedelta. If not found, we return a\n    time delta of 0",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getTotalSessions": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getTotalSessions",
    "line": 287,
    "docstring": "Gets total sessions\n\nREUTRNS: total number of sessions. If not found, we return 1",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_TTDetected": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_TTDetected",
    "line": 301,
    "docstring": "Checks if time travel was detected\nNOTE: TT detection occurs at init -890",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getWindowTitle": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getWindowTitle",
    "line": 308,
    "docstring": "Returns current windows title set by RenPy\n\nOUT:\n    str",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getAPIKey": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getAPIKey",
    "line": 323,
    "docstring": "gets the API key for a feature\n\nIN:\n    feature - the string name of the feature to lookup.\n\nRETURNS: the api key, as a string. Will be null string if no key found",
    "function_args": {
      "args": [
        "feature"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hasAPIKey": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hasAPIKey",
    "line": 335,
    "docstring": "Checks if a feature has an API key\n\nIN:\n    feature - string name of the feature to check\n\nRETURNS: true if the feature has an API key, false otherwise",
    "function_args": {
      "args": [
        "feature"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_registerAPIKey": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_registerAPIKey",
    "line": 347,
    "docstring": "Registers a feature that accepts an API key.\nFeatures are NOT registered if they already exist.\n\nCan run a function when the api key is changed. This function should\nreturn a tuple:\n    [0] - True if the key is valid, False if not\n    [1] - optional error message to show\nThe return value is primarily for setting a key. If no return value\nis provided, the key is assumed valid.\nThe API key is passed in as the first param. The key will be a null\nstring if the key is being cleared.\n\nIN:\n    feature - the string name of the feature to lookup\n    display_name - the display name the feature should use on screen\n    on_change - function to run when the API key is changed.\n\nRETURNS: True if the feature was added, False if not.",
    "function_args": {
      "args": [
        "feature",
        "display_name",
        "on_change"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "__mas__extractNumbers": {
    "type": "function",
    "function_decorators": [],
    "identifier": "__mas__extractNumbers",
    "line": 395,
    "docstring": "Extracts a list of the number parts of the given file list\n\nAlso sorts them nicely\n\nIN:\n    partname - part of the filename prior to the numbers\n    filelist - list of filenames",
    "function_args": {
      "args": [
        "partname",
        "filelist"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "__mas__backupAndDelete": {
    "type": "function",
    "function_decorators": [],
    "identifier": "__mas__backupAndDelete",
    "line": 419,
    "docstring": "Does a file backup / and iterative deletion.\n\nNOTE: Steps:\n    1. make a backup copy of the existing file (org_fname)\n    2. delete the oldest copy of the orgfilename schema if we already\n        have __mas__baksize number of files\n\nWill log some exceptions\nMay raise other exceptions\n\nBoth dir args assume the trailing slash is already added\n\nIN:\n    loaddir - directory we are copying files from\n    org_fname - filename of the original file / aka file to copy\n    savedir - directory we are copying files to (and deleting old files)\n        If None, we use loaddir instead\n        (Default: None)\n    numnum - if passed in, use this number instead of figuring out the\n        next numbernumber.\n        (Default: None)\n\nRETURNS:\n    tuple of the following format:\n    [0]: numbernumber we just made\n    [1]: numbernumber we deleted (None means no deletion)",
    "function_args": {
      "args": [
        "loaddir",
        "org_fname",
        "savedir",
        "numnum"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "__mas__memoryBackup": {
    "type": "function",
    "function_decorators": [],
    "identifier": "__mas__memoryBackup",
    "line": 534,
    "docstring": "Backs up both persistent and calendar info",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "__mas__memoryCleanup": {
    "type": "function",
    "function_decorators": [],
    "identifier": "__mas__memoryCleanup",
    "line": 559,
    "docstring": "Cleans up persistent data by removing uncessary parts.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_getBadFiles": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_getBadFiles",
    "line": 622,
    "docstring": "Searches through the entire mod_assets folder for any file\nwith the '.new' extension and returns their paths\nRETURNS:\n    a list containing the file names, list will be empty if\n    there was no 'bad' files",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_cleanBadUpdateFiles": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_cleanBadUpdateFiles",
    "line": 639,
    "docstring": "Moves any file with the '.new' extension to the correct file",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASDelayedAction": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASDelayedAction",
    "class_bases": [
      "object"
    ],
    "line": 675,
    "docstring": "A Delayed action consists of the following:\n\nAll exceptions are logged\n\nid - the unique ID of this DelayedAction\nev - the event this action is associated with\nconditional - the logical conditional we want to check before performing\n    action\n    NOTE: this is not checked for correctness\n    If cond_is_callable is True, then this is called instead of eval'd.\n    In that case, the event object in question is passed into the\n    callable.\naction - EV_ACTION constant this delayed action will perform\n    NOTE: this is not checked for existence\n    NOTE: this can also be a callable\n        the event would be passd in as ev\n        if callable, make this return True upon success and false\n            othrewise\nflowcheck - FC constant saying when this delayed action should be\n    checked\n    NOTE: this is not checked for existence\nbeen_checked - True if this action has been checked this game session\nexecuted - True if this delayed action has been executed\n    - Delayed actions that have been executed CANNOT be executed again\ncond_is_callable - True if the conditional is a callable instead of\n    a eval check.\n    NOTE: we do not check callable for correctness",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 708,
        "docstring": "Constructor\n\nNOTE: MAY raise exceptions\nNOTE: also logs exceptions.\n\nIN:\n    _id - id of this delayedAction\n    ev - event this action is related to\n    conditional - conditional to check to do this action\n        NOTE: if this is a callable, then event is passed in\n    action - EV_ACTION constant for this delayed action\n        NOTE: this can also be a callable\n            ev would be passed in as ev\n        If callable, make this return True on success, False\n            otherwise\n    flowcheck - FC constant saying when this delaeyd action should\n        be checked\n    cond_is_callable - True if the conditional is actually a\n        callable.\n        If this True and None is passed into the conditional, then\n        we just return False (aka never run the delayedaction)\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "_id",
            "ev",
            "conditional",
            "action",
            "flowcheck",
            "cond_is_callable"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__call__",
        "line": 760,
        "docstring": "Checks if the conditional passes then performs the action\n\nNOTE: logs exceptions\n\nRETURNS:\n    True on successful action performed, False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "makeWithLabel",
        "line": 811,
        "docstring": "Makes a MASDelayedAction using an eventlabel instead of an event\n\nIN:\n    _id - id of this delayedAction\n    ev_label - label of the event this action is related to\n    conditional - conditional to check to do to tihs action\n    action - EV_ACTION constant for this delayed action\n        NOTE: this can also be a cllable\n            ev would be passed in as ev\n        If callable, make this return True on success, False\n            otherwise\n    flowcheck - FC constant saying when this delayed action should\n        be checked\n    cond_is_callable - True if the conditional is actually a\n        callable.\n        If this True and None is passed into the conditional, then\n        we just return False (aka never run the delayedaction)\n        (Default: False)",
        "function_args": {
          "args": [
            "_id",
            "ev_label",
            "conditional",
            "action",
            "flowcheck",
            "cond_is_callable"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_removeDelayedAction": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_removeDelayedAction",
    "line": 850,
    "docstring": "Removes a delayed action with the given ID\n\nNOTE: this removes from both persistent and the runtime lists\n\nIN:\n    _id - id of the delayed action to remove",
    "function_args": {
      "args": [
        "_id"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_removeDelayedActions_list": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_removeDelayedActions_list",
    "line": 866,
    "docstring": "Removes a list of delayed actions with given Ids\n\nIN:\n    _ids - list of Ids to remove",
    "function_args": {
      "args": [
        "_ids"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_removeDelayedActions": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_removeDelayedActions",
    "line": 877,
    "docstring": "Multiple argument delayed action removal\n\nAssumes all given args are IDS",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "args"
    }
  },
  "mas_runDelayedActions": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_runDelayedActions",
    "line": 886,
    "docstring": "Attempts to run currently held delayed actions for the given flow mode\n\nDelayed actions that are successfully completed are removed from the\nlist\n\nIN:\n    flow - FC constant for the current flow",
    "function_args": {
      "args": [
        "flow"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_addDelayedAction": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_addDelayedAction",
    "line": 913,
    "docstring": "Creates a delayed action with the given ID and adds it to the delayed\naction map (runtime)\n\nNOTE: this handles duplicates, so its better to use this\n\nNOTE: this also adds to persistent, just in case\n\nIN:\n    _id - id of the delayed action to create",
    "function_args": {
      "args": [
        "_id"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_addDelayedActions_list": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_addDelayedActions_list",
    "line": 941,
    "docstring": "Creates delayed actions given a list of Ids\n\nIN:\n    _ids - list of IDS to add",
    "function_args": {
      "args": [
        "_ids"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_addDelayedActions": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_addDelayedActions",
    "line": 952,
    "docstring": "Creates delayed actions given ids as args\n\nassumes each arg is a valid id",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "args"
    }
  },
  "mas_HistLookup": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistLookup",
    "line": 966,
    "docstring": "Looks up data in the historical archives.\n\nIN:\n    key - data key to look up\n    year - year to look up data\n\nRETURNS: a tuple of the following format:\n    [0]: mas_history lookup constant\n    [1]: retrieved data (which may be None). This is always None if\n        we could not find year or key",
    "function_args": {
      "args": [
        "key",
        "year"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HistLookup_all": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistLookup_all",
    "line": 982,
    "docstring": "Looks up all historical data for a specific key.\n\nIN:\n    key - data key to look up\n\nRETURNS: dictionary of the following format:\n    year: data tuple from mas_HistLookup",
    "function_args": {
      "args": [
        "key"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HistLookup_k": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistLookup_k",
    "line": 998,
    "docstring": "Looks up data in the historical archives\nNOTE: this accepts keys as string pieces that are put together\n\nIN:\n    year - year to look up data\n    keys - string pieces of a key to search for\n\nRETURNS: same as mas_HistLookup",
    "function_args": {
      "args": [
        "year"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "keys"
    }
  },
  "mas_HistLookup_ot": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistLookup_ot",
    "line": 1012,
    "docstring": "Looks up data overtime in the historical archives.\n\nIN:\n    key - data key to look up\n    years - years to look updata\n\nRETURNS: dict of the following format:\n    year: data tuple from mas_HistLookup",
    "function_args": {
      "args": [
        "key"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "years"
    }
  },
  "mas_HistLookup_otl": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistLookup_otl",
    "line": 1026,
    "docstring": "Looks up data overtime in the historical archives.\n\nIN:\n    key - data key to look up\n    years_list - list of years to lookup data\n\nRETURNS: dict of the following format:\n    year: data tuple from mas_HistLookup",
    "function_args": {
      "args": [
        "key",
        "years_list"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HistLookup_otl_k": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistLookup_otl_k",
    "line": 1040,
    "docstring": "Looks up data overtime in the historical archives\n\nIN:\n    years_list - list of years to lookup data\n    *keys - string pieces of a key to search for\n\nRETURNS: See mas_HistLookup_otl",
    "function_args": {
      "args": [
        "years_list"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "keys"
    }
  },
  "mas_HistVerify": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistVerify",
    "line": 1053,
    "docstring": "Verifies if data at the given key matches the verification value.\n\nIN:\n    key - data key to lookup\n    _verify - the data we want to match to\n    years - years to look up data (as args)\n        Dont pass in anything if you want to lookup all years since\n        2017\n\nRETURNS: tuple of the following format:\n    [0]: true/False if we found data that matched the verification\n    [1]: list of years that matched the verification",
    "function_args": {
      "args": [
        "key",
        "_verify"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "years"
    }
  },
  "mas_HistVerify_k": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistVerify_k",
    "line": 1071,
    "docstring": "Verifies if data at the given key matches the verification value.\n\nIN:\n    years_list - list of years to look up data (as args)\n        Pass an empty list if you want to lookup all years since\n        2017.\n    _verify - the data we want to match to\n    *keys - string pieces of a key to search for\n\nRETURNS: see mas_HistVerify",
    "function_args": {
      "args": [
        "years_list",
        "_verify"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "keys"
    }
  },
  "mas_HistWasFirstValueIn": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistWasFirstValueIn",
    "line": 1086,
    "docstring": "Checks if the first year that _verify was found for the keys provided in history\nmatches the year provided\n\nIN:\n    _verify - Value to check for\n    year - year to match\n    *keys - string pieces to make a key for history\n\nOUT:\n    boolean:\n        - True if the first year matches the year provided\n        - False otherwise",
    "function_args": {
      "args": [
        "_verify",
        "year"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "keys"
    }
  },
  "mas_HistGetFirstYearOfValue": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistGetFirstYearOfValue",
    "line": 1103,
    "docstring": "Gets the first year which has the entry of _verify in the keys provided\n\nIN:\n    _verify - value to check for\n    *keys - string pieces of a key to search for\n\nOUT:\n    If there's a point where the value we're checking for is found, we return the first year that is met.\n    If not found, we return None",
    "function_args": {
      "args": [
        "_verify"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "keys"
    }
  },
  "mas_HistVerifyAll_k": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistVerifyAll_k",
    "line": 1122,
    "docstring": "Checks if the value of _verify for the keys is in history at any point\n\nIN:\n    _verify - value to check for\n    *keys - string pieces of a key to search for\n\nOUT:\n    boolean:\n        - True if _verify is in the key built by the provided pieces at all\n        - False otherwise",
    "function_args": {
      "args": [
        "_verify"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "keys"
    }
  },
  "mas_HistVerifyLastYear_k": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HistVerifyLastYear_k",
    "line": 1137,
    "docstring": "Checks history for the value of _verify in the key provided last year\n\nIN:\n    _verify - value to check for\n    *keys - string pieces of a key to search for\n\nOUT:\n    boolean:\n        - True if _verify is in the key built by the provided pieces last year\n        - False otherwise",
    "function_args": {
      "args": [
        "_verify"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "keys"
    }
  },
  "MASHistorySaver": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASHistorySaver",
    "class_bases": [
      "object"
    ],
    "line": 1154,
    "docstring": "Class designed to represent mapping of historial data that we need to\nsave over certain intervals.\n\nPROPERTIES:\n    id - identifier of this MASHistorySaver object\n        NOTE: Must be unique\n    trigger - datetime to trigger the saving\n        NOTE: this is changed automatically when saving is done\n        NOTE: the trigger's year is what we use to determine where to\n            save the historical data\n    mapping - mapping of persistent variable names to historical data\n        keys\n    use_year_before - True means that when saving data, we should use\n        trigger.year - 1 as the year to determine where to save\n        historical data. This is mainly for year-end events like\n        d31 and new years\n    dont_reset - True means we do NOT reset the persistent var\n        when doing the save.\n    entry_pp - programming point called before saving data\n        self is passed to this\n    exitpp - programming point called after saving data\n        self is passed to this\n    trigger_pp - programming point called to update trigger with\n        instead of the default year+1\n    start_dt - datetime that this MHS starts covering\n    end_dt - datetime that this MHS stops covering (exclusive)",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 1188,
        "docstring": "Constructor\n\nThrows exception if mhs_id is NOT unique\n\nIN:\n    mhs_id - identifier of this MASHistorySaver object\n        NOTE: Must be unique\n    trigger - datetime of when to trigger data saving for this\n        NOTE: if the year of this datetime is 2 years ahead of the\n            current year, we reset this to 1 year ahead of the\n            current year.\n        NOTE: this is changed every time we execute the saveing\n            routine\n        NOTE: trigger.year is used when saving historical data\n    mapping - mapping of the persistent variable names to\n        historical data keys\n    use_year_before - True will use trigger.year-1 when saving\n        historical data instead of trigger.year.\n        (Default: False)\n    dont_reset - True will NOT reset the persistent var after\n        saving.\n        (Default: False)\n    entry_pp - programming point called before saving data\n        self is passed to this\n        (Default: None)\n    exit_pp - programming point called after saving data\n        self is passed to this\n        (Default: None)\n    trigger_pp - if not None, this pp is called with the current\n        trigger when updating trigger, and the returned datetime\n        is used as the new trigger.\n        (Default: None)\n    start_dt - datetime that this MHs starts covering\n        if None, then we assume this MHs is continuous\n    end_dt - datetime that this MHS stops covering\n        if None, then we assume this MHS is continous",
        "function_args": {
          "args": [
            "self",
            "mhs_id",
            "trigger",
            "mapping",
            "use_year_before",
            "dont_reset",
            "entry_pp",
            "exit_pp",
            "trigger_pp",
            "start_dt",
            "end_dt"
          ],
          "pos_only_args": [],
          "defaults": [
            "False",
            "False",
            "None",
            "None",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "getSortKey",
        "line": 1267,
        "docstring": "Gets the sort key for this MASHistorySaver\n\nIN:\n    _mhs - MASHistorSaver to get sort key\n\nRETURNS the sort key, which is trigger datetime",
        "function_args": {
          "args": [
            "_mhs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "correctTriggerYear",
        "line": 1279,
        "docstring": "Determines the correct year to set trigger to.\n\nA triggers with a correct year are basically triggers that have not\npassed yet. It's not as simple as increasing year since we have to\naccount for triggers that have yet to execute this year.\n\nIN:\n    _trigger - trigger we are trying to change\n\nRETURNS: _trigger with the correct year",
        "function_args": {
          "args": [
            "_trigger"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "fromTuple",
        "line": 1302,
        "docstring": "Loads data from the data tuple\n\nIN:\n    data_tuple - tuple of the following format:\n        [0]: datetime to set the trigger property\n        [1]: use_year_before\n            - check for existence before loading",
        "function_args": {
          "args": [
            "self",
            "data_tuple"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isActive",
        "line": 1318,
        "docstring": "Checks if the given dt is within range of this MHS's range time\nNOTE: if an MHS is continuous, then we are ALWAYS in range\nNOTE: we are also currently only checking the month/day props\n    If we want to take year into acct, then this function will need\n    to be changed\n\nIN:\n    check_dt - dateime to check\n\nRETURNS: True if in range, False if not",
        "function_args": {
          "args": [
            "self",
            "check_dt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isActiveWithin",
        "line": 1347,
        "docstring": "Checks if this MHS would have been active within the given range\nof dt. NOTE: if an MHS is continuous, then we are ALWAYS within\nrange.\n\nIN:\n    start_dt - start of the range to check (inclusive)\n    end_dt - end of the range to check (inclusive)\n\nRETURNS: True if this MHS would hav ebeen active in teh given\n    range, False ifnot",
        "function_args": {
          "args": [
            "self",
            "start_dt",
            "end_dt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isContinuous",
        "line": 1369,
        "docstring": "Checks if this MHS is continuous.\nAn MHS is continuous if it does not have datetime ranges.\n\nRETURNS: True if continuos, False if npt",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isFuture",
        "line": 1378,
        "docstring": "Checks if the given dt is before the active range of this MHS\n\nIN:\n    check_dt - dateime to check\n\nRETURNS: True if future, False if not",
        "function_args": {
          "args": [
            "self",
            "check_dt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isPassed",
        "line": 1392,
        "docstring": "Checks if the given dt is past the active range of this MHS, aka\nbigger than the end dt\n\nNOTE: if an MHS is continuous, it is NEVER passed\n\nIN:\n    check_dt - datetime to check\n\nRETURNS: True if passed, False if not",
        "function_args": {
          "args": [
            "self",
            "check_dt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "resetData",
        "line": 1409,
        "docstring": "Resets data in teh mapping. This is highly dangerous.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "setTrigger",
        "line": 1417,
        "docstring": "Sets the trigger of this object. This function does cleansing of\nbad trigger dates.\n\nIN:\n    _trigger - trigger to change to",
        "function_args": {
          "args": [
            "self",
            "_trigger"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "save",
        "line": 1477,
        "docstring": "Runs the saving routine\n\nNOTE: does NOT check trigger.\n\nNOTE: will CHANGE trigger",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "toTuple",
        "line": 1519,
        "docstring": "Converts this MASHistorySaver object into a tuple\n\nRETURNS tuple of the following format:\n    [0]: trigger - the trigger property of this object\n    [1]: use_year_before - the use_year_before property of this obj\n        NOTE: needed for ease of migrations",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "was_triggered",
        "line": 1530,
        "docstring": "RETURNS: True if this MHS was triggered during this session",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_d25SeasonExit_PP": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_d25SeasonExit_PP",
    "line": 1542,
    "docstring": "Sets a flag to run the D25 exit PP",
    "function_args": {
      "args": [
        "mhs"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "is_file_present": {
    "type": "function",
    "function_decorators": [],
    "identifier": "is_file_present",
    "line": 2043,
    "docstring": "DEPRECIATED\n\n        Use mas_utils.is_file_present instead",
    "function_args": {
      "args": [
        "filename"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "dev_mas_unlock_all_sprites": {
    "type": "function",
    "function_decorators": [],
    "identifier": "dev_mas_unlock_all_sprites",
    "line": 2065,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "dev_mas_clear_spritegift": {
    "type": "function",
    "function_decorators": [],
    "identifier": "dev_mas_clear_spritegift",
    "line": 2076,
    "function_args": {
      "args": [
        "giftname"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isCurrentFlt": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isCurrentFlt",
    "line": 2105,
    "docstring": "Checks if the given filter is the current filter.\n\nIN:\n    flt - filter to check\n\nRETURNS: True if flt is the current filter, false if not",
    "function_args": {
      "args": [
        "flt"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASFilterMap": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASFilterMap",
    "class_bases": [
      "object"
    ],
    "line": 2121,
    "docstring": "SEALED\n        The FilterMap connects filters to values\n\n        DO NOT EXTEND THIS CLASS. if you need similar functionality, just\n        make a wrapper class. There are functions in this class that will\n        cause crashes if used in unexpected contexts.\n\n        NOTE: you can make filtermaps with non-string values, just dont\n            use the hash/eq/ne operators.\n\n        PROPERTIES:\n            map - dict containg filter to string map\n                key: filter constant\n                value: string or, None if no highlight",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 2139,
        "docstring": "Constructor\n\nIN:\n    default - default code to apply to all filters\n        (Default: None)\n    cache - True will cache the MFM, False will not\n        (Default: True)\n    verify - True will verify the filters, False will not.\n        NOTE: if passing False, use the verify function to\n        verify flts.\n        (Default: True)\n    **filter_pairs - filter=val args to use. invalid filters are\n        ignored.\n        See FILTERS dict. Example:\n            day=None\n            night=\"0\"",
        "function_args": {
          "args": [
            "self",
            "default",
            "cache",
            "verify"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "True",
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "filter_pairs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__eq__",
        "line": 2171,
        "docstring": "Equals implementation.\nMASFilterMaps are equal based on their internal tuple/hash var",
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__hash__",
        "line": 2180,
        "docstring": "Hashable implementation.\nMASFilterMaps are uniqued based on their internal map",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__ne__",
        "line": 2187,
        "docstring": "Not equals implmentation.\nMASFilterMaps are not equal based on their internal tuple/hash var",
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_fromJSON_value",
        "line": 2195,
        "docstring": "Parses a single value from the json obj\n\nIN:\n    json_obj - JSON object to parse\n    ind_lvl - indentation level\n    prop_name - name of the prop to parse for\n\nOUT:\n    msg_log - list to add messagse to\n    output - dict to add data to:\n        key: prop_name\n        value: prop value\n\nRETURNS: True if we should stop because of failure, false if not",
        "function_args": {
          "args": [
            "json_obj",
            "msg_log",
            "ind_lvl",
            "prop_name",
            "output"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "cachecreate",
        "line": 2244,
        "docstring": "Creates a MASFilterMap object ONLY if it is not in the filtermap\ncache.\n\nIN:\n    default - See constructor for MASFilterMap\n    **filter_pairs - See constructor for MASFilterMap\n\nRETURNS: MASFilterMap object to use",
        "function_args": {
          "args": [
            "default"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "filter_pairs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "clean_flt_pairs",
        "line": 2268,
        "docstring": "cleans given filter pairs, setting defaults and only using valid\nfilter keys.\n\nIN:\n    default - default code to apply to all filters\n    filter_pairs - filter pair dict:\n        key: filter as string\n        value: code to use as string\n\nRETURNS: dict with cleaned filter pairs",
        "function_args": {
          "args": [
            "default",
            "filter_pairs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "flt_hash",
        "line": 2290,
        "docstring": "Generates a hash based on the given filter pairs\n\nIN:\n    flt_pairs - dict of the following format:\n        key: filter as string\n        value: code to use as string\n        NOTE: default is assumed to already been set\n\nRETURNS: hash that would be generated by a MASFilterMAp created\n    with the given filter pairs",
        "function_args": {
          "args": [
            "flt_pairs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "fromJSON",
        "line": 2311,
        "docstring": "Builds a MASFilterMap given a JSON format of it\n\nIN:\n    json_obj - JSOn object to parse\n    ind_lvl - indent lvl\n        NOTE: this handles loading/success log, so do not\n            increase indent level\n    prop_name - name of the prop this MASFilterMap object is\n        being created from\n\nOUT:\n    msg_log - list to add messages to\n\nRETURNS: MASFilterMap object build using the JSON, or None if not\n    creatable, or False if failur",
        "function_args": {
          "args": [
            "cls",
            "json_obj",
            "msg_log",
            "ind_lvl",
            "prop_name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 2419,
        "docstring": "Gets value from map based on filter\n\nIN:\n    flt - filter to lookup\n    defval - default value to reutrn if filter not found\n        (Default: None)\n\nRETURNS: value for given filter",
        "function_args": {
          "args": [
            "self",
            "flt",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "unique_values",
        "line": 2432,
        "docstring": "Gets all unique non-None values in this filter map\n\nRETURNS: list of all non-NOne and unique values in this filter\n    map",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "verify",
        "line": 2447,
        "docstring": "Verifies all filters in this filter map. Raises exceptions if\nbad filtesr are found.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASFilterMapSimple": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASFilterMapSimple",
    "class_bases": [
      "object"
    ],
    "line": 2457,
    "docstring": "MASFilterMap for simple implementations, aka filter - value pairs\nwithout type checks.\n\nClasses that need MASFilterMap should just extend this one as a base.\n\nThis will NOT cache filter maps.\n\nPROPERTIES:\n    None",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 2470,
        "docstring": "Constructor\n\nPasses values directly to the internal MFM\n\nIN:\n    **filter_pairs - filter=val args to use. invalid filters\n        are ignored.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "filter_pairs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "flts",
        "line": 2486,
        "docstring": "Gets all filter names in this filter map\n\nRETURNS: list of all filter names in this map",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 2494,
        "docstring": "See MASFilterMap.get",
        "function_args": {
          "args": [
            "self",
            "flt",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_mfm",
        "line": 2500,
        "docstring": "Returns the intenral MASFilterMap. Only use if you know what you\nare doing.\n\nRETURNS: MASFilterMap",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASFilterMapFallback": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASFilterMapFallback",
    "class_bases": [
      "MASFilterMapSimple"
    ],
    "line": 2510,
    "docstring": "MASFilterMap that respects fallback mechanics.\n\nClasses that need fallback behavior should just extend this one as a\nbase.\n\nThis will NOT cache filter maps.\n\nPROPERTIES:\n    None",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 2523,
        "docstring": "Constructor\n\nIN:\n    **filter_pairs - filter=val args to use. invalid filters are\n        ignored.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "filter_pairs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 2533,
        "docstring": "Gets value from map based on filter. This follows fallback\nmechanics until a non-None value is found.\n\nIN:\n    flt - filter to lookup\n    defval - default value to return if no non-None value is\n        found after exhausting all fallbacks.\n        (Default: None)\n\nREUTRNS: value for a given filter",
        "function_args": {
          "args": [
            "self",
            "flt",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_raw_get",
        "line": 2560,
        "docstring": "Gets value from map based on filter\n\nIN:\n    flt - filter to lookup\n\nRETURNS: value for the given filter",
        "function_args": {
          "args": [
            "self",
            "flt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASWeather": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='MASFilterableWeather')"
    ],
    "identifier": "MASWeather",
    "line": 2576,
    "docstring": "DEPRECATED\n        Old-style MASWeather objects.\n        This is mapped to a MASFilterableWeather with day/night filter settings\n        NOTE: for all image tags, `_fb` is appeneded for fallbacks\n\n        IN:\n            weather_id - id that defines this weather object\n                NOTE: must be unique\n            prompt - button label for this weathe robject\n            sp_day - image tag for spaceroom's left window in daytime\n            sp_night - image tag for spaceroom's left window in night\n                (Default: None)\n            precip_type - type of precipitation, def, rain, overcast, or snow\n                (Default: def)\n            isbg_wf_day - ignored\n            isbg_wof_day - ignored\n            isbg_wf_night - ignored\n            isbg_wof_night - ignored\n            entry_pp - programming point to execute after switching to\n                this weather\n                (Default: None)\n            exit_pp - programming point to execute before leaving this\n                weather\n                (Default: None)\n            unlocked - True if this weather object starts unlocked,\n                False otherwise\n                (Default: False)\n\n        RETURNS: MASFitlerableWeather object",
    "function_args": {
      "args": [
        "weather_id",
        "prompt",
        "sp_day",
        "sp_night",
        "precip_type",
        "isbg_wf_day",
        "isbg_wof_day",
        "isbg_wf_night",
        "isbg_wof_night",
        "entry_pp",
        "exit_pp",
        "unlocked"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "store.mas_weather.PRECIP_TYPE_DEF",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASFilterableWeather": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASFilterableWeather",
    "class_bases": [
      "object"
    ],
    "line": 2646,
    "docstring": "Weather class to determine some props for weather\n\nPROPERTIES:\n    weather_id - Id that defines this weather object\n    prompt - button label for this weater\n    unlocked - determines if this weather is unlocked/selectable\n    precip_type - type of precipitation (to use for the room type)\n    img_tag - image tag to use for the static version of weather\n    ani_img_tag - image tag to use for the animated version of weather\n    entry_pp - programming point to execute when switching to this\n        weather\n    exit_pp - programming point to execute when leaving this weather",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 2663,
        "docstring": "Constructor for a MASFilterableWeather object\n\nIN:\n    weather_id - id that defines this weather object\n        NOTE: must be unique\n    prompt - button label for this weathe robject\n    img_tag - image tag to use for the static version of weather\n    ani_img_tag - image tag to use for the animated version of\n        weather. If None, we always use the static version.\n        (Default: None)\n    precip_type - type of precipitation, def, rain, overcast, or snow\n        (Default: def)\n    unlocked - True if this weather object starts unlocked,\n        False otherwise\n        (Default: False)\n    entry_pp - programming point to execute after switching to\n        this weather\n        (Default: None)\n    exit_pp - programming point to execute before leaving this\n        weather\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "weather_id",
            "prompt",
            "img_tag",
            "ani_img_tag",
            "precip_type",
            "unlocked",
            "entry_pp",
            "exit_pp"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "store.mas_weather.PRECIP_TYPE_DEF",
            "False",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__eq__",
        "line": 2711,
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__ne__",
        "line": 2716,
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "entry",
        "line": 2722,
        "docstring": "Runs entry programming point",
        "function_args": {
          "args": [
            "self",
            "old_weather"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "exit",
        "line": 2729,
        "docstring": "Runs exit programming point",
        "function_args": {
          "args": [
            "self",
            "new_weather"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_mask",
        "line": 2736,
        "docstring": "Returns the appropriate weathermask based on animation settings\n\nRETURNS: image tag to use",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "getPrecipTypeFrom",
        "line": 2748,
        "docstring": "Gets precip type of the given weather object.\n\nIN:\n    weather - weather object to get precip type for.\n        if None, we use the current weather\n        (Default: None)\n\nRETURNS: precip_type",
        "function_args": {
          "args": [
            "weather"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "fromTuple",
        "line": 2763,
        "docstring": "Loads data from tuple\n\nIN:\n    data_tuple - tuple of the following format:\n        [0]: unlocked property",
        "function_args": {
          "args": [
            "self",
            "data_tuple"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='get_mask', should_raise=True)"
        ],
        "identifier": "sp_window",
        "line": 2774,
        "docstring": "DEPRECATED\n            Use get_mask instead.\n            This returns whatever get_mask returns.",
        "function_args": {
          "args": [
            "self",
            "day"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(should_raise=True)"
        ],
        "identifier": "isbg_window",
        "line": 2782,
        "docstring": "DEPRECATED\n            Islands are now separate images. See script-islands-event.",
        "function_args": {
          "args": [
            "self",
            "day",
            "no_frame"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "toTuple",
        "line": 2788,
        "docstring": "Converts this MASWeather object into a tuple\n\nRETURNS: tuple of the following format:\n    [0]: unlocked property",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASWeatherMap": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASWeatherMap",
    "class_bases": [
      "object"
    ],
    "line": 2798,
    "docstring": "A weather map is an extension of MASHighlightMap except using precip\ntypes as keys.\n\nNOTE: actual implementation is by wrapping around MASHighlightMap.\nThis is to avoid calling functions that would crash.\n\nPROPERTIES:\n    None",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 2810,
        "docstring": "Constructor\n\nIN:\n    precip_map - mapping of precip types and values to map to\n        key: precip type\n        value: value to map to precip type\n        NOTE: not required, you can also use add functions instead\n        NOTE: PRECIP_TYPE_DEF is used as a default if given.",
        "function_args": {
          "args": [
            "self",
            "precip_map"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__iter__",
        "line": 2827,
        "docstring": "Returns MHM iterator",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "add",
        "line": 2833,
        "docstring": "Adds value to map.\nSee MASHighlightMap.add",
        "function_args": {
          "args": [
            "self",
            "key",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "apply",
        "line": 2840,
        "docstring": "Applies a dict mapping to this map.\nSee MASHlightMap.apply",
        "function_args": {
          "args": [
            "self",
            "mapping"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 2847,
        "docstring": "Gets value with the given key\n\nUses PRECIP_TYPE_DEF as a default if key not found\n\nSee MASHighlightMap.get",
        "function_args": {
          "args": [
            "self",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_mhm",
        "line": 2861,
        "docstring": "Returns the internal MASHighlightMap. Only use if you know what\nyou are doing.\n\nRETURNS: MASHighlightMap object",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_raw_get",
        "line": 2870,
        "docstring": "Gets value with given precip_type. this does Not do defaulting.\n\nIN:\n    precip_type - precip type to get value for\n\nRETURNS: value",
        "function_args": {
          "args": [
            "self",
            "precip_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASFilterWeatherMap": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASFilterWeatherMap",
    "class_bases": [
      "MASFilterMapSimple"
    ],
    "line": 2882,
    "docstring": "Extension of MASFilterMap.\n\nUse this to map weather maps to filters.\n\nNOTE: this does NOT verify filters.\n\nPROPERTIES:\n    use_fb - if True, this will default to using fallback-based\n        getting when using fw_get.\n        Defaults to False and must be set after creation.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 2896,
        "docstring": "Constructor\n\nWill throw exceptions if not given MASWeatherMap objects\n\nIN:\n    **filter_pairs - filter=val args to use. Invalid filters are\n        ignored. Values should be MASWeatherMap objects.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "filter_pairs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "fw_get",
        "line": 2918,
        "docstring": "Gets value from map based on filter and current weather.\nMay do fallback-based getting if configured to do so.\n\nfallback-baesd getting uses the FLT_FB dict to find the NEXT\navailable value for a given precip_type. This overrides the\nMASWeatherMap's handling of using PRECIP_TYPE_DEF as a fallback\nuntil the final MASWeatherMap in the chain.\nFor more, see MASFilterWeatherDisplayable in sprite-chart-matrix.\n\nIN:\n    flt - filter to lookup\n    weather - weather to lookup. If None, we use the current\n        weather.\n        (Default: None)\n\nRETURNS: value for the given filter and weather",
        "function_args": {
          "args": [
            "self",
            "flt",
            "weather"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 2942,
        "docstring": "Gets value from map based on filter.\n\nIN:\n    flt - filter to lookup\n\nRETURNS: value for the given filter",
        "function_args": {
          "args": [
            "self",
            "flt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "has_def",
        "line": 2953,
        "docstring": "Checks if the given flt has a MASWeatherMap that contains a\nnon-None value for the default precip type.\n\nIN:\n    flt - filter to check\n\nRETURNS: True if the filter has a non-None default precip type,\n    False otherwise.",
        "function_args": {
          "args": [
            "self",
            "flt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_raw_fw_get",
        "line": 2973,
        "docstring": "Gets the actual value from a filter and precip type. This may\ndo fallback-based getting if configured to do so.\n\nNOTE: if the given filter doesn't have an associated MASWeatherMap,\nwe ALWAYS use the fallback-based system, but find the next\navailable default. See MASFilterWeatherDisplayable in\nsprite-chart-matrix.\n\nIN:\n    flt - filter to lookup\n    precip_type - precip type to lookup\n\nRETURNS: value for a given filter and precip type",
        "function_args": {
          "args": [
            "self",
            "flt",
            "precip_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_raw_get",
        "line": 3032,
        "docstring": "Gets value from map based on filter.\n\nIN:\n    flt - filter to lookup\n\nRETURNS: value for the given filter",
        "function_args": {
          "args": [
            "self",
            "flt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASDockingStation": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASDockingStation",
    "class_bases": [
      "object"
    ],
    "line": 3050,
    "docstring": "Docking station class designed to help with file reading / writing of\ncertain files.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 3100,
        "docstring": "Constructor\n\nIN:\n    station - the path to the folder this docking station interacts\n        with. (absolute path), will try to create the folder if it\n        doesn't exist. Exceptions will be logged.\n        NOTE: END WITH '/' please\n        (Default: DEF_STATION_PATH)",
        "function_args": {
          "args": [
            "self",
            "station"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__str__",
        "line": 3134,
        "docstring": "toString",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "checkForPackage",
        "line": 3140,
        "docstring": "Checks if a package exists in the docking station\n\nNOTE: will log exceptions\n\nNOTE: no signature checking\n\nIN:\n    package_name - the filename we are lookiung for\n    check_read - If False, then only check for existence\n        (Default: True)\n\nRETURNS:\n    True if the package exists\n        If check_read is true, then package must also be readable\n    False otherwise",
        "function_args": {
          "args": [
            "self",
            "package_name",
            "check_read"
          ],
          "pos_only_args": [],
          "defaults": [
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "createPackageSlip",
        "line": 3167,
        "docstring": "Generates a checksum for a package (which is a file descriptor)\n\nNOTE: may throw exceptions\n\nNOTE: when checking packages, we read by B64_READ_SIZE always\n\nIN:\n    package - file descriptor of the package we want\n        NOTE: is seek(0)'d after reading\n    bs - blocksize to use. IF None, the default blocksize is ued\n        (Default: None)\n\nRETURNS:\n    sha256 checksum (hexadec) of the given package, or None\n    if error occured",
        "function_args": {
          "args": [
            "self",
            "package",
            "bs"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "destroyPackage",
        "line": 3196,
        "docstring": "Attempts to destroy the given package in the docking station.\n\nNOTE: exceptions are logged\n\nIN:\n    package_name - name of the package to delete\n\nRETURNS:\n    True if package no exist or was deleted. False otherwise",
        "function_args": {
          "args": [
            "self",
            "package_name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getPackageList",
        "line": 3230,
        "docstring": "Gets a list of the packages in the docking station.\nWe also ensure that the item retrieved is not a folder.\n\nIN:\n    ext_filter - extension filter to use when getting list.\n        the '.' is added if not already given.\n        If not given, we get all the packages\n        (Default: \"\")\n\nRETURNS: list of packages",
        "function_args": {
          "args": [
            "self",
            "ext_filter"
          ],
          "pos_only_args": [],
          "defaults": [
            "''"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getPackage",
        "line": 3258,
        "docstring": "Gets a package from the docking station\n\nNOTE: will log exceptions\n\nIN:\n    package_name - The filename we are looking for\n    log - log to write messages to, if needed\n        If None, we use mas_log\n        (Default: None)\n\nRETURNS:\n    open file descriptor to the package (READ BYTES mode)\n        if package is readable and no errors occurred\n    None otherwise",
        "function_args": {
          "args": [
            "self",
            "package_name",
            "log"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "packPackage",
        "line": 3308,
        "docstring": "Packs a package so it can be sent\n(encodes a data buffer into base64)\n\nNOTE: may throw exceptions\n\nIN:\n    contents - the bytes buffer we want to pack. Recommened to use\n        StringIO here, but any buffer that supports read(bytes)\n        will work fine.\n        NOTE: is CLOSED after reading\n    pkg_slip - True will generate a checksum for the data buffer\n        and return that as well\n        (Default: False)\n\nRETURNS:\n    tuple of the following format:\n    [0] - base64 version of the given data, in a cStringIO buffer\n    [1] - sha256 checksum if pkg_slip is True, None otherwise",
        "function_args": {
          "args": [
            "self",
            "contents",
            "pkg_slip"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "safeRandom",
        "line": 3346,
        "docstring": "Generates a random amount of unicode-safe bytes.\n\nIN:\n    amount - number of bytes to generate",
        "function_args": {
          "args": [
            "self",
            "amount"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "sendPackage",
        "line": 3356,
        "docstring": "Sends a package into the docking station\n(Writes a file in this stations' folder)\n\nNOTE: exceptions are logged\n\nIN:\n    package_name - name of the file to write\n    package - the data to write as bytes\n    unpacked - True means that package is not in base64\n        False means that it is in base64\n        (Default: False)\n    pkg_slip - True means we should generate a sha256 checksum for\n        the package and return that\n        (Default: False)\n\nRETURNS:\n    sha256 checksum if pkg_slip is True\n    True if package was sent successfully and pkg_slip is False\n    False Otherwise",
        "function_args": {
          "args": [
            "self",
            "package_name",
            "package",
            "unpacked",
            "pkg_slip"
          ],
          "pos_only_args": [],
          "defaults": [
            "False",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "signForPackage",
        "line": 3419,
        "docstring": "Gets a package, checks if all the contents are there, and then\ndeletes the packaging.\n(Check if a file exists, is readable, has the checksum of the\npassed in pkg_slip, then deletes the file on disk)\n\nNOTE: Exceptions are logged\n\nIN:\n    package_name - name of the file to check\n    pkg_slip - sha256 checksum the file should match\n    keep_contents - if True, then we copy the data into a StringIO\n        buffer and return it.\n        (Defualt: False)\n    bs - blocksize to use when reading the package\n        IF None, the default blocksize is used\n        (Default: None)\n\nRETURNS:\n    if the package matches signature:\n        - if keep_contents is True\n            StringIO buffer containing decoded data\n        - otherwise, 1 is returned\n    if package found but no sig match\n        - NOTE: if this happens, we NEVER delete teh package\n        - return -2\n    if package not found\n        - return -1\n    0 otherwise (like if error occured)",
        "function_args": {
          "args": [
            "self",
            "package_name",
            "pkg_slip",
            "keep_contents",
            "bs"
          ],
          "pos_only_args": [],
          "defaults": [
            "False",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "smartUnpack",
        "line": 3517,
        "docstring": "Combines parts of signForPackage and _unpack in a way that is very\nuseful for us\n\nNOTE: all exceptions are logged\n\nNOTE: if contents was passed in an error occurred (PKG_E will be in\n    the return bits), then the contents of contents is undefined.\n\nIN:\n    package_name - name of the package to read in\n    pkg_slip - chksum to check package with (considerd PRE b64 decode)\n    contents - buffer to save contents of package.\n        If None, we save contents to a StringIO object and return\n        that\n        (Default: None)\n    lines - number of lines to retrieve when reading data.\n        If less than 0, then we scan the file itself to tell us\n        how many lines to read.\n        If \"all\", then we read ALL LINES\n        (Default: 0)\n    b64 - True means the package is encoded in base64\n        (Default: True)\n    bs - blocksize to use. By default, we use B64_READ_SIZE\n        (Default: None)\n    log - log to write messages to, if needed.\n        If None, we use mas_log\n        (Default: None)\n\nRETURNS: tuple of the following format\n    [0]: PKG_* bits constants highlighting success/failure status\n    [1]: buffer containing the contents of the package.\n        If contents is not None, this is the same reference as\n        contents.",
        "function_args": {
          "args": [
            "self",
            "package_name",
            "pkg_slip",
            "contents",
            "lines",
            "b64",
            "bs",
            "log"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "0",
            "True",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "unpackPackage",
        "line": 3682,
        "docstring": "Unpacks a package\n(decodes a base64 file into a regular StringIO buffer)\n\nNOTE: may throw exceptions\n\nIN:\n    package - file descriptor of the file to decode / unpack\n        NOTE: is CLOSED after reading\n    pkg_slip - sha256 hex checksum of what the package data should\n        be. If passed in, then we check this against the package\n        NOTE: generated checksum uses data BEFORE it is decoded\n        (Default: None)\n\nRETURNS:\n    StringIO buffer containing the package decoded\n    Or None if pkg_slip checksum was passed in and the given\n        package failed the checksum",
        "function_args": {
          "args": [
            "self",
            "package",
            "pkg_slip"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_blockiter",
        "line": 3737,
        "docstring": "Creates an itererator of a file using the given blocksize\n\nNOTE: May throw exceptions\n\nIN:\n    fd - file descriptor\n        NOTE: seeks this to 0 before starting\n    blocksize - size to use for blocks\n\nYIELDS:\n    blocks until a block read attempt gave us nothing\n\nASSUMES:\n    given file descriptor is open",
        "function_args": {
          "args": [
            "fd",
            "blocksize"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_trackPackage",
        "line": 3761,
        "docstring": "Adds this docking station's path tot he package_name so we can\naccess it and stuff\n\nIN:\n    package_name - name of the package\n\nRETURNS:\n    package_name in a valid package_path ready for checking",
        "function_args": {
          "args": [
            "self",
            "package_name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_pack",
        "line": 3775,
        "docstring": "Runs the packing algorithm for given file descriptors\nSupports:\n    1. encoding and checksumming data\n        this will encode the input, checksum it, then write to\n        output\n    2. encoding data\n        this will encode the input, then write to output\n    3. checksumming data\n        this will checksum the input. DOES NOT WRITE to output\n\nNOTE: may throw exceptions\nNOTE: if both pack and pkg_slip are False, this does absoultely\n    nothing\n\nIN:\n    contents - file descriptor to read data from\n    box - file descriptor to write data to\n    pack - if True, encode the input data into base64 prior to\n        writing to output data\n        (Default: True)\n    pkg_slip - if True, generate a checksum of the data.\n        NOTE: if pack is True, this is done using data AFTER\n            encoding\n        (Default: True)\n    bs - blocksize to use. If None, we use READ_SIZE\n        (Default: None)\n\nRETURNS:\n    generated sha256 checksum if pkg_slip is True\n    Otherwise, None",
        "function_args": {
          "args": [
            "self",
            "contents",
            "box",
            "pack",
            "pkg_slip",
            "bs"
          ],
          "pos_only_args": [],
          "defaults": [
            "True",
            "True",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_unpack",
        "line": 3848,
        "docstring": "Runs the unpacking algorithm for given file descriptors\nSupports:\n    1. checksumming and decoding data\n        this will checksum input, decode it, then write to output\n    2. decoding data\n        this will decode the input, then write to ouput\n    3. checksumming data\n        this will checksum the input. DOES NOT WRITE to output\n\nNOTE: may throw exceptions\nNOTE: if both unpack and pkg_slip are False, this does absolutely\n    nothing\n\nIN:\n    box - file descriptor to read data from\n    contents - file descriptor to write data to\n    unpack - if True, decode input data from base64 prior to\n        writing output data\n        (Default: True)\n    pkg_slip - if True, genereate a checksum of the data.\n        NOTE: if unpack is True, this is done using data BEFORE\n            decoding\n        (Default: True)\n    bs - blocksize to use. If None, use B64_READ_SIZE\n        (Default: None)\n\nRETURNS:\n    generated sha256 checksum if pkg_slip is True\n    Otherwise, None",
        "function_args": {
          "args": [
            "self",
            "box",
            "contents",
            "unpack",
            "pkg_slip",
            "bs"
          ],
          "pos_only_args": [],
          "defaults": [
            "True",
            "True",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_zz_dockingstation__check_access",
        "line": 3917,
        "docstring": "Checks access of the file at package_path.\nAlso ensures that the file is not actually is folder.\n\nNOTE:\n    will log exceptions\n\nIN:\n    package_path - path to the file we want to check access to\n    check_read - If True, check for read access in addition to\n        file existence\n\nRETURNS:\n    True if package exists / is readable.\n    Otherwise:\n        if check_read is True, returns None\n        otherwise, returns False",
        "function_args": {
          "args": [
            "self",
            "package_path",
            "check_read"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_zz_dockingstation__bad_check_read",
        "line": 3962,
        "docstring": "Returns an appropriate failure value givne the check_read value\n\nIN:\n    check_read - the value of check_read\n\nRETURNS:\n    None if check_read is True, False otherwise",
        "function_args": {
          "args": [
            "self",
            "check_read"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASSelectableSprite": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASSelectableSprite",
    "class_bases": [
      "object"
    ],
    "line": 3984,
    "docstring": "Wrapper around selectable sprite objects. We do this instead of\nextending because not everything would be selectble\n\nPROPERTIES:\n    name - this is always the same thing as the MASSprite object we\n        create thsi with.\n    display_name - the name to use in the selectbale button screen\n    thumb - thumbnail image to use for selection screen. Aim for a\n        180x180\n        (png is added in the constructor)\n    group - string id to group related selectable sprites. this really\n        applies only to acs, but in case other things need this.\n    unlocked - True if this selectable sprite can be selected,\n        False otherwise.\n    visible_when_locked - True if this should be visible when locked\n        False, otherwise.\n        Locked items will generally be displayed with a placeholder\n        thumb.\n    hover_dlg - list of text to display when hovering over the object\n    first_select_dlg - text to display the first time you\n        select this sprite\n    select_dlg - list text to display everytime you select this sprite\n        (after the first time)\n    selected - True if this item is selected, False if not\n    disabled_type - disable type to use in the displayable in selector.\n        NOTE: this property may be set by the selector labels.\n        Do NOT expect this property to be respected if set manually.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4016,
        "docstring": "Selectable sprite objects constructor\n\nIN:\n    _sprite_object - MASSpriteBase object to build this selectable\n        sprite object with.\n        NOTE: because of inheritance issues, this is NOT CHECKED.\n            The extending classes MUST check types.\n    display_name - name to show on the selectable screen\n    thumb - thumbnail to use on the select screen\n    group - group id to group related selectable sprites.\n    visible_when_locked - True if this item should be visible in\n        the screen when locked, False otherwise\n        (Default: True)\n    hover_dlg - list of text to display when hovering over the\n        object\n        (Default: None)\n    first_select_dlg - text to display the first time you select\n        this sprite\n        (Default: None)\n    select_dlg - list of text to display everytime you select this\n        sprite\n        (after the first time)\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "_sprite_object",
            "display_name",
            "thumb",
            "group",
            "visible_when_locked",
            "hover_dlg",
            "first_select_dlg",
            "select_dlg"
          ],
          "pos_only_args": [],
          "defaults": [
            "True",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_check_dlg",
        "line": 4072,
        "function_args": {
          "args": [
            "self",
            "dlg"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_build_thumbstr",
        "line": 4077,
        "docstring": "Returns thumb string for this selectable",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "fromTuple",
        "line": 4084,
        "docstring": "Loads data from the given tuple.\n\nIN:\n    read_tuple - tuple of the following format:\n        [0]: unlocked property\n        [1]: visible_when_locked",
        "function_args": {
          "args": [
            "self",
            "read_tuple"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "toTuple",
        "line": 4096,
        "docstring": "RETURNS: tuple version of this data:\n    [0]: unlocked property\n    [1]: visible_when_locked",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASSelectableAccessory": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASSelectableAccessory",
    "class_bases": [
      "MASSelectableSprite"
    ],
    "line": 4105,
    "docstring": "Wrapper around MASAccessory sprite objects.\n\nPROPERTIES:\n    remover - True if this item is a remover, aka a blank ACS,\n        False if not\n\n\nSEE MASSelectableSprite for inherieted properties",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4117,
        "docstring": "MASSelectableAccessory\n\nIN:\n    _sprite_object - MASAccessory object to build this selectable\n        sprite object with.\n    display_name - name to show on the selectable screen\n    thumb - thumbnail to use on the select screen\n    group - group id to group related selectable sprites.\n    visible_when_locked - True if this item should be visible in\n        the screen when locked, False otherwise\n        (Default: True)\n    hover_dlg - list of text to display when hovering over the\n        object\n        (Default: None)\n    first_select_dlg - text to display the first time you select\n        this sprite\n        (Default: None)\n    select_dlg - list of text to display everytime you select this\n        sprite\n        (after the first time)\n        (Default: None)\n    remove - True if this ACS is a blank ACS (remover), False if\n        not\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "_sprite_object",
            "display_name",
            "thumb",
            "group",
            "visible_when_locked",
            "hover_dlg",
            "first_select_dlg",
            "select_dlg",
            "remover"
          ],
          "pos_only_args": [],
          "defaults": [
            "True",
            "None",
            "None",
            "None",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_sprobj",
        "line": 4177,
        "docstring": "Gets the sprite object associated with this selectable.\n\nRETURNS: the sprite object for this selectbale, or None if not\n    found",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASSelectableHair": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASSelectableHair",
    "class_bases": [
      "MASSelectableSprite"
    ],
    "line": 4187,
    "docstring": "Wrappare around MASHair sprite objects\n\nPROPERTIES:\n    (no additional)\n\nSEE MASSelectableSprite for inherited properties",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4198,
        "docstring": "MASSelectableHair constructor\n\nIN:\n    _sprite_object - MASHair object to build this selectable\n        sprite object with.\n    display_name - name to show on the selectable screen\n    thumb - thumbnail to use on the select screen\n    group - group id to group related selectable sprites.\n    visible_when_locked - True if this item should be visible in\n        the screen when locked, False otherwise\n        (Default: True)\n    hover_dlg - list of text to display when hovering over the\n        object\n        (Default: None)\n    first_select_dlg - text to display the first time you select\n        this sprite\n        (Default: None)\n    select_dlg - list of text to display everytime you select this\n        sprite\n        (after the first time)\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "_sprite_object",
            "display_name",
            "thumb",
            "group",
            "visible_when_locked",
            "hover_dlg",
            "first_select_dlg",
            "select_dlg"
          ],
          "pos_only_args": [],
          "defaults": [
            "True",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_sprobj",
        "line": 4246,
        "docstring": "Gets the sprite object associated with this selectable.\n\nRETURNS: the sprite object for this selectbale, or None if not\n    found",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASSelectableClothes": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASSelectableClothes",
    "class_bases": [
      "MASSelectableSprite"
    ],
    "line": 4256,
    "docstring": "Wrappare around MASClothes sprite objects\n\nPROPERTIES:\n    (no additional)\n\nSEE MASSelectableSprite for inherited properties",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4267,
        "docstring": "MASSelectableClothes constructor\n\nIN:\n    _sprite_object - MASClothes object to build this selectable\n        sprite object with.\n    display_name - name to show on the selectable screen\n    thumb - thumbnail to use on the select screen\n    group - group id to group related selectable sprites.\n    visible_when_locked - True if this item should be visible in\n        the screen when locked, False otherwise\n        (Default: True)\n    hover_dlg - list of text to display when hovering over the\n        object\n        (Default: None)\n    first_select_dlg - text to display the first time you select\n        this sprite\n        (Default: None)\n    select_dlg - list of text to display everytime you select this\n        sprite\n        (after the first time)\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "_sprite_object",
            "display_name",
            "thumb",
            "group",
            "visible_when_locked",
            "hover_dlg",
            "first_select_dlg",
            "select_dlg"
          ],
          "pos_only_args": [],
          "defaults": [
            "True",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_sprobj",
        "line": 4315,
        "docstring": "Gets the sprite object associated with this selectable.\n\nRETURNS: the sprite object for this selectbale, or None if not\n    found",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASRegImgSameDecoTagDefNotFoundException": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASRegImgSameDecoTagDefNotFoundException",
    "class_bases": [
      "Exception"
    ],
    "line": 4330,
    "docstring": "Exception for when a deco tag definition is not found while regisering\nan image using `register_img_same`",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4341,
        "docstring": "Constructor\n\nIN:\n    tag - the tag being registered\n    bg_id_src - the ID of the source BG that the deco tag\n        definition could not be located for\n    bg_id_dest - the ID of the destination BG being registered",
        "function_args": {
          "args": [
            "self",
            "tag",
            "bg_id_src",
            "bg_id_dest"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASDecorationBase": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASDecorationBase",
    "class_bases": [
      "MASExtraPropable"
    ],
    "line": 4356,
    "docstring": "Base class for decortaions objects.\n\nINHERITED PROPS:\n    ex_props- arbitrary properties associated with this deco object\n\nPROPERTIES:\n    name - unique identifier of this deco object",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4367,
        "docstring": "Constructor for base decoration objets\n\nIN:\n    name - unique identifier to use for this deco object\n    ex_props - dict of aribtrary properties associated with this\n        deco object.\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "name",
            "ex_props"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__eq__",
        "line": 4380,
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__ne__",
        "line": 4385,
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASDecoration": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASDecoration",
    "class_bases": [
      "MASDecorationBase"
    ],
    "line": 4392,
    "docstring": "Decoration object. Does NOT know positioning.\n\nPROPERTIES:\n    name - unique identifier of this deco object\n    ex_props - arbitrary properties associated with tihs deco object",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4401,
        "docstring": "constructor for MASDecoration. this will auto add the\ndeco object to the deco_db.\n\nIN:\n    s_name - shortname for this deco object. This should be\n        unique.\n        NOTE: this object's real name will be set to something\n            different. To lookup deco objects,\n            see mas_deco.get_deco.\n    img - image filepath associated with this deco object. If None,\n        then we assume fwm is set.\n        (Default: None)\n    fwm - MASFilterWeatherMap to use for this deco object. pass\n        None to mark the deco object as a \"simple\" object that\n        gets the standard filters applied.\n        (Default: None)\n    ex_props - dict of arbitrary properties associated with this\n        deco object.\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "s_name",
            "img",
            "fwm",
            "ex_props"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 4444,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_simple",
        "line": 4450,
        "docstring": "Returns True if this is a simple deco object.\nSimple Deco objects do not have custom filter settings.\n\nRETURNS: True if simple deco object, False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASImageTagDecoration": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASImageTagDecoration",
    "class_bases": [
      "MASDecorationBase"
    ],
    "line": 4460,
    "docstring": "Variation of MASDecoration meant for images already defined as image\ntags in game.\n\nPROPERTIES:\n    See MASDecorationBase",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4469,
        "docstring": "Constructor for MASImageTagDecoration\n\nIN:\n    tag - image tag to build this decoration for. This is also\n        used as the decoration name.\n    ex_props - arbitraary props to assocaitd with this deco object\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "tag",
            "ex_props"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 4485,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create",
        "line": 4489,
        "docstring": "Creates a MASImageTagDecoration and returns it. Will return an\nexisting one if we find one with the same tag.\n\nIN:\n    tag - tag to create MASImageTagDecoration for\n    ex_props - passed to the MASImageTagDecoration constructor.\n        NOTE: will be ignored if an existing MASImageTagDecoration\n        exists.\n        (Default: None)\n\nRETURNS: MASImageTagDecoration to use",
        "function_args": {
          "args": [
            "tag",
            "ex_props"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASDecoFrame": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASDecoFrame",
    "class_bases": [
      "object"
    ],
    "line": 4510,
    "docstring": "Contains position, scale, and rotation info about a decoration\n\nPROPERTIES:\n    priority - integer priority that this deco frame should be shown.\n        Smaller numbers are rendered first, and therefore can be hidden\n        behind deco frames with higher priorities.\n    pos - (x, y) coordinates of the top left of the decoration\n    scale - (ws, hs) scale values to apply to the image's width and\n        height. This is fed directly to FactorScale.\n            ws - multiplied to the decoration's image's width\n            hs - multiplied to the decoration's images' height\n        Both scale values have a precision limit of 2 decimal places\n    rotation - radians/degrees to rotate the decoration.\n        NOTE: CURRENTLY UNUSED",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4528,
        "docstring": "Constructor for a MASDecoFrame\n\nIN:\n    priority - integer priority that this deco frame should be shown.\n    pos - initial (x, y) coordinates to show the decoration on\n    scale - (ws, hs) scale values to apply to the image's width and\n        height. This is fed directly to FactorScale.\n            ws - multiplied to the decoration's image's width\n            hs - multiplied to the decoration's images' height\n        Both scale values have a precision limit of 2 decimal places",
        "function_args": {
          "args": [
            "self",
            "priority",
            "pos",
            "scale",
            "rotation"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__setattr__",
        "line": 4546,
        "docstring": "Set attr override for MASDecoFrame. This does very specific checks\nfor all numerical values to ensure compliance. This is important\nsince these are directly responsible for image appearance.",
        "function_args": {
          "args": [
            "self",
            "name",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 4578,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "fromTuple",
        "line": 4588,
        "docstring": "Loads data from a tuple into this deco frame's propeties.\n\nIN:\n    data - tuplized data of a MASDecoFrame. See toTuple for format\n\nRETURNS: True if successful, false otherwise",
        "function_args": {
          "args": [
            "self",
            "data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "toTuple",
        "line": 4612,
        "docstring": "Creates a tuple of this deco's properties for saving.\n\nRETURNS: tuple of the following format:\n    [0]: position (x, y)\n    [1]: width scale (integer, float part as integer)\n    [2]: height scale (integer, float part as integer)\n    [3]: rotation\n    [4]: priority",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASAdvancedDecoFrame": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASAdvancedDecoFrame",
    "class_bases": [
      "object"
    ],
    "line": 4632,
    "docstring": "Advanced deco frame. Basically an interface around\nrenpy.show params.\n\nEquivalence is supported, but only in positionig AND tag.\n\nPROPERTIES: NOTE: refer to renpy.show for info\n    name - set when this is shown\n    at_list\n    layer\n    what\n    zorder\n    tag - used as the decoration tag in deco db, if given\n    behind\n    real_tag - tag this image ends up being shown with.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4650,
        "docstring": "Constructor.\nNOTE: all parameter doc is copied from renpy.show\n\nat_list - list of tranforms applyed to the image\n    Equivalent of the `at` property\n    (Default: None)\nlayer - string, giving name of layer on which image will be shown\n    Equivalent of the `onlayer` property\n    (Default: None)\nwhat - if not None, displaybale that will be shown\n    Equivalent of `show expression`.\n    If provided, name will be the tag for the image\n    (Default: None)\nzorder - integer for zorder\n    if None, zorder is preserved, otherwise set to 0.\n    Equivalent of `zorder` property\n    (Default: 0)\ntag - ignored - do not use\nbehind - list of strings, giving image tags that this image is\n    shown behind.\n    Equivalent of the `behind` property",
        "function_args": {
          "args": [
            "self",
            "at_list",
            "layer",
            "what",
            "zorder",
            "tag",
            "behind"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "'master'",
            "None",
            "0",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__eq__",
        "line": 4695,
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__ne__",
        "line": 4708,
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hide",
        "line": 4714,
        "docstring": "Hides this image",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "show",
        "line": 4723,
        "docstring": "Shows image at this deco frame\n\nIN:\n    name - tag of the image to show",
        "function_args": {
          "args": [
            "self",
            "name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "showing",
        "line": 4750,
        "docstring": "Analogus to renpy.showing\n\nIN:\n    layer - layer to check, if None, uses the default layer for\n        the tag.\n        (Default: None)\n\nRETURNS: True if this deco frame is showing on the layer, False\n    if not",
        "function_args": {
          "args": [
            "self",
            "layer"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASImageTagDecoDefinition": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASImageTagDecoDefinition",
    "class_bases": [
      "MASExtraPropable"
    ],
    "line": 4765,
    "docstring": "Class that defines bg-based properties for image tags.\n\nThe Primary purpose of these is for auto image management when\ndealing with backgrounds. You can define position position information\nfor every image for specific backgrounds (NOTE: this is via\nMASAdvancedDecoFrame)\n\nDefaults cannot be defined because of the general issues.\nCustom BGs should run the staticmethod register_img to setup\ntheir custom mapping (or override)\n\nPROPERTIES:\n    deco - MASImageTagDecoration object associated with this definition\n    bg_map - mapping of background ids to tuple:\n        [0] - tag to use, or None to use the known tag\n        [1] - adv deco frame",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4785,
        "docstring": "Constructor\n\nIN:\n    deco - MASImageTagDefintion object to use",
        "function_args": {
          "args": [
            "self",
            "deco"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "get_adf",
        "line": 4801,
        "docstring": "Gets MASAdvancedDecoFrame for a bg for a given tag.\n\nIN:\n    bg_id - background ID to get deco frame for\n    tag - tag to get deco frame for\n\nRETURNS: MASAdvancedDecoFrame, or None if not found",
        "function_args": {
          "args": [
            "bg_id",
            "tag"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_img",
        "line": 4817,
        "docstring": "Gets the tag and MASAdvancedDecoFrame to use for a bg for this\ndefinition.\n\nIN:\n    bg_id - background ID to get img info for\n    tag - tag to get img info for\n\nRETURNS: tuple (or None if not found)\n    [0] - tag to use\n    [1] - MASAdvancedDecoFrame to use",
        "function_args": {
          "args": [
            "self",
            "bg_id"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "get_img_for_bg",
        "line": 4841,
        "docstring": "Gets the tag and MASAdvancedDecoFrame to use for a bg for a\ngiven main tag.\n\nIN:\n    bg_id - backgroud ID to get img info for\n    tag - tag to get img info for\n\nRETURNS: tuple (or None if not found)\n    [0] - tag to use\n    [1] - MASAdvancedDecoFrame to use",
        "function_args": {
          "args": [
            "bg_id",
            "tag"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "get_img_setting",
        "line": 4861,
        "docstring": "Gets the tag and MASAdvancedDecoFrame setting to use for a bg for\na given main tag.\nNOTE: do not use this for render. Use this for getting raw\nsettings.\n\nIN:\n    bg_id - background ID to get img info for\n    tag - tag to get img info for\n\nRETURNS: tuple (or None if not found)\n    [0] - tag used in the setting\n    [1] - MASAdvancedDecoFrame used in the setting",
        "function_args": {
          "args": [
            "bg_id",
            "tag"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "register_bg",
        "line": 4882,
        "docstring": "Registers the given MASAdvanecdDecoFrame to this definition for\na bg id.\n\nIN:\n    bg_id - MASBackgroundID\n    adv_deco_frame - MASAdvancedDecoFrame to register\n    replace_tag - tag to use instead of the known tag\n        if None, then we use the known tag instead.\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "bg_id",
            "adv_deco_frame",
            "replace_tag"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "register_bg_same",
        "line": 4896,
        "docstring": "Register that a bg for this tag should use the same\nMASAdvancedDecoFrame + tag info as another bg.\n\nIN:\n    bg_id_src - bg ID of the background to copy deco frame from\n    bg_id_dest - bg ID of the background to use deco frame for",
        "function_args": {
          "args": [
            "self",
            "bg_id_src",
            "bg_id_dest"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "register_img",
        "line": 4910,
        "docstring": "Registers MASAdvancedDecoFrame for a BG and tag.\nWill create a new entry if the tag does not have a definition yet.\nNOTE: this will basically create a dummy MASImageTagDecoration\nobject. Use store.mas_deco.get_deco to get the decoration object.\n\nIN:\n    tag - tag to register decoframe for bg\n    bg_id - id of teh bg to register decoframe for\n    adv_dec_frame - the decoframe to register\n    replace_tag - tag to use instead of the known tag for this bg\n        if None, then we use the known tag instead.\n        (Default: None)",
        "function_args": {
          "args": [
            "tag",
            "bg_id",
            "adv_deco_frame",
            "replace_tag"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "register_img_same",
        "line": 4934,
        "docstring": "Registers that a bg for a tag should use the same\nMASAdvancedDecoFRame + tag info as another bg for that tag.\nWill create a new entry if the tag does not have a definition yet.\n\nIN:\n    tag - tag to register decoframe for\n    bg_id_src - bg ID of the background to copy deco frame from\n    bg_id_dest - bg ID of the background to use deco frame for",
        "function_args": {
          "args": [
            "tag",
            "bg_id_src",
            "bg_id_dest"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASDecoManager": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASDecoManager",
    "class_bases": [
      "object"
    ],
    "line": 4967,
    "docstring": "Decoration manager for a background.\nManages decoration objects and their assocation with layers.\n\nGETTING:\n    This supports getting via bracket notation []\n    If a tag does not exist, None is returned.\n\nPROPERTIES:\n    changed - set when the decorations have changed and spaceroom\n        will need to show new things. (should be set by callers)",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 4981,
        "docstring": "Constructor",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__getitem__",
        "line": 5021,
        "function_args": {
          "args": [
            "self",
            "item"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_add_deco",
        "line": 5032,
        "docstring": "Adds a decoration object to the deco manager.\nNOTE: if decoration has already been added, the existing decoration\nobject is instead updated to the given layer and decoframe.\n\nNOTE: this should only be used for non-advanced decos\n\nIN:\n    layer - layer to add deco object to\n    deco_obj - MASDecoration object to add\n    deco_frame - MASDecoFrame to associated with deco object",
        "function_args": {
          "args": [
            "self",
            "layer",
            "deco_obj",
            "deco_frame"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_adv_add_deco",
        "line": 5061,
        "docstring": "Adds a decoration object to teh deco manager.\nThis is meant for Advanced DecoFrames\n\nIN:\n    deco_obj - MASDecoration object to add\n    adv_deco_frame - MASAdvancedDecoFRame to associate with deco\n        object.\n    override_tag - tag to use as the \"name\" for this deco",
        "function_args": {
          "args": [
            "self",
            "deco_obj",
            "adv_deco_frame",
            "override_tag"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "add_back",
        "line": 5079,
        "docstring": "Adds a decoration object to the back deco layer",
        "function_args": {
          "args": [
            "self",
            "deco_obj",
            "deco_frame"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "add_front",
        "line": 5086,
        "docstring": "Adds a decoration object to the front deco layer",
        "function_args": {
          "args": [
            "self",
            "deco_obj",
            "deco_frame"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "add_mid",
        "line": 5093,
        "docstring": "Adds a decoration object to the middle deco layer",
        "function_args": {
          "args": [
            "self",
            "deco_obj",
            "deco_frame"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "deco_iter",
        "line": 5100,
        "docstring": "Generator that yields deco objects and their frames\n\nTODO: probably should return more than this\n\nYIELDS: tuple contianing deco object and frame",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "deco_iter_adv",
        "line": 5110,
        "docstring": "Generates iter of advanced deco objects and their frames\n\nRETURNS: iter of tuple:\n    [0] - deco object\n    [1] - adv deco frame\n    [2] - the override tag (will be the same as deco object's name\n        if no override tag given)",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "diff_deco_adv",
        "line": 5127,
        "docstring": "Checks diffs between the given deco + frame and the the same deco\nin this manager.\n\nIN:\n    deco - deco to check\n    adv_df - MASAdvancedDecoFrame to check\n\nRETURNS: integer code:\n    0 - the given deco and equivalent frame exist in this\n        deco manager.\n    1 - the given deco exists but has a different frame in this\n        deco manager.\n    -1 - the given deco does NOT exist in this deco manager.",
        "function_args": {
          "args": [
            "self",
            "deco",
            "adv_df"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_override_name",
        "line": 5152,
        "docstring": "Gets the tag name that is actually being used for the given name\n\nIN:\n    name - name to get real tag name for\n\nRETURNS: the real tag name",
        "function_args": {
          "args": [
            "self",
            "name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "rm_deco",
        "line": 5163,
        "docstring": "REmoves all instances of the deco with the given name from this\ndeco manager.\n\nIN:\n    name - tag, either deco name or image tag, of the deco object\n        to remove",
        "function_args": {
          "args": [
            "self",
            "name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_showDecoTag": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_showDecoTag",
    "line": 5193,
    "docstring": "Shows a decoration object that is an image tag.\n\nNOTE: this should be called when you want to show a decoration-based\nimage, regardless of background. This will refer to the image tag\ndefinition to determine how the object will be shown.\n\nTo hide an image shown this way, see mas_hideDecoTag.\n\nIN:\n    tag - the image tag to show\n    show_now - set to True to show immediately\n        (Deafult: False)",
    "function_args": {
      "args": [
        "tag",
        "show_now"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hideDecoTag": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hideDecoTag",
    "line": 5222,
    "docstring": "Hides a decoration object that is an image tag\n\nNOTE: this should be called when you want to hide a decoration-based\nimage, regardless of background.\n\nThis is primarily for hiding images shown with the mas_showDecoTag\nfunction.\n\nIN:\n    tag - the image tag to hide\n    hide_now - set to True to hide immediately\n        (Default: False)",
    "function_args": {
      "args": [
        "tag",
        "hide_now"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isDecoTagEnabled": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isDecoTagEnabled",
    "line": 5250,
    "docstring": "Checks if the given deco tag is in the vis store, which means its\nslated to be visible if it can be.\n\nIN:\n    tag - the image tag to check\n\nRETURNS: True if the deco is slated to be visible, False if not",
    "function_args": {
      "args": [
        "tag"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isDecoTagVisible": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isDecoTagVisible",
    "line": 5263,
    "docstring": "Checks if this deco is showing - as in the image associated with\nthis tag is being rendered (including replace tag depending on bg)\n\nIN:\n    tag - the image tag to check\n\nRETURNS: True if the deco is being shown, false if not",
    "function_args": {
      "args": [
        "tag"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_player_bday_curr": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_player_bday_curr",
    "line": 5287,
    "docstring": "sets date of current year bday, accounting for leap years",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_AffSave": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_AffSave",
    "line": 5305,
    "docstring": "Runs saving algo for affection",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_AffLoad": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_AffLoad",
    "line": 5311,
    "docstring": "Runs loading algo for affection",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isA01": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isA01",
    "line": 5321,
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isO31": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isO31",
    "line": 5347,
    "docstring": "Returns True if the given date is o31\n\nIN:\n    _date - date to check.\n        If None, we use today's date\n        (Default: None)\n\nRETURNS: True if given date is o31, False otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31ShowVisuals": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31ShowVisuals",
    "line": 5363,
    "docstring": "Shows o31 visuals",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31HideVisuals": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31HideVisuals",
    "line": 5371,
    "docstring": "Hides o31 visuals + vignette",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31ShowSpriteObjects": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31ShowSpriteObjects",
    "line": 5379,
    "docstring": "Shows o31 specific sprite objects",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31HideSpriteObjects": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31HideSpriteObjects",
    "line": 5387,
    "docstring": "Hides o31 specific sprite objects",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hasO31DeskAcs": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hasO31DeskAcs",
    "line": 5404,
    "docstring": "Checks if we have any o31 desk acs\n\nOUT:\n    boolean",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31HideDeskAcs": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31HideDeskAcs",
    "line": 5422,
    "docstring": "Removes o31 desk acs",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31CapGainAff": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31CapGainAff",
    "line": 5434,
    "docstring": "CapGainAffection function for o31. See mas_capGainAff for details",
    "function_args": {
      "args": [
        "amount"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31CostumeWorn": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31CostumeWorn",
    "line": 5441,
    "docstring": "Checks if the given clothes was worn on o31\n\nIN:\n    clothes - Clothes object to check\n\nRETURNS: year the given clothe was worn if worn on o31, None if never\n    worn on o31.",
    "function_args": {
      "args": [
        "clothes"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31CostumeWorn_n": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31CostumeWorn_n",
    "line": 5456,
    "docstring": "Checks if the given clothes (name) was worn on o31\n\nIN:\n    clothes_name - Clothes name to check\n\nRETURNS: year the given clothes name was worn if worn on o31, none if\n    never worn on o31.",
    "function_args": {
      "args": [
        "clothes_name"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31SelectCostume": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31SelectCostume",
    "line": 5469,
    "docstring": "Selects an o31 costume to wear. Costumes that have not been worn\nbefore are selected first.\n\nNOTE: o31 costume wear flag is NOT set here. Make sure to set this\n    manually later.\n\nIN:\n    selection_pool - pool to select clothes from. If NOne, we get a\n        default list of clothes with costume exprop\n\nRETURNS: a single MASClothes object of what to wear. None if cannot\n    return anything.",
    "function_args": {
      "args": [
        "selection_pool"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31SetCostumeWorn": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31SetCostumeWorn",
    "line": 5551,
    "docstring": "Sets that a clothing item is worn. Exprop checking is done\n\nIN:\n    clothes - clothes object to set\n    year - year that the costume was worn. If NOne, we use current year",
    "function_args": {
      "args": [
        "clothes",
        "year"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31SetCostumeWorn_n": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31SetCostumeWorn_n",
    "line": 5565,
    "docstring": "Sets that a clothing name is worn. NO EXPROP CHECKING IS DONE\n\nIN:\n    clothes_name - name of clothes to set\n    year - year that the costume was worn. If None, we use current year",
    "function_args": {
      "args": [
        "clothes_name",
        "year"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_o31Cleanup": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_o31Cleanup",
    "line": 5578,
    "docstring": "Cleanup function for o31",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isD25": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isD25",
    "line": 5615,
    "docstring": "Returns True if the given date is d25\n\nIN:\n    _date - date to check\n        If None, we use today's date\n        (default: None)\n\nRETURNS: True if given date is d25, False otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isD25Eve": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isD25Eve",
    "line": 5632,
    "docstring": "Returns True if the given date is d25 eve\n\nIN:\n    _date - date to check\n        If None, we use today's date\n        (Default: None)\n\nRETURNS: True if given date is d25 eve, False otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isD25Season": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isD25Season",
    "line": 5649,
    "docstring": "Returns True if the given date is in d25 season. The season goes from\ndec 11 to jan 5.\n\nNOTE: because of the year rollover, we cannot check years\n\nIN:\n    _date - date to check\n        If None, we use today's date\n        (Default: None)\n\nRETURNS: True if given date is in d25 season, False otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isD25Post": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isD25Post",
    "line": 5672,
    "docstring": "Returns True if the given date is after d25 but still in D25 season.\nThe season goes from dec 1 to jan 5.\n\nIN:\n    _date - date to check\n        If None, we use today's date\n        (Default: None)\n\nRETURNS: True if given date is in d25 season but after d25, False\n    otherwise.",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isD25PreNYE": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isD25PreNYE",
    "line": 5694,
    "docstring": "Returns True if the given date is in d25 season and before nye.\n\nIN:\n    _date - date to check\n        if None, we use today's date\n        (Default: None)\n\nRETURNSL True if given date is in d25 season but before nye, False\n    otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isD25PostNYD": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isD25PostNYD",
    "line": 5712,
    "docstring": "Returns True if the given date is in d25 season and after nyd\n\nIN:\n    _date - date to check\n        If None, we use today's date\n        (Default: None)\n\nRETURNS: True if given date is in d25 season but after nyd, False\n    otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isD25Outfit": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isD25Outfit",
    "line": 5730,
    "docstring": "Returns True if the given date is tn the range of days where Monika\nwears the santa outfit on start.\n\nIN:\n    _date - date to check\n        if None, we use today's date\n        (Default: None)\n\nRETURNS: True if given date is in the d25 santa outfit range, False\n    otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isD25Pre": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isD25Pre",
    "line": 5749,
    "docstring": "IN:\n    _date - date to check\n        if None, we use today's date\n        (Default: None)\n\nRETURNS: True if given date is in the D25 season, but before Christmas, False\n    otherwise\n\nNOTE: This is used for gifts too",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isD25GiftHold": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isD25GiftHold",
    "line": 5766,
    "docstring": "IN:\n    _date - date to check, defaults None, which means today's date is assumed\n\nRETURNS:\n    boolean - True if within d25c start, to d31 (end of nts range)\n    (The time to hold onto gifts, aka not silently react)",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_d25ShowVisuals": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_d25ShowVisuals",
    "line": 5780,
    "docstring": "Shows d25 visuals.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_d25HideVisuals": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_d25HideVisuals",
    "line": 5790,
    "docstring": "Hides d25 visuals",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_d25ReactToGifts": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_d25ReactToGifts",
    "line": 5800,
    "docstring": "Goes thru the gifts stored from the d25 gift season and reacts to them\n\nthis also registeres gifts",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_d25SilentReactToGifts": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_d25SilentReactToGifts",
    "line": 5850,
    "docstring": "Method to silently 'react' to gifts.\n\nThis is to be used if you gave Moni a christmas gift but didn't show up on\nD25 when she would have opened them in front of you.\n\nThis also registeres gifts",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isNYE": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isNYE",
    "line": 5932,
    "docstring": "Returns True if the given date is new years eve\n\nIN:\n    _date - date to check\n        If None, we use today's date\n        (Default: None)\n\nRETURNS: True if given date is new years eve, False otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isNYD": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isNYD",
    "line": 5949,
    "docstring": "RETURNS True if the given date is new years day\n\nIN:\n    _date - date to check\n        if None, we use today's date\n        (Default: None)\n\nRETURNS: True if given date is new years day, False otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isplayer_bday": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isplayer_bday",
    "line": 5969,
    "docstring": "IN:\n    _date - date to check\n        If None, we use today's date\n        (default: None)\n\n    use_date_year - True if we should use the year from _date or not.\n        (Default: False)\n\nRETURNS: True if given date is player_bday, False otherwise",
    "function_args": {
      "args": [
        "_date",
        "use_date_year"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "strip_mas_birthdate": {
    "type": "function",
    "function_decorators": [],
    "identifier": "strip_mas_birthdate",
    "line": 5991,
    "docstring": "strips mas_birthdate of its conditional and action to prevent double birthday sets",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_pbdayCapGainAff": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_pbdayCapGainAff",
    "line": 6000,
    "function_args": {
      "args": [
        "amount"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isF14": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isF14",
    "line": 6007,
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_f14CapGainAff": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_f14CapGainAff",
    "line": 6013,
    "function_args": {
      "args": [
        "amount"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "getCharacterImage": {
    "type": "function",
    "function_decorators": [],
    "identifier": "getCharacterImage",
    "line": 6021,
    "function_args": {
      "args": [
        "char",
        "expression"
      ],
      "pos_only_args": [],
      "defaults": [
        "'1a'"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getPropFromStyle": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getPropFromStyle",
    "line": 6037,
    "docstring": "Retrieves a property from a style\nRecursively checks parent styles until the property is found.\n\nIN:\n    style_name - name of style as string\n    prop_name - property to find as string\n\nRETURNS: value of the propery if we can find it, None if not found",
    "function_args": {
      "args": [
        "style_name",
        "prop_name"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_prefixFrame": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_prefixFrame",
    "line": 6075,
    "docstring": "Generates a frame object with the given prefix substitued into the\nimage. This effectively makes a copy of the given Frame object.\n\nNOTE: cannot use _duplicate as it does shallow copy for some reason.\n\nIN:\n    frm - Frame object\n    prefix - prefix to replace `prefix_`. \"_\" will be added if not\n        found\n\nRETURNS: Frame object, or None if failed to make it",
    "function_args": {
      "args": [
        "frm",
        "prefix"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASIdleMailbox": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASIdleMailbox",
    "class_bases": [
      "store.MASMailbox"
    ],
    "line": 6117,
    "docstring": "Spaceroom idle extension of the mailbox\n\nPROPERTIES:\n    (no additional)\n\nSee MASMailbox for properties",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 6151,
        "docstring": "Constructor for the idle mailbox",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "send_rebuild_msg",
        "line": 6158,
        "docstring": "Sends the rebuild message to the mailbox",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_rebuild_msg",
        "line": 6164,
        "docstring": "Gets rebuild message",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "send_ds_gre_type",
        "line": 6170,
        "docstring": "Sends greeting type to mailbox",
        "function_args": {
          "args": [
            "self",
            "gre_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_ds_gre_type",
        "line": 6176,
        "docstring": "Gets dockstat greeting type\n\nRETURNS: None by default",
        "function_args": {
          "args": [
            "self",
            "default"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "send_idle_cb",
        "line": 6187,
        "docstring": "Sends idle callback label to mailbox",
        "function_args": {
          "args": [
            "self",
            "cb_label"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_idle_cb",
        "line": 6193,
        "docstring": "Gets idle callback label",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "send_skipmidloopeval",
        "line": 6199,
        "docstring": "Sends skip mid loop eval message to mailbox",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_skipmidloopeval",
        "line": 6205,
        "docstring": "Gets skip midloop eval value",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "send_scene_change",
        "line": 6211,
        "docstring": "Sends scene change message to mailbox\nNOTE: only do this if a scene is acutally necessary",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_scene_change",
        "line": 6218,
        "docstring": "Gets scene change value",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "send_dissolve_all",
        "line": 6224,
        "docstring": "Sends dissolve all message to mailbox",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_dissolve_all",
        "line": 6230,
        "docstring": "Gets dissolve all value",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "send_forced_exp",
        "line": 6236,
        "docstring": "Sends forced exp message to mailbox\n\nIN:\n    exp - full exp code to force (None to use idle disp)",
        "function_args": {
          "args": [
            "self",
            "exp"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_forced_exp",
        "line": 6245,
        "docstring": "Gets forced exp value",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASHighlightMap": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASHighlightMap",
    "class_bases": [
      "object"
    ],
    "line": 6258,
    "docstring": "SEALED\n        Maps arbitrary keys to <MASFilterMap> objects\n\n        DO NOT EXTEND THIS CLASS. If you need similar functionality, make a\n        wrapper around this. This class contains functions that may crash\n        when used in an unexpected context.\n\n        NOTE: values dont have to be MASFilterMAP objects, but certain\n            functions will fail if not.\n\n        NOTE: this can iterated over to retrieve all objects in here\n            EXCEPT for the default.\n\n        PROPERTIES:\n            None. Use provided functions to manipulate the map.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 6277,
        "docstring": "Constructor\n\nIN:\n    keys - iterable of keys that we are allowed to use.\n        NOTE: the default catch all key of \"*\" (KEY_ALL) does NOt\n        need to be in here.\n    default - value to use as the default/catch all object. This\n        is assigned to the KEY_ALL key.",
        "function_args": {
          "args": [
            "self",
            "keys",
            "default"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__iter__",
        "line": 6298,
        "docstring": "Iterator object (generator)",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_add_key",
        "line": 6307,
        "docstring": "Adds a key to the valid keys list. Also adds a value if desired\nNOTE: this is not intended to be done wildly. Please do not\nmake a habit of adding keys after construction.\nNOTE: do not use this to add values. if the given key already\nexists, the value is ignored.\n\nIN:\n    new_key - new key to add\n    new_value - new value to associate with this key\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "new_key",
            "new_value"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "add",
        "line": 6326,
        "docstring": "Adds value to map.\nNOTE: type is enforced here. If the given item is None\nit is ignored.\nNOTE: this will NOT set the default even if KEY_ALL is passed in\n\nIN:\n    key - key to store item to\n    value - value to add\n        if None is passed, this is equivalent to clear",
        "function_args": {
          "args": [
            "self",
            "key",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "apply",
        "line": 6348,
        "docstring": "Applies the given dict mapping to this MASHighlightMap.\nNOTE: will not add invalid keys.\n\nIN:\n    mapping - dict of the following format:\n        key: valid key for this map\n        value: value to add",
        "function_args": {
          "args": [
            "self",
            "mapping"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "clear",
        "line": 6361,
        "docstring": "Clears value with the given key.\nNOTE: will NOT clear the default even if KEY_ALL is passed in\n\nIN:\n    key - key to clear with",
        "function_args": {
          "args": [
            "self",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "clear_hl_mapping",
        "line": 6373,
        "docstring": "Clears hl mapping in the given hl data object. AKA: Sets the\nhl mapping portion of a pre-MHM MPM to {}.\n\nNOTE: this should only be used with  the MASPoseMap._transform\nfunction with MASAccessory\n\nIN:\n    hl_mpm_data - hl data set in a MASPoseMap.\n\nRETURNS: hl data to set in a MASPoseMap.",
        "function_args": {
          "args": [
            "hl_mpm_data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "convert_mpm",
        "line": 6391,
        "docstring": "Converts hl mappings in a MASPoseMap to MASHighlightMAp objects\n\nIN:\n    hl_keys - highlight keys to use\n    mpm - MASPoseMap object to convert",
        "function_args": {
          "args": [
            "hl_keys",
            "mpm"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create_from_mapping",
        "line": 6419,
        "docstring": "Creates a MASHighlightMap using keys/default/mapping\n\nIN:\n    hl_keys - list of keys to use\n    hl_def - default highlight to use. Can be None\n    hl_mapping - mapping to use.\n\nRETURNS: created MASHighlightMap",
        "function_args": {
          "args": [
            "hl_keys",
            "hl_def",
            "hl_mapping"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "fltget",
        "line": 6434,
        "docstring": "Combines getting from here and getting the resulting MASFilterMap\nobject.\n\nIN:\n    key - key to get from this map\n    flt - filter to get from associated MASFilterMap, if found\n    defval - default value to return if no flt value could be\n        found.\n        (Default: None)\n\nRETURNS: value in the MASFilterMap associated with the given\n    flt, using the MASFilterMap associated with the given key.\n    or defval if no valid MASfilterMap or value found.",
        "function_args": {
          "args": [
            "self",
            "key",
            "flt",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "fromJSON",
        "line": 6457,
        "docstring": "Builds hl data from JSON data\n\nIN:\n    json_obj - JSON object to parse\n    ind_lvl - indentation level\n        NOTE: this function handles loading/success log so\n        do NOT increment indent when passing in\n    hl_keys - expected keys of this highlight map\n\nOUT:\n    msg_log - list to add messagse to\n\nRETURNS: hl_data, ready to passed split and passed into\n    create_from_mapping. Tuple:\n    [0] - default MASFilterMap object\n    [1] - dict:\n        key: hl_key\n        value: MASFilterMap object\n    or None if no data, False if failure in parsing occured",
        "function_args": {
          "args": [
            "json_obj",
            "msg_log",
            "ind_lvl",
            "hl_keys"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 6508,
        "docstring": "Gets value wth the given key.\n\nIN:\n    key - key of item to get\n\nRETURNS: MASFilterMap object, or None if not found",
        "function_args": {
          "args": [
            "self",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getdef",
        "line": 6523,
        "docstring": "Gets the default value\n\nRETURNS: MASFilterMap object, or NOne if not found",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "keys",
        "line": 6531,
        "docstring": "gets keys in this map\n\nRETURNS: tuple of keys",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "o_fltget",
        "line": 6540,
        "docstring": "Similar to fltget, but on a MASHighlightMap object.\nNOTE: does None checks of mhm and flt.\n\nIN:\n    mhm - MASHighlightMap object to run fltget on\n    key - key to get MASFilterMap from mhm\n    flt - filter to get from associated MASFilterMap\n    defval - default value to return if no flt value could be found\n        (Default: None)\n\nRETURNS: See fltget",
        "function_args": {
          "args": [
            "mhm",
            "key",
            "flt",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "setdefault",
        "line": 6559,
        "docstring": "Sets the default value\n\nIN:\n    value - value to use as default",
        "function_args": {
          "args": [
            "self",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASBackgroundFilterTypeException": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASBackgroundFilterTypeException",
    "class_bases": [
      "Exception"
    ],
    "line": 6586,
    "docstring": "Type exception for MASBackgroundFilter objects",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 6591,
        "docstring": "Constructor\n\nIN:\n    obj - object that was not what we expected\n    mbf_type - type we expected",
        "function_args": {
          "args": [
            "self",
            "obj",
            "mbf_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__str__",
        "line": 6601,
        "docstring": "String",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASBackgroundFilterSliceDuplicateException": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASBackgroundFilterSliceDuplicateException",
    "class_bases": [
      "Exception"
    ],
    "line": 6608,
    "docstring": "Exception for when a Background fitler slice is in both a day chunk\nand a night chunk.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 6614,
        "docstring": "Constructor\n\nIN:\n    flt - the filter name of the offending fitler slice.",
        "function_args": {
          "args": [
            "self",
            "flt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__str__",
        "line": 6623,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASBackgroundFilterSlice": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASBackgroundFilterSlice",
    "class_bases": [
      "object"
    ],
    "line": 6627,
    "docstring": "Represntation of a filter for a MASBackground.\nthis is related to the sprite filters, but gives each filter extra\noomph.\n\nBG filters are designed to be flexible to work with BGs.\nSee the MASBackgroundFilterChunk for more info on how this works.\n\nPROPERTIES:\n    name - the name of this filter. This should be a filter ENUM.\n        NOTE: this not checked until init level 0\n    minlength - the amount of time in seconds that this filter must\n        be able to be used for it to be shown. If the filter cannot be\n        shown for this amount of time, it will not be shown at all.\n    maxlength - the amount of time in seconds that this filter can\n        be shown. The filter will never be shown more than this amt\n        of seconds. If None, then max is unbounded.\n    priority - the priority of this filter object. Larger number means\n        higher priority. Lower priority means filter will be removed\n        first.\n    flt - the filter (imagematrix) objects to use. OPTIONAL.\n        if this is None, it is assumed the filter data is handled\n        elsewhere.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 6656,
        "docstring": "Constructor\n\nIN:\n    name - name of the filter. This is NOT checked against filter\n        ENUMS until init level 0.\n    minlength - amount of time in seconds that this filter must\n        be at least shown for.\n    maxlength - amount of time in seconds that this at most can be\n        shown for.\n        if None, max time is unbounded\n        (Default: None)\n    priority - priority of this filter object. Larger number means\n        higher priority.\n        Must be between 1 and 10, inclusive.\n        Defaults to 10 if invalid.\n        (Default: 10)\n    flt - imagemanip/matrix compatible filter to use.\n        only pass in if you wish to use the `add_to_filters`\n        function\n        (Default: None)\n    cache - pass False to not cache this object.\n        Only for debug purposes\n        (Default: True)",
        "function_args": {
          "args": [
            "self",
            "name",
            "minlength",
            "maxlength",
            "priority",
            "flt",
            "cache"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "1",
            "None",
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__eq__",
        "line": 6703,
        "docstring": "EQ implementation.\nBased on hash",
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__hash__",
        "line": 6712,
        "docstring": "Hash implementation. FilterSlices are unique based on name,\nminlength and priority",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__ne__",
        "line": 6724,
        "docstring": "Not equals implementation",
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 6730,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__str__",
        "line": 6740,
        "docstring": "Slice as string",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "add_to_filters",
        "line": 6751,
        "docstring": "Adds this filter to the filters dict. Wil fail and log if used\nafter init level -1.\nOnly works if self.flt is not None.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "cachecreate",
        "line": 6761,
        "docstring": "Builds a MASBackgroundFilterSlice unless we have one in cache\n\nIN:\n    See Constructor\n\nRETURNS: MASBackgroundFilterSlice object",
        "function_args": {
          "args": [
            "cls",
            "name",
            "minlength",
            "maxlength",
            "priority",
            "flt"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "10",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "can_fit",
        "line": 6788,
        "docstring": "Checks if this filter can fit in the time allotted\n\nIN:\n    seconds - number of seconds to check\n\nRETURNS: True if this filter can fit in the given number of seconds\n    FAlse if not",
        "function_args": {
          "args": [
            "self",
            "seconds"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "can_fit_td",
        "line": 6800,
        "docstring": "Checks if the filter can fit in the time allotted\n\nIN:\n    td - timedelta object to check\n\nRETURNS: True if this filter can fit in the given timedelta,\n    False if not",
        "function_args": {
          "args": [
            "self",
            "td"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "gen_hash",
        "line": 6813,
        "docstring": "Generates a hash of the components of a MASBackgroundFilterSlice\n\nIN:\n    name - name to use\n    minlength - minlength to use\n    maxlength - maxlength to use\n    priority - priority to use\n\nRETURNS: hash of the object that would be created with the given\n    properties.",
        "function_args": {
          "args": [
            "name",
            "minlength",
            "maxlength",
            "priority"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_max",
        "line": 6833,
        "docstring": "Checks if the given vlaue is larger than max length.\nIf this slice is unbounded, this will always return False\n\nIN:\n    value - value to check\n\nRETURNS: True if the value is larger than maxlength, False if not",
        "function_args": {
          "args": [
            "self",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "verify",
        "line": 6848,
        "docstring": "Verifies if this filter's name is a valid filter. Call this\nafter init level -1.\n\nRETURNS: True if filter is valid, False if not",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASBackgroundFilterSliceData": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASBackgroundFilterSliceData",
    "class_bases": [
      "object"
    ],
    "line": 6858,
    "docstring": "Relates a MASBackgroundFilterSlice to its order and offset\n\nPROPERTIES:\n    offset - the offset associated with this slice\n    length - the length of this slice data\n    order - the order associated to this slice\n    flt_slice - the slice to associate",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 6869,
        "docstring": "Constructor\n\nIN:\n    order - the order for this slice\n    flt_slice - the slice to associate with this order",
        "function_args": {
          "args": [
            "self",
            "order",
            "flt_slice"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__gt__",
        "line": 6882,
        "docstring": "Greater than uses order",
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__lt__",
        "line": 6890,
        "docstring": "Less than uses order",
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 6898,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__str__",
        "line": 6909,
        "docstring": "strings are offset + order + name",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__len__",
        "line": 6920,
        "docstring": "Returns length",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "eff_minlength",
        "line": 6926,
        "docstring": "Calculates the ending offset assuming min length\n\nRETURNS: offset + minlength",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "highest_priority",
        "line": 6935,
        "docstring": "Finds the MASBackgroundFilterSliceData with the highest priority\nand returns its index\n\nIN:\n    sl_data_list - list containig MASBackgroundFilterSliceData\n        objects to check\n\nRETURNS: index of the MASBackgroundFilterSliceData with the\n    highest priority",
        "function_args": {
          "args": [
            "sl_data_list"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "lowest_priority",
        "line": 6957,
        "docstring": "Finds the MASBackgroundFilterSliceData with the lowest priority\nand returns its index\n\nIN:\n    sl_data_list - list containing MASBackgroundFilterSliceData\n        objects to check\n\nRETURNS: index of the MASBackgroundFilterSliceData with the\n    lowest priority",
        "function_args": {
          "args": [
            "sl_data_list"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "sk",
        "line": 6979,
        "docstring": "order sort key",
        "function_args": {
          "args": [
            "obj"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "sko",
        "line": 6986,
        "docstring": "offset sort key",
        "function_args": {
          "args": [
            "obj"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASBackgroundFilterChunk": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASBackgroundFilterChunk",
    "class_bases": [
      "object"
    ],
    "line": 6993,
    "docstring": "Chunk of filters for backgrounds.\n\nA BG filter chunk is a set of slices that represent a progression\nof filters througout the time range. The slices are handled in a way\nwhere they are intelligently picked depending on suntimes. This allows\nfor handling of cases where there isn't enough time for each slice to\nexist.\n\nEach slice is a MASBackgroundFilterSlice object. The minlength property\nis used to determine if the object canfit in its allocated time slice.\nPriorities are used to determine the slices to keep. By default we\ntry to keep every slice we can. Minlength is also used to determine\nwhen to swap filters.\n\nSlices are organized by an order. The order value determines the\ndesired order of slices.\n\nCode can be ran during a filter change by passing in function to\nappropriate param. Any exceptions are caught and loggged.\n\nPROPERTIES:\n    is_day - True if this is a day chunk, False if not",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 7028,
        "docstring": "Constructor\n\nIN:\n    is_day - True if this is a \"Day\" chunk. False if not\n    pp - progpoint to run on a filter change (or slice change)\n        This is ran multiple times if multiple filter changes\n        occur, but NOT at all if a chunk change occurs.\n        This is NOT guaranteed to run if more a than day goes by\n        between progressions.\n        the following args are passed to the progpoint:\n            flt_old - the outgoing filter (string)\n                NOTE: this is None if we are starting the game\n            flt_new - the incoming filter (string)\n            curr_time - the current time\n        pass None to not use a progpoint\n    *slices - slice arguments. Each item should be a\n        MASBackgroundFilterSlice object.\n        This should be in the desired order.\n        NOTE: there must be at least one slice with unbounded time",
        "function_args": {
          "args": [
            "self",
            "is_day",
            "pp"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": "slices"
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 7070,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__str__",
        "line": 7081,
        "docstring": "Shows effective slice information",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__len__",
        "line": 7109,
        "docstring": "Length of this chunk",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_adjust_offset",
        "line": 7115,
        "docstring": "Adjust offset of all eff_slices, starting from the given index.\n\nIN:\n    index - index to start adjusting offsets.\n    amt - amount to add to offsets. can be negative to\n        subtract.",
        "function_args": {
          "args": [
            "self",
            "index",
            "amt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "adv_slice",
        "line": 7127,
        "docstring": "Runs advance slice alg, running progpoints, but does NOT actually\nset new index.\n\nIN:\n    sfco - seconds from chunk offset\n    st_index - index to start at\n    run_pp - True will run the progpoints, False will not\n    curr_time - passed to the progpoint, should be current time\n        as a datetime.time object\n\nRETURNS: new slice index",
        "function_args": {
          "args": [
            "self",
            "sfco",
            "st_index",
            "run_pp",
            "curr_time"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_adv_slice_change",
        "line": 7163,
        "docstring": "Checks if a slice offset at the given index is smaller than\nsfco, and runs pps if so. This is mainly to combine a condition\ncheck and work together so we don't need extra if statements.\n\nIN:\n    slidx - index of the NEXT slice to check\n        Assumes will not go past eff_slices length\n    sfco - seconds from chunk offset\n    run_pp - True will run progpoints, False will not\n    curr_time - passed to progpoints, should be current time as\n        datetime.time object\n\nRETURNS: True if we should continue looping index, False if we\n    have found the slice sfco belongs in.",
        "function_args": {
          "args": [
            "self",
            "slidx",
            "sfco",
            "run_pp",
            "curr_time"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build",
        "line": 7209,
        "docstring": "Builds the effective slices array using the given length as\nguidance.\n\nslices are built in a greedy fashion starting from 0, respecting\npriorities and etc.\n\nIN:\n    length - the amount of seconds this chunk encompasses",
        "function_args": {
          "args": [
            "self",
            "length"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "current",
        "line": 7252,
        "docstring": "Gets current filter\n\nRETURNS: current filter, or None if could not",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "current_pos",
        "line": 7262,
        "docstring": "Generates internal information related to current position\n\nRETURNS: tuple:\n    [0] - current slice index\n    [1] - beginning offset of the current slice\n    [2] - beginning offset of the next slice\n        NOTE: this is -1 if no next slice",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_current_sldata",
        "line": 7279,
        "docstring": "Gets current slice data\n\nRETURNS: current slice data",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_eff_chunk_min_end",
        "line": 7287,
        "docstring": "Gets the minimal chunk end length.\n\nRETURNS: last eff_slice's eff_offset + its minlength",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_expand",
        "line": 7295,
        "docstring": "Expands all slices in effective slices until it fills the given\nlength\n\nIN:\n    length - the amount of length we need to fill",
        "function_args": {
          "args": [
            "self",
            "length"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_expand_once",
        "line": 7331,
        "docstring": "Runs expansion alg. This will add index-based numbers from the\ngiven value list to effective slice offsets and subtract added amts\nfrom the given corresponding position in value list.\n\nIN:\n    value_list - list of amounts to add to individual items in\n        eff_slices\n\nOUT:\n    value_list - leftover amounts to distribute to eff_slices",
        "function_args": {
          "args": [
            "self",
            "value_list"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_expand_sld",
        "line": 7350,
        "docstring": "Expands a slicedata item. Also adjusts value list as appropriate\n\nIN:\n    index - position to expand slice data and value list\n    value_list - list of amounts to add to individual items in\n        eff_slices\n    c_off - current offset value\n\nOUT:\n    value_list - value at index changed to leftover amounts or 0\n\nRETURNS: new current offset value",
        "function_args": {
          "args": [
            "self",
            "index",
            "value_list",
            "c_off"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "filters",
        "line": 7388,
        "docstring": "Gets list of filters\n\nIN:\n    ordered - True will return the filters in an ordered list.\n        This may contain duplicates.\n\nRETURNS: list of all the filters associatd with this filter chunk\n    (list of strings)",
        "function_args": {
          "args": [
            "self",
            "ordered"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "first_flt",
        "line": 7410,
        "docstring": "Gets the first filter in this chunk\n\nRETURNS: first filter in this chunk, or None if no eff slices",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "last_flt",
        "line": 7421,
        "docstring": "Gets the last filter in this chunk\n\nRETURNS: last filter in this chunk, or None if no eff slices",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_min_fill",
        "line": 7433,
        "docstring": "Fills the effective slices using minlength logic.\n\nIN:\n    length - the length we are filling\n\nRETURNS: leftovers - contains slices that we could not fit. Could\n    be empty if we managed to fit all slices.",
        "function_args": {
          "args": [
            "self",
            "length"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_parse_slices",
        "line": 7474,
        "docstring": "Parses the slices data",
        "function_args": {
          "args": [
            "self",
            "slices"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_pf_insert",
        "line": 7509,
        "docstring": "Inserts a filter slice offset into the effective slices list\nbased on a starting index.\n\nIN:\n    index - starting index\n    sl_data - the slice data to insert",
        "function_args": {
          "args": [
            "self",
            "index",
            "sl_data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_pp_exec",
        "line": 7536,
        "docstring": "Executes a progpoint\n\nExceptions are logged\n\nIN:\n    flt_old - outgoing filter (string)\n    flt_new - incoming filter (string)\n    curr_time - current time as datetime.time",
        "function_args": {
          "args": [
            "self",
            "flt_old",
            "flt_new",
            "curr_time"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_priority_fill",
        "line": 7562,
        "docstring": "Fills the effective slices using priority logic.\nThis assumes the eff slices has been filled with minimal logic\n\nIN:\n    length - the amount of length we need to fill\n    leftovers - slices that have not been added yet",
        "function_args": {
          "args": [
            "self",
            "length",
            "leftovers"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "progress",
        "line": 7628,
        "docstring": "Progresses the filter, running progpoints and updating indexes\n\nNOTE: we assume that our next target is in this chunk.\n\nProgpoints are ran for every slice we go through.\n\nIN:\n    sfco - seconds from chunk offset to progress to\n    curr_time - current time in datetime.time\n\nRETURNS: current filter after progression",
        "function_args": {
          "args": [
            "self",
            "sfco",
            "curr_time"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "update",
        "line": 7647,
        "docstring": "Updates the internal indexes.\nNOTE: this will NOT call any progpoints\n\nIN:\n    ct_off - offset of current time, with respect to the chunk this\n        slice is in.",
        "function_args": {
          "args": [
            "self",
            "ct_off"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "reset_index",
        "line": 7674,
        "docstring": "Resets slice index to 0",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "verify",
        "line": 7680,
        "docstring": "Verifies the filters in this filter Chunk\nAssumed to be called at least at init level 0\nFilters should all exist.\n\nExceptions are raised if a bad filter is found.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASBackgroundFilterManager": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASBackgroundFilterManager",
    "class_bases": [
      "object"
    ],
    "line": 7694,
    "docstring": "Filter Management class for backgrounds.\n\nThe BG filter system slices a day into 3 chunks.\nthese chunks correspond to the suntimes system.\nMidNight to SunRise (MN - SR)\nSunRise to SunSet (SR - SS)\nSunSet to MidNignt (SS - MN)\n\nEach chunk is marked day/night, and is used when determining if a\nfilter is day or night. This means two separate chunks with different\nday/night settings can NOT contain same filters. If you need the same\nfilter content to be considerd day AND night, make two separate filter\nenums. This is to avoid ambiguities.\n\nPROPERTIES:\n    None",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 7725,
        "docstring": "Constructor\n\nIN:\n    mn_sr - MASBackgroundFilterChunk for midnight to sunrise\n    sr_ss - MASBackgroundFilterChunk for sunrise to sunset\n    ss_mn - MASBackgroundFilterChunk for sunset to midnight\n    pp - progpoint to run on a chunk change.\n        This may run multiple times if multiple chunk changes\n        have occurred.\n        This is NOT guaranteed to run if more than a day of time\n        passes between progressions.\n        the following args are passed to the progpoint:\n            chunk_old - the outgoing chunk (MBGFChunk)\n                NOTE: this is None if we are staring the game\n            chunk_new - the incoming chunk (MBGFChunk)\n            curr_time - the current time\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "mn_sr",
            "sr_ss",
            "ss_mn",
            "pp"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 7792,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__str__",
        "line": 7816,
        "docstring": "Shows chunks and curr chunk information",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "adv_chunk",
        "line": 7847,
        "docstring": "Runs advance chunks alg, running progpoints but does NOT actually\nset new index. This WILL SET SLICE INDEXES.\n\nIN:\n    sfmn - number of seconds since midnight\n    st_index - index to start at\n    run_pp - True will run the progpoints, FAlse will not\n    curr_time - passed to the progpoint. should be current time\n        as a datetime.time object\n\nRETURNS: new chunk index",
        "function_args": {
          "args": [
            "self",
            "sfmn",
            "st_index",
            "run_pp",
            "curr_time"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "backmap",
        "line": 7936,
        "docstring": "Generates a backwords lookback map with a set of anchors.\nBasically, this creates a mapping of the internal filters such that\neach filter is mapped to an \"anchor\" filter, based on the order\nof the filters. The lookback for determining an anchor also loops\nupon reaching the end of a day.\n\nExample:\n    Anchors: flt_1, flt_3\n    Order: flt_0, flt_1, flt_2, flt_3, flt_4, flt_5\n    Resulting mapping:\n        flt_0: flt_3 - (because we loop to flt_5 when looking back\n                        from flt_0)\n        flt_1: flt_1\n        flt_2: flt_1 - (flt_1 is the closest previous anchor from\n                        flt_2)\n        flt_3: flt_3\n        flt_4: flt_3\n        flt_5: flt_3\n\nIN:\n    anchors - dict of anchors. Set the keys to the anchor filters.\n\nOUT:\n    anchors - the values will be set to lists of all filtesr mapped\n        to those anchors\n\nRETURNS: reverse map where each filter is a key, and the values are\n    anchors.",
        "function_args": {
          "args": [
            "self",
            "anchors"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build",
        "line": 8011,
        "docstring": "Builds each chunk with the given sunrise and sunset values.\n\nIN:\n    sunrise - sunrise time in number of seconds from midnight\n    sunset - sunset time in number of seconds from midnight",
        "function_args": {
          "args": [
            "self",
            "sunrise",
            "sunset"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "buildupdate",
        "line": 8024,
        "docstring": "Builds each chunk with given sunrise/sunset values, then runs\nupdate to set the correct index.\n\nMostly a combination of build and update.\n\nProperly sets prev_flt in this scenario.\n\nIN:\n    sunrise - see build\n    sunset - see build\n    curr_time - see update",
        "function_args": {
          "args": [
            "self",
            "sunrise",
            "sunset",
            "curr_time"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_calc_off",
        "line": 8050,
        "docstring": "caluates beginning and next offset from chunk at the given index\n\nIN:\n    index - index of chunk to check\n\nRETURNS: tuple:\n    [0] - beginning offset of chunk at index\n    [1] - beginning offset of chunk at index+1 (or next chunk)",
        "function_args": {
          "args": [
            "self",
            "index"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "current",
        "line": 8074,
        "docstring": "Gets current filter\n\nRETURNS: current filter",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_current_chunk",
        "line": 8082,
        "docstring": "Gets current chunk\n\nRETURNS: current chunk",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "current_pos",
        "line": 8090,
        "docstring": "Generates internal informatiom related to the current position\n\nRETURNS: tuple:\n    [0] - current chunk index\n    [1] - beginning offset of the current chunk\n    [2] - beginning offset of the next chunk\n        NOTE: this is number of seconds in day if no next chunk\n    [3] - current slice index\n    [4] - beginning offset of the current slice\n    [5] - beginning offset of the next slice\n        NOTE: this is set to the next chunk offset if no next\n            slice",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "filters",
        "line": 8124,
        "docstring": "RETURNS: list of all filters associated with this filter manager\n    (list of strings)\n    NOTE: does not contain duplicates.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "filters_day",
        "line": 8135,
        "docstring": "RETURNS: list of all day filters associated with this filter\n    manager.\n    (list of stirngs)\n    NOTE: does not contain duplicates",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "filters_night",
        "line": 8144,
        "docstring": "RETURNS: list of all night filters associated with this filter\n    manager.\n    (list of strings)\n    NOTE: does not contain duplicates",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_flt_day",
        "line": 8153,
        "docstring": "Checks if the given filter is day according to this filter manager\nNOTE: assumes we are organized already.\n\nIN:\n    flt - filter to check\n\nRETURNS: True if day, false if not, None if filter not associatd\n    with this filter manager",
        "function_args": {
          "args": [
            "self",
            "flt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_organize",
        "line": 8170,
        "docstring": "Organize filters into day and night dicts",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_organize_chunk",
        "line": 8178,
        "docstring": "Organizes a single chunk into the day and night dicts\n\nIN:\n    chunk - MASBackgroundFilterChunk to organize",
        "function_args": {
          "args": [
            "self",
            "chunk"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_pp_exec",
        "line": 8193,
        "docstring": "Executes a progpoint\n\nExceptions are logged\n\nIN:\n    chunk_old - outgoing MASBackgroundFilterChunk\n    chunk_new - incoming MASBackgroundFilterChunk\n    curr_time - current time as datetime.time",
        "function_args": {
          "args": [
            "self",
            "chunk_old",
            "chunk_new",
            "curr_time"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "progress",
        "line": 8223,
        "docstring": "Progresses the filter, running progpoints and updating indexes.\n\nNOTE: if update was called before this, then we only run the\nglobal filter change progpoint if there was a filter change.\n\nNOTE: we do NOT do full loop arounds. This means that even if\nthere was a literal day between progressions, this will only run\nas if it were same day progression.\n\nProgpoint execution rules:\n* progression remains in the same chunk:\n    1. progpoint in that chunk is ran for every slice change.\n    2. global progpoint is ran for every slice change.\n* progression moves to next chunk:\n    1. progpoint from chunk to chunk is ran.\n    2. global progpoint from chunk to chunk is ran.\n    3. progpoints in the NEW chunk is ran for every slice change.\n    4. global progpoint is ran for every slice change in the NEW\n        chunk.\n* progression moves through multiple chunks:\n    1. progpoint from chunk to chunk is ran for every chunk change.\n    2. global progpoint from chunk to chunk is ran for every\n        chunk change.\n    3. progpoints in the chunk we END UP IN is ran for every\n        slice change.\n    4. global progpoint is ran for every slice change in the chunk\n        we END UP IN.\n* progression changes via update:\n    1. global progpoint is ran for one slice change if the filter\n        changes.\n\nRETURNS: the current filter after progression",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "reset_indexes",
        "line": 8302,
        "docstring": "Resets all indexes to 0, so we are in fresh state mode",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "update",
        "line": 8310,
        "docstring": "Updates the internal indexes.\nNOTE: this will NOT call any progpoints. Call progress after this\n    to run (some) progpoints if needed\n\nIN:\n    curr_time - datetime.time object to update internal indexes\n        to.\n        If NOne, then we use current.\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "curr_time"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "verify",
        "line": 8343,
        "docstring": "Verifies the filters in this filter manager.\nAssumed to be called at least at init level 0\nFilters cannot be in both day and night chunks. If this happens,\nan exception will be raised.\n\nWe also verify filters in each chunk here.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASBackground": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='MASFilterableBackground')"
    ],
    "identifier": "MASBackground",
    "line": 8366,
    "docstring": "DEPRECATED\n        Old-style MASBackground objects.\n        This is mapped to a MASFilterableBackground with default\n        (aka pre0.11.3 filters) slice management\n\n        IN:\n            background_id:\n                id that defines the background object\n                NOTE: Must be unique\n\n            prompt:\n                button label for this bg\n\n            image_day:\n                the renpy.image object we use for this bg during the day\n                NOTE: Mandatory\n\n            image_night:\n                the renpy.image object we use for this bg during the night\n                NOTE: Mandatory\n\n            image_rain_day:\n                the image tag we use for the background while it's raining (day)\n                (Default: None, not required)\n\n            image_rain_night:\n                the image tag we use for the background while it's raining (night)\n                (Default: None, not required)\n\n            image_overcast_day:\n                the image tag we use for the background while it's overcast (day)\n                (Default: None, not required)\n\n            image_overcast_night:\n                the image tag we use for the background while it's overcast (night)\n                (Default: None, not required)\n\n            image_snow_day:\n                the image tag we use for the background while it's snowing (day)\n                (Default: None, not required)\n\n            image_snow_night:\n                the image tag we use for the background while it's snowing (night)\n                (Default: None, not required)\n\n            hide_calendar:\n                whether or not we want to display the calendar\n                (Default: False)\n\n            hide_masks:\n                weather or not we want to show the windows\n                (Default: False)\n\n            disable_progressive:\n                weather or not we want to disable progressive weather\n                (Default: None, if hide masks is true and this is not provided, we assume True, otherwise False)\n\n            unlocked:\n                whether or not this background starts unlocked\n                (Default: False)\n\n            entry_pp:\n                Entry programming point for the background\n                (Default: None)\n\n            exit_pp:\n                Exit programming point for this background\n                (Default: None)\n\n        RETURNS: MASFilterableBackground object",
    "function_args": {
      "args": [
        "background_id",
        "prompt",
        "image_day",
        "image_night",
        "image_rain_day",
        "image_rain_night",
        "image_overcast_day",
        "image_overcast_night",
        "image_snow_day",
        "image_snow_night",
        "hide_calendar",
        "hide_masks",
        "disable_progressive",
        "unlocked",
        "entry_pp",
        "exit_pp"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "False",
        "False",
        "None",
        "False",
        "None",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASFilterableBackground": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASFilterableBackground",
    "class_bases": [
      "object"
    ],
    "line": 8486,
    "docstring": "Background class to get display props for bgs\n\nPROPERTIES:\n    background_id - the id which defines this bg\n    prompt - button label for the bg\n    image_map - MASFilterWeatherMap object containing mappings of\n        filter + weather to images\n    hide_calendar - whether or not we display the calendar with this\n    hide_masks - whether or not we display the window masks\n    disable_progressive - weather or not we disable progesssive weather\n    unlocked - whether or not this background is unlocked\n    entry_pp - entry programming points for bgs\n    exit_pp - exit programming points",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 8505,
        "docstring": "Constructor for background objects\n\nIN:\n    background_id:\n        id that defines the background object\n        NOTE: Must be unique\n\n    prompt:\n        button label for this bg\n\n    image_map:\n        MASFilterWeatherMap of bg images to use.\n        Use image tags for MASWeatherMap values.\n\n    filter_man:\n        MASBackgroundFilterManager to use\n\n    backup_img:\n        image tag/image path to use as a backup\n\n    hide_calendar:\n        whether or not we want to display the calendar\n        (Default: False)\n\n    hide_masks:\n        weather or not we want to show the windows\n        (Default: False)\n\n    disable_progressive:\n        weather or not we want to disable progressive weather\n        (Default: None, if hide masks is true and this is not provided, we assume True, otherwise False)\n\n    unlocked:\n        whether or not this background starts unlocked\n        (Default: False)\n\n    entry_pp:\n        Entry programming point for the background\n        (Default: None)\n\n    exit_pp:\n        Exit programming point for this background\n        (Default: None)\n\n    ex_props:\n        Extra properties for backgrounds. If None, an empty dict is assigned\n        (Default: None)\n\n    deco_man:\n        MASDecoManager to use\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "background_id",
            "prompt",
            "image_map",
            "filter_man",
            "hide_calendar",
            "hide_masks",
            "disable_progressive",
            "unlocked",
            "entry_pp",
            "exit_pp",
            "ex_props",
            "deco_man"
          ],
          "pos_only_args": [],
          "defaults": [
            "False",
            "False",
            "None",
            "False",
            "None",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__eq__",
        "line": 8634,
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__ne__",
        "line": 8639,
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build",
        "line": 8645,
        "docstring": "Builds filter slices using current suntimes.\nAlso builds appropraite BG image maps.\n\nNOTE: should only be called during init.\nNOTE: IF YOU PLAN TO CALL UPDATE AFTER THIS, use buildupdate\n    instead.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "buildupdate",
        "line": 8663,
        "docstring": "Builds filter slices appropriately, then runs update.\nThis will set prev_flt correctly when doing an update after a\nbuild.\n\nIN:\n    curr_time - see MASFilterableBackground.update",
        "function_args": {
          "args": [
            "self",
            "curr_time"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_deco_add",
        "line": 8700,
        "docstring": "Adds deco object to the background.\nNOTE: do NOT use this. This should only be used by the public\nshow/hide deco functions as well as other internal stuff.\n\nNOTE: currently only supports advanceed deco frames\n\nIN:\n    deco - TODO\n    tag - ImageTag of the deco to add - This must have an image\n        tag definition for this to work.",
        "function_args": {
          "args": [
            "self",
            "deco",
            "tag"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_deco_rm",
        "line": 8729,
        "docstring": "Removes deco object from this background.\nNOTE: do NOT use this. This should only be used by the public\nshow/hide deco functions as well as other internal stuff\n\nIN:\n    name - tag, either deco name or image tag, of the deco object\n        to remove.",
        "function_args": {
          "args": [
            "self",
            "name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "entry",
        "line": 8741,
        "docstring": "Run the entry programming point",
        "function_args": {
          "args": [
            "self",
            "old_background"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "kwargs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_entry_deco",
        "line": 8753,
        "docstring": "Entry code for deco\n\nIN:\n    old_bg - BG object being changed from\n    change_info - MASBackgroundChangeInfo object\n\nOUT:\n    change_info - MASBackgroundChangeInfo object with shows\n        populated.",
        "function_args": {
          "args": [
            "self",
            "old_bg",
            "change_info"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "exit",
        "line": 8774,
        "docstring": "Run the exit programming point",
        "function_args": {
          "args": [
            "self",
            "new_background"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "kwargs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_exit_deco",
        "line": 8785,
        "docstring": "Exit code for deco\n\nIN:\n    new_bg - BG object being changed to\n    change_info - MASBackgroundChangeInfo object\n\nOUT:\n    change_info - MASBackgroundChangeInfo object with hides\n        populated.",
        "function_args": {
          "args": [
            "self",
            "new_bg",
            "change_info"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "fromTuple",
        "line": 8811,
        "docstring": "Loads data from tuple\n\nIN:\n    data_tuple - tuple of the following format:\n        [0]: unlocked property",
        "function_args": {
          "args": [
            "self",
            "data_tuple"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "toTuple",
        "line": 8821,
        "docstring": "Converts this MASWeather object into a tuple\n\nRETURNS: tuple of the following format:\n    [0]: unlocked property",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='get_deco_info')"
        ],
        "identifier": "get_deco_adf",
        "line": 8831,
        "docstring": "DEPRECATED\n            Gets MASAdvancedDecoFrame associatd with this tag, if one exists.\n\n            IN:\n                tag - tag to get deco frame for\n\n            RETURNS: MASAdvancedDecoFrame object, or None if none exists",
        "function_args": {
          "args": [
            "self",
            "tag"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_deco_info",
        "line": 8842,
        "docstring": "Gets the tag and MASAdvancedDecoFrame to use for a tag, if one\nexists.\n\nIN:\n    tag - tag to get deco info for\n\nRETURNS: tuple (or None if not exists)\n    [0] - tag to use\n    [1] - MASAdvancedDecoFrame object",
        "function_args": {
          "args": [
            "self",
            "tag"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getRoom",
        "line": 8859,
        "docstring": "Gets room associated with the given flt and weather\nThis performs lookback and other checks to try and find an image.\n\nCalling this before init level 0 may result in undefined behavior.\n\nIN:\n    flt - filter to check\n    weather - weather to check. If None, we use the current\n        weather\n        (Default: None)\n\nRETURNS: room image, or None if not found",
        "function_args": {
          "args": [
            "self",
            "flt",
            "weather"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getCurrentRoom",
        "line": 8886,
        "docstring": "Gets current Room\n\nIN:\n    use_internal - True will use the internal filter, rather than\n        the globally known filter. Seldomly change this.\n        (Default: False)\n\nRETURNS: Current room image, may be None if this BG is badly built",
        "function_args": {
          "args": [
            "self",
            "use_internal"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='getDayRooms', should_raise=True)"
        ],
        "identifier": "getDayRoom",
        "line": 8905,
        "docstring": "DEPRECATED\n            Can't use this anymore since there's no single image that defines\n            \"day\" anymore. It's all filter based.\n            See getDayRooms instead",
        "function_args": {
          "args": [
            "self",
            "weather"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getDayRooms",
        "line": 8913,
        "docstring": "Gets all day images for a weather.\n\nIN:\n    weather - weather to check. If None, we use the current\n        weather.\n        (Default: None)\n\nRETURNS: dict of the following format:\n    key: flt\n    value: day according to the weather.\n    NOTE: only filters that have a room with the given weather\n        are returned. No lookback.",
        "function_args": {
          "args": [
            "self",
            "weather"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_get_image",
        "line": 8938,
        "docstring": "Gets image associated with the given flt and precip_type\ndoes NOT perform lookback checks.\n\nIN:\n    flt - filter to check\n    precip_type - precip type to check\n\nRETURNS: image, or None if not found",
        "function_args": {
          "args": [
            "self",
            "flt",
            "precip_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='getNightRooms', should_raise=True)"
        ],
        "identifier": "getNightRoom",
        "line": 8955,
        "docstring": "DEPRECATED\n            Can't use this anymore since there's no single image that defines\n            \"night\" anymore. It's all filter-based\n            See getNightRooms instead",
        "function_args": {
          "args": [
            "self",
            "weather"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getNightRooms",
        "line": 8963,
        "docstring": "Gets all night images for a weather.\n\nIN:\n    weather - weather to check. If None, we use the current\n        weather.\n        (Default: None)\n\nRETURNS: dict of the following format:\n    key: flt\n    value: night according to the weather.\n    NOTE: only filters that have a room with the given weather\n        are returned. No lookback.",
        "function_args": {
          "args": [
            "self",
            "weather"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getRoomForTime",
        "line": 8988,
        "docstring": "Gets the room for the current time and desired weather\n\nNOTE: if you just want current room to use, use getCurrentRoom.\n\nIN:\n    weather - get the room bg for the time and weather\n    (Default: current weather)\n\nRETURNS: room image for the current weather and time",
        "function_args": {
          "args": [
            "self",
            "weather"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isChangingRoom",
        "line": 9002,
        "docstring": "Checks if the room would change because of a change in weather\n\nIN:\n    old_weather - weather to start from\n    new_weather - weather to change to\n\nRETURNS: true if the room would change, False otherwise",
        "function_args": {
          "args": [
            "self",
            "old_weather",
            "new_weather"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isFltDay",
        "line": 9018,
        "docstring": "Checks if the given filter is considered a \"day\" filter according\nto this background.\n\nIN:\n    flt - filter to check\n        if None, we use the current filter\n\nRETURNS: True if flt is a \"day\" filter according to this bg,\n    False if night filter, None if not associated with this BG",
        "function_args": {
          "args": [
            "self",
            "flt"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isFltNight",
        "line": 9035,
        "docstring": "Checks if the given filter is considered a \"night\" filter according\nto this background.\n\nIN:\n    flt - filter to check\n        if None, we use the current filter\n\nRETURNS: True if flt is a \"night\" filter according to this BG,\n    False if day filter, None if not associated with this BG.",
        "function_args": {
          "args": [
            "self",
            "flt"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_lookback",
        "line": 9052,
        "docstring": "Gets MASWeatherMap for a filter, using lookback\n\nIN:\n    flt - filter to check\n\nRETURNS: MASWeatherMap, or None if not found",
        "function_args": {
          "args": [
            "self",
            "flt"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "progress",
        "line": 9063,
        "docstring": "Progresses the filter.\nIf update was called before this, then we only run the global\nfilter change progpoint if there was a filter change.\n\nRETURNS: the new filter",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "register_deco_tag",
        "line": 9122,
        "docstring": "Registers an advanced deco frame for the given tag. Analogous to\nMASImageTagDecoDefinition.register_img, except bg_id is provided\nby this BG object.\n\nNOTE: this is NOT required if you already used\n    MASImageTagDefinition to define the associated tags.\n\nIN:\n    tag - tag to register\n    adv_deco_frame - the MASAdvancedDecoFrame to register",
        "function_args": {
          "args": [
            "self",
            "tag",
            "adv_deco_frame"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "update",
        "line": 9141,
        "docstring": "Updates the internal indexes.\nNOTE: this will NOT call any progpoints. Call progress after this\n    to run (some) progpoints if needed.\nNOTE: IF YOU PLAN TO CALL BUILD BEFORE THIS, use buildupdate\n    instead.\n\nIN:\n    curr_time - datetime.time object to update internal indexes to\n        if None, then we use current.\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "curr_time"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "verify",
        "line": 9174,
        "docstring": "Verifies all internal filter and weather data is valid.\nRaises exception upon errors.\nAssumed to be called at least at init level 0",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_verify_img_flts",
        "line": 9184,
        "docstring": "Verifies that at least one image exists for the given flts.\nAlso organizes filters that have a default image\n\nRaises an exception if no images found\n\nIN:\n    flts - list of filters to check",
        "function_args": {
          "args": [
            "self",
            "flts"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASZoomableInteractable": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASZoomableInteractable",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 9218,
    "docstring": "Interactable designed for use with MASClickZones and zooming.\n\nThis is the primary way that zoomable MASClickZones should be used.\n\nSupports both being Call'd or Showned.\npass in zone_actions to determine what happens when a zone_key is\nclicked. Default (or unset) action is to return zone_key.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 9234,
        "docstring": "Constructor for an interactable.\n\nIN:\n    cz_manager - MASClickZoneManager containing the clickzones\n        to use in this MASZoomableInteractable\n    zone_actions - dict of the following format:\n        key: zone key\n        value: variety of values:\n            - if None, or not set, then we return zone_key\n            - if a string, then we jump to that label if\n                it exists. If it doesn't exist, we return it.\n            - if 0 - then nothing None is returned, which is\n                basically like ignoring it.\n            - if 1 - then renpy.end_interaction will be called\n                with True param\n            - if 2 - then renpy.restart_interaction will be called\n    zone_order - order to evaluate zones. if None, then no order\n        is followed. Should be list of zone keys\n        (Default: None)\n    start_zoom - pass this in if the clickzones are startnig at\n        a zoom level that is not the current.\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "cz_manager",
            "zone_actions",
            "zone_order",
            "start_zoom",
            "debug"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None",
            "None",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "add_zone",
        "line": 9295,
        "docstring": "Adds a zone. This should rarely be used.\nNOTE: this will NOT replace an existing zone.\n\nIN:\n    zone_key - key of the zone to add\n    cz - MASClickZone to add",
        "function_args": {
          "args": [
            "self",
            "zone_key",
            "cz"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "adjust_for_zoom",
        "line": 9313,
        "docstring": "Adjusts clickzones for current zoom level.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_build_zones",
        "line": 9324,
        "docstring": "Sets internal zone components based on the cz_man",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "check_click",
        "line": 9333,
        "docstring": "Checks if an ev was a click over a zone.\n\nRETURNS: zone key if clicked, None if not clicked",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "check_over",
        "line": 9345,
        "docstring": "Checks if the given x y is over a zone, and returns the zone key\nif appropripate\n\nIN:\n    x - x\n    y - y\n\nRETURNS: zone_key, or None if no click over zones",
        "function_args": {
          "args": [
            "self",
            "x",
            "y"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "clicks",
        "line": 9362,
        "docstring": "Returns number of times a zone_key was clicked\n\nRETURNS: number of times a zone_key was clicked",
        "function_args": {
          "args": [
            "self",
            "zone_key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "disable_zone",
        "line": 9370,
        "docstring": "Disables a clickzone\n\nIN:\n    zone_key - clickzone to disable",
        "function_args": {
          "args": [
            "self",
            "zone_key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "enable_zone",
        "line": 9379,
        "docstring": "Enables a clickzone\n\nIN:\n    zone_key - clickzone to enable",
        "function_args": {
          "args": [
            "self",
            "zone_key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 9388,
        "docstring": "By default, we process events in order and return/jump as \nappropriate.",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event_begin",
        "line": 9396,
        "docstring": "Call this when starting event actions. This handles the click\nfor all clickzones.\n\nRETURNS: zone_key that was clicked.",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event_end",
        "line": 9417,
        "docstring": "Call this when wrapping up event actions.\nNOTE: this will do actions determined when event_begin was called.\nTo not do these actions, either override this or do not call this.\n\nRETURNS: value to return in event",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "remove_zone",
        "line": 9436,
        "docstring": "Removes a clickzone if we have it\n\nIN:\n    zone_key - key of the zone to remove",
        "function_args": {
          "args": [
            "self",
            "zone_key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 9447,
        "docstring": "By default, we will not render unless debug mode is on",
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "zone_action",
        "line": 9468,
        "docstring": "Determines zone action for zone key\nActions are setup to be done when this is called.\n\nRETURNS: return value to return in event",
        "function_args": {
          "args": [
            "self",
            "zone_key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "zone_iter",
        "line": 9499,
        "docstring": "Generates zone_key with clickzone\n\nYIELDS: tuple of zone_key, clickzone",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "zone_iter_r",
        "line": 9513,
        "docstring": "Generates zone_key with clickzone, in reverse\n\nYIELDS: tuple of zone_key, clickzone",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_zone_zoom",
        "line": 9527,
        "docstring": "adjusts all clickzones for a zoom level, using the zoom adjustment\nalgorithm.\n\nNOTE: no checks are done here before zoom is changed. Use\nadjust_for_zoom if you only care that it matches current zoom\nlevel\n\nIN:\n    zoom_level - zoom level to adjust clickzones to",
        "function_args": {
          "args": [
            "self",
            "zoom_level"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASPoemWord": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASPoemWord",
    "class_bases": [
      "object"
    ],
    "line": 9568,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 9569,
        "function_args": {
          "args": [
            "self",
            "word",
            "sPoint",
            "nPoint",
            "yPoint",
            "mPoint",
            "glitch"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_merge",
        "line": 9578,
        "docstring": "Merges a PoemWord into this MASPoemWord\n\nIN:\n    _poemword - PoemWord object to merge\n    mPoint - points to use for Monika",
        "function_args": {
          "args": [
            "self",
            "_poemword",
            "mPoint"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_hangman",
        "line": 9594,
        "docstring": "Returns the approprite tuple of this word and the winner name.\n\nAll the input arguments are to change winnner names.\n\nNOTE: highly specialized. Only used in hangman.\nNOTE: monika will always have a bias here\n\nRETURNS: tuple of the following format:\n    [0]: the word as a string\n    [1]: the winner as a string",
        "function_args": {
          "args": [
            "self",
            "mon",
            "say",
            "nat",
            "yur"
          ],
          "pos_only_args": [],
          "defaults": [
            "'I'",
            "'Sayori'",
            "'Natsuki'",
            "'Yuri'"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "winner",
        "line": 9629,
        "docstring": "Returns the point value of the winner",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_build",
        "line": 9638,
        "docstring": "Builds a MASPoemword from a PoemWord\n\nIN:\n    _poemword - Poemword object to build from\n    mPoint - points to use for MOnika\n\nRETURNS: a MASPoemWord",
        "function_args": {
          "args": [
            "_poemword",
            "mPoint"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASPoemWordList": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASPoemWordList",
    "class_bases": [
      "object"
    ],
    "line": 9668,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 9669,
        "function_args": {
          "args": [
            "self",
            "wordfile"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "readInFile",
        "line": 9681,
        "function_args": {
          "args": [
            "self",
            "wordfile"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "glitchWord": {
    "type": "function",
    "function_decorators": [],
    "identifier": "glitchWord",
    "line": 9722,
    "function_args": {
      "args": [
        "word",
        "odds_space",
        "odds_other"
      ],
      "pos_only_args": [],
      "defaults": [
        "ODDS_SPACE",
        "ODDS_OTHER"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASMonika": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASMonika",
    "class_bases": [
      "renpy.store.object"
    ],
    "line": 9755,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 9820,
        "docstring": "Constructor",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 9917,
        "docstring": "this is lengthy and will contain all objects",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__get_acs",
        "line": 9953,
        "docstring": "Returns the accessory list associated with the given type\n\nIN:\n    acs_type - the accessory type to get\n\nRETURNS:\n    accessory list, or None if the given acs_type is not valid",
        "function_args": {
          "args": [
            "self",
            "acs_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "ahoge",
        "line": 9965,
        "docstring": "Applies a random ahoge to Monika.\n\nIN:\n    force_change - True will force an ahoge to be set, even if\n        one is currently available.\n        (Deafult: False)\n\nRETURNS: True if we set the ahoge, False if not",
        "function_args": {
          "args": [
            "self",
            "force_change"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_set_ahoge",
        "line": 9993,
        "docstring": "Sets the ahoge for Monika, also setting the appropriate last\nahoge and everything.\n\nIN:\n    ahoge_acs - the ACS object for the ahoge to wear\n        NOTE: pass in None to clear the ahoge.\n    force_wear - pass True to wear the ahoge even if we are wearing\n        a hat.\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "ahoge_acs",
            "force_wear"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_determine_poses",
        "line": 10021,
        "docstring": "determines the lean/pose/hair/baked data for monika based on\nthe requested lean and arms\n\nIN:\n    lean - requested lean\n    arms - requested arms\n\nRETURNS: tuple of the following format:\n    [0] - lean to use\n    [1] - leanpose to use\n    [2] - arms to use\n    [3] - hair to use\n    [4] - base arms to use\n    [5] - pose arms to use",
        "function_args": {
          "args": [
            "self",
            "lean",
            "arms"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_same_state_acs",
        "line": 10090,
        "docstring": "Compares given acs lists as acs objects\n\nNOTE: order does not matter\n\nIN:\n    a1 - list of acs objects to compare\n    a2 - list of acs objects to compare\n\nRETURNS: True if the same, False if not",
        "function_args": {
          "args": [
            "self",
            "a1",
            "a2"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_same_state_acs_prims",
        "line": 10119,
        "docstring": "Compares given acs lists as primitive data.\n\nNOTE: order does not matter\n\nIN:\n    a1 - list of acs names to compare\n    a2 - list of acs names to compare\n\nRETURNS: True if the same, False if not",
        "function_args": {
          "args": [
            "self",
            "a1",
            "a2"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_same_state",
        "line": 10144,
        "docstring": "Compares the given state as objects\n\nIN:\n    data - previous object state\n\nRETURNS: True if the same, False if not",
        "function_args": {
          "args": [
            "self",
            "data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_same_state_prims",
        "line": 10177,
        "docstring": "Compares the given state as primitives\n\nIN:\n    data - previous primitive state\n\nRETURNS: True if the same, False if not",
        "function_args": {
          "args": [
            "self",
            "data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_load",
        "line": 10210,
        "docstring": "INTERNAL\n\nload function using names/IDs\n\nIN:\n    _clothes_name - name of clothing to load\n    _hair_name - name of hair to load\n    _acs_pre_names - list of pre acs names to load\n    _acs_bbh_names - list of bbh acs names to load\n    _acs_bfh_names - list of bfh acs names to load\n    _acs_afh_names - list of afh acs names to load\n    _acs_mid_names - list of mid acs names to load\n    _acs_pst_names - list of pst acs names to load\n    _acs_bba_names - list of bba acs names to load\n    _acs_mab_names - list of mab acs names to load\n    _acs_bse_names - list of bse acs names to load\n    _acs_ase_names - list of ase acs names to load\n    _acs_bat_names - list of bat acs names to load\n    _acs_mat_names - list of mat acs names to load\n    _acs_bmh_names - list of bmh acs names to load\n    _acs_mmh_names - list of mmh acs names to load\n    startup - True if we are loading on start, False if not\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "_clothes_name",
            "_hair_name",
            "_acs_pre_names",
            "_acs_bbh_names",
            "_acs_bfh_names",
            "_acs_afh_names",
            "_acs_mid_names",
            "_acs_pst_names",
            "_acs_bba_names",
            "_acs_mab_names",
            "_acs_bse_names",
            "_acs_ase_names",
            "_acs_bat_names",
            "_acs_mat_names",
            "_acs_bmh_names",
            "_acs_mmh_names",
            "startup"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_load_acs",
        "line": 10282,
        "docstring": "Loads accessories from the given persistent into the given\nacs type.\n\nIN:\n    per_acs - persistent list to grab acs from\n    acs_type - acs type to load acs into",
        "function_args": {
          "args": [
            "self",
            "per_acs",
            "acs_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_load_acs_obj",
        "line": 10296,
        "docstring": "Loads accessories from a given list of accessory objects into\nthe given acs type\n\nIN:\n    acs_objs - list of acs to load\n    acs_type - acs type to load acs into",
        "function_args": {
          "args": [
            "self",
            "acs_objs",
            "acs_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_save_acs",
        "line": 10310,
        "docstring": "Generates list of accessory names to save to persistent.\n\nIN:\n    acs_type - acs type to build acs names list\n    force_acs - True means to save acs even if stay_on_start is\n        False\n        (Default: False)\n\nRETURNS:\n    list of acs names to save to persistent",
        "function_args": {
          "args": [
            "self",
            "acs_type",
            "force_acs"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_save_acs_obj",
        "line": 10329,
        "docstring": "Generaltes list of acs objects to save\n\nIN:\n    acs_type - acs type to buld acs list\n    force_acs - True means to save acs even if stay_on_start is\n        False\n        (Default: False)\n\nRETURNS:\n    list of acs objects to save",
        "function_args": {
          "args": [
            "self",
            "acs_type",
            "force_acs"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_verify_rec_layer",
        "line": 10349,
        "function_args": {
          "args": [
            "val",
            "allow_none"
          ],
          "pos_only_args": [],
          "defaults": [
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_verify_spl_layer",
        "line": 10355,
        "function_args": {
          "args": [
            "val",
            "allow_none"
          ],
          "pos_only_args": [],
          "defaults": [
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "apply_outfit_change_data",
        "line": 10360,
        "docstring": "Applies hair and ACS changes from the given outfit change data\n\nIN:\n    outfit_change_data - the outfit change data to apply\n    wear - pass True if this should wear the items in the change\n        data, False to remove them.",
        "function_args": {
          "args": [
            "self",
            "outfit_change_data",
            "wear"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "change_clothes",
        "line": 10378,
        "docstring": "Changes clothes to the given cloth. also sets the persistent\nforce clothes var to by_user, if its not None\n\nIN:\n    new_cloth - new clothes to wear\n    by_user - True if this action was mandated by the user, False\n        if not. If None, we do NOT set the forced clothes var\n        (Default: None)\n    startup - True if we are loading on startup, False if not\n        When True, we dont respect locking\n        (Default: False)\n    outfit_mode - True means we should change hair/acs if it\n        completes the outfit. False means we should not.\n        NOTE: this does NOT affect hair/acs that must change for\n            consistency purposes.\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "new_cloth",
            "by_user",
            "startup",
            "outfit_mode"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "False",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "change_hair",
        "line": 10485,
        "docstring": "Changes hair to the given hair. also sets the persistent force\nhair var to by_user, if its not None\n\nIN:\n    new_hair - new hair to wear\n    by_user - True if this action was mandated by the user, False\n        if not. If None, we do NOT set the forced hair var\n        (Default: None)\n    startup - True if we are loading on startup, False if not\n        When True, we dont respect locking\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "new_hair",
            "by_user",
            "startup"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "change_outfit",
        "line": 10559,
        "docstring": "Changes both clothes and hair. also sets the persistent forced vars\nto by_user, if its not None\n\nIN:\n    new_cloth - new clothes to wear\n    new_hair - new hair to wear\n    by_user - True if this action ws mandated by user, False if not\n        If None, we do NOT set the forced vars\n        (Default: None)\n    startup - True if we are loading on startup, False if not\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "new_cloth",
            "new_hair",
            "by_user",
            "startup"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_acs",
        "line": 10583,
        "docstring": "Gets all acs objects currently worn by Monika\n\nRETURNS: list of all acs objects being worn",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_acs_by_desk",
        "line": 10598,
        "docstring": "Returns all acs that have a keep_on_desk flag set to flag_value\n\nIN:\n    flag_value - flag value to check for\n        (Default: True)\n\nRETURNS: list of ACS objects with a keep_on_desk flag set to\n    flag_value",
        "function_args": {
          "args": [
            "self",
            "flag_value"
          ],
          "pos_only_args": [],
          "defaults": [
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_acs_of_exprop",
        "line": 10618,
        "docstring": "Gets the acs objects currently being work of a given ex prop\n\nIN:\n    exprop - extended property to check for\n    get_all - True means we get all acs being worn of this exprop\n        False will return the first one\n        (Default: False)\n\nRETURNS: single matching acs or None if get_all is False, list of\n    matching acs or empty list if get_all is True.",
        "function_args": {
          "args": [
            "self",
            "exprop",
            "get_all"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_acs_of_type",
        "line": 10648,
        "docstring": "Gets the acs objects currently being worn of a given type.\n\nIN:\n    acs_type - acs type to check for\n    get_all - True means we get all acs being worn of this type,\n        False will just return the first one\n        (Default: False)\n\nRETURNS: single matchin acs or None if get_all is False. list of\n    matching acs or empty list if get_all is True.",
        "function_args": {
          "args": [
            "self",
            "acs_type",
            "get_all"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_outfit",
        "line": 10677,
        "docstring": "Returns the current outfit\n\nRETURNS:\n    tuple:\n        [0] - current clothes\n        [1] - current hair",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_wearing_acs",
        "line": 10689,
        "docstring": "Checks if currently wearing the given accessory\n\nIN:\n    accessory - accessory to check\n\nRETURNS:\n    True if wearing accessory, false if not",
        "function_args": {
          "args": [
            "self",
            "accessory"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_wearing_acs_with_exprop",
        "line": 10702,
        "docstring": "Checks if currently wearing any accessory with given exprop\n\nIN:\n    exprop - extended property to check\n\nRETURNS: True if wearing accessory, False if not",
        "function_args": {
          "args": [
            "self",
            "exprop"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_wearing_acs_type",
        "line": 10719,
        "docstring": "Checks if currently wearing any accessory with given type\n\nIN:\n    acs_type - accessory type to check\n\nRETURNS: True if wearing acccesroy, False if not",
        "function_args": {
          "args": [
            "self",
            "acs_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_wearing_acs_types",
        "line": 10736,
        "docstring": "multiple arg version of is_wearing_acs_type\n\nIN:\n    *acs_types - any number of acs types to check\n\nRETURNS: True if any the ACS types checks are True, False if not",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": "acs_types"
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_wearing_acs_with_mux",
        "line": 10751,
        "docstring": "Checks if currently wearing any ACS with the given acs_type in its\nmux type\n\nIN:\n    acs_type - acceessory type to check",
        "function_args": {
          "args": [
            "self",
            "acs_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_wearing_acs_in",
        "line": 10770,
        "docstring": "Checks if the currently wearing the given accessory as the given\naccessory type\n\nIN:\n    accessory - accessory to check\n    acs_type - accessory type to check\n\nRETURNS:\n    True if wearing accessory, False if not",
        "function_args": {
          "args": [
            "self",
            "accessory",
            "acs_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_wearing_clothes_with_exprop",
        "line": 10790,
        "docstring": "Checks if we are currently wearing clothes with the given exprop\n\nIN:\n    exprop - extended property to check\n\nRETURNS: True if wearing clothes with the exprop, False if not",
        "function_args": {
          "args": [
            "self",
            "exprop"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_wearing_hair_with_exprop",
        "line": 10802,
        "docstring": "Checks if we are currently wearing hair with the given exprop\n\nIN:\n    exprop - extend property to check\n\nRETURNS: True if wearing hair with the exprop, False if not",
        "function_args": {
          "args": [
            "self",
            "exprop"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_wearing_ribbon",
        "line": 10814,
        "docstring": "Checks if we are currently wearing a ribbon or ribbon-like ACS\n\nRETURNS: True if wearing ACS with ribbon type or ACS with\n    ribbon-like ex prop",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "load",
        "line": 10826,
        "docstring": "Loads hair/clothes/accessories from persistent.\n\nIN:\n    startup - True if loading on start, False if not\n        When True, we dont respesct locking\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "startup"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "load_state",
        "line": 10856,
        "docstring": "Loads clothes/hair/acs from a tuple data format that was saved\nusing the save_state function.\n\nIN:\n    _data - data to load from. tuple of the following format:\n        [0]: clothes data\n        [1]: hair data\n        [2]: pre acs data\n        [3]: bbh acs data\n        [4]: bfh acs data\n        [5]: afh acs data\n        [6]: mid acs data\n        [7]: pst acs data\n        [8]: bba acs data\n        [9]: mab acs data\n        [10]: bse acs data\n        [11]: ase acs data\n        [12]: bat acs data\n        [13]: mat acs data\n        [14]: bmh acs data\n        [15]: mmh acs data\n    as_prims - True if this data was saved as primitive data types,\n        false if as objects\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "_data",
            "as_prims"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "reset_all",
        "line": 10899,
        "docstring": "Resets all of monika\n\nIN:\n    by_user - True if this action was mandated by user, False if\n        not. If None, we do NOT set force vars.\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "by_user"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "remove_acs",
        "line": 10912,
        "docstring": "Removes the given accessory. this uses the map to determine where\nthe accessory is located.\n\nIN:\n    accessory - accessory to remove",
        "function_args": {
          "args": [
            "self",
            "accessory"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "remove_acs_exprop",
        "line": 10925,
        "docstring": "Removes all ACS of given exprop.\n\nIN:\n    exprop - exprop to check for",
        "function_args": {
          "args": [
            "self",
            "exprop"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "remove_acs_mux",
        "line": 10937,
        "docstring": "Removes all ACS with a mux type in the given list.\n\nIN:\n    mux_types - list of acs_types to remove from acs",
        "function_args": {
          "args": [
            "self",
            "mux_types"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "remove_acs_in",
        "line": 10949,
        "docstring": "Removes the given accessory from the given accessory list layer\n\nIN:\n    accessory - accessory to remove\n    acs_layer - ACS layer to remove from",
        "function_args": {
          "args": [
            "self",
            "accessory",
            "acs_layer"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "remove_all_acs",
        "line": 11014,
        "docstring": "Removes all accessories from all accessory lists",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "remove_all_acs_in",
        "line": 11021,
        "docstring": "Removes all accessories from the given accessory layer\n\nIN:\n    acs_layer - ACS layer to remove acs from",
        "function_args": {
          "args": [
            "self",
            "acs_layer"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "reset_clothes",
        "line": 11047,
        "docstring": "Resets clothing to default\n\nIN:\n    by_user - True if this action was mandated by user, False if\n        not. If None, then we do NOT set force clothed vars\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "by_user"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "reset_hair",
        "line": 11059,
        "docstring": "Resets hair to default\n\nIN:\n    by_user - True if this action was mandated by user, False if\n        not. If None, then we do NOT set forced hair vars\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "by_user"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "reset_outfit",
        "line": 11071,
        "docstring": "Resetse clothing and hair to default\n\nIN:\n    by_user - True if this action was mandated by user, False if\n        not. If None, then we do NOT set forced vars\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "by_user"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "restore",
        "line": 11083,
        "docstring": "Restores monika to a previous state. This will reset outfit and\nclear ACS before loading.\n\nIN:\n    _data - see load_state\n    as_prims - see load_state",
        "function_args": {
          "args": [
            "self",
            "_data",
            "as_prims"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "save",
        "line": 11096,
        "docstring": "Saves hair/clothes/acs to persistent\n\nIN:\n    force_hair - True means we force hair saving even if\n        stay_on_start is False\n        (Default: False)\n    force_clothes - True means we force clothes saving even if\n        stay_on_start is False\n        (Default: False)\n    force_acs - True means we force acs saving even if\n        stay_on_start is False\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "force_hair",
            "force_clothes",
            "force_acs"
          ],
          "pos_only_args": [],
          "defaults": [
            "False",
            "False",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "same_state",
        "line": 11177,
        "docstring": "compares if the given state is the same as current monika\n\nIN:\n    data - data to compare\n    as_prims - True if prims, False if not\n\nRETURNS: True if same state, False if not",
        "function_args": {
          "args": [
            "self",
            "data",
            "as_prims"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "save_state",
        "line": 11192,
        "docstring": "Saves hair/clothes/acs to a tuple data format that can be loaded\nlater using the load_state function.\n\nIN:\n    force_hair - True means force hair saving even if stay_on_start\n        is False. If False and stay_on_start is False, the default\n        hair will be returned.\n        (Default: False)\n    force_clothes - True meanas force clothes saving even if\n        stay_on_start is False. If False and stay_on_start is\n        False, the default clothes will be returned.\n        (Default: False)\n    force_acs - True means force acs saving even if stay_on_start\n        is False. At minimum, this will be an empty list.\n        (Default: False)\n    as_prims - True means to save the data as primitive types\n        for persistent saving. False will save the data as\n        objects.\n        (Default: False)\n\nRETURNS tuple of the following format:\n    [0]: clothes data (Default: mas_clothes_def)\n    [1]: hair data (Default: mas_hair_def)\n    [2]: pre acs data (Default: [])\n    [3]: bbh acs data (Default: [])\n    [4]: bfh acs data (Default: [])\n    [5]: afh acs data (Default: [])\n    [6]: mid acs data (Default: [])\n    [7]: pst acs data (Default: [])\n    [8]: bba acs data (Default: [])\n    [9]: mab acs data (Default: [])\n    [10]: bse acs data (Default: [])\n    [11]: ase acs data (Default: [])\n    [12]: bat acs data (Default: [])\n    [13]: mat acs data (Default: [])\n    [14]: bmh acs data (Default: [])\n    [15]: mmh acs data (Default: [])",
        "function_args": {
          "args": [
            "self",
            "force_hair",
            "force_clothes",
            "force_acs",
            "as_prims"
          ],
          "pos_only_args": [],
          "defaults": [
            "False",
            "False",
            "False",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "set_acs",
        "line": 11267,
        "docstring": "Basically a single function so callers don't need to\nif-statement-toggle wearing and removal of ACS.\n\nIN:\n    acs - the ACS to wear or remove\n    wear - pass True to wear ACS, False to remove.",
        "function_args": {
          "args": [
            "self",
            "acs",
            "wear"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "wear_acs",
        "line": 11281,
        "docstring": "Wears the given accessory in that accessory's recommended\nspot, as defined by the accessory.\n\nIN:\n    acs - accessory to wear",
        "function_args": {
          "args": [
            "self",
            "acs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "wear_acs_in",
        "line": 11291,
        "docstring": "Wears the given accessory\n\nNOTE: will not allow mismatching layers, unless overrides are\n    enabled.\n\nIN:\n    accessory - accessory to wear\n    acs_layer - layer to wear the acs in.",
        "function_args": {
          "args": [
            "self",
            "accessory",
            "acs_layer"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='wear_acs_in')"
        ],
        "identifier": "wear_acs_pre",
        "line": 11390,
        "docstring": "DEPRECATED\n            Wears the given accessory in the pre body accessory mode\n\n            IN:\n                acs - accessory to wear",
        "function_args": {
          "args": [
            "self",
            "acs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='wear_acs_in')"
        ],
        "identifier": "wear_acs_bbh",
        "line": 11400,
        "docstring": "DEPRECATED\n            Wears the given accessory in the post back hair accessory loc\n\n            IN:\n                acs - accessory to wear",
        "function_args": {
          "args": [
            "self",
            "acs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='wear_acs_in')"
        ],
        "identifier": "wear_acs_bfh",
        "line": 11410,
        "docstring": "DEPRECATED\n            Wears the given accessory in the pre front hair accesory log\n\n            IN:\n                acs - accessory to wear",
        "function_args": {
          "args": [
            "self",
            "acs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='wear_acs_in')"
        ],
        "identifier": "wear_acs_afh",
        "line": 11420,
        "docstring": "DEPRECATED\n            Wears the given accessory in the between front hair and arms\n            acs log\n\n            IN:\n                acs - accessory to wear",
        "function_args": {
          "args": [
            "self",
            "acs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='wear_acs_in')"
        ],
        "identifier": "wear_acs_mid",
        "line": 11431,
        "docstring": "DEPRECATED\n            Wears the given accessory in the mid body acessory mode\n\n            IN:\n                acs - acessory to wear",
        "function_args": {
          "args": [
            "self",
            "acs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='wear_acs_in')"
        ],
        "identifier": "wear_acs_pst",
        "line": 11441,
        "docstring": "DEPRECATED\n            Wears the given accessory in the post body accessory mode\n\n            IN:\n                acs - accessory to wear",
        "function_args": {
          "args": [
            "self",
            "acs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASTableChair": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASTableChair",
    "class_bases": [
      "object"
    ],
    "line": 11483,
    "docstring": "Representation of an available table + chair combo.\n\nPROPERTIES:\n    has_shadow - True if this table has a shadow\n    table - table tag associated with this table chair combo\n        This will be used in bulding the table sprite string\n    chair - chair tag associated with tihs table chair combo\n        This will be used in building the chair sprite string\n    hl_map - MASHighlightMap associated with this table chair\n        keys:\n            t - table\n            ts - table shadow - Used instead of table whenever shadow\n                is applied.\n            c - chair",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 11503,
        "docstring": "constructor\n\nIN:\n    table - table tag to use\n    chair - chair tag to use\n    hl_data - highlight mapping data. format:\n        [0] - default highilght to use. Pass in None to not set\n            a default.\n        [1] - highlight mapping to use. Format:\n            key: \"t\" for table, \"c\" for chair\n            value: MASFilterMap object, or None if no highlight\n        pass in None if no highlights shoudl be used at all",
        "function_args": {
          "args": [
            "self",
            "table",
            "chair",
            "hl_data"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 11532,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "prepare",
        "line": 11538,
        "docstring": "Prepares this table chair combo by checking for shadow.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "setTable",
        "line": 11551,
        "docstring": "sets the table tag and checks shadow\n\nIN:\n    new_table - the new table tag to set\n        if an invalid string or NOne is passed in, we reset to\n        default",
        "function_args": {
          "args": [
            "self",
            "new_table"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASArm": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASArm",
    "class_bases": [
      "object"
    ],
    "line": 11568,
    "docstring": "Representation of an \"Arm\"\n\nEach Arm consists of of a layered combination:\nNOTE: we re using spaced layers so we can insert more if needed.\n0 - bottom layer. after body-0 but before table. Primary bottom layer.\n5 - middle layer. after table but before body-1.\n10 - top layer. after body-1.\n\nPROPERTIES:\n    tag - the tag string of this arm\n    layer_map - mapping of layer exiestence to image code\n        key: layer code\n        value: True if exists, False if not\n    hl_map - MASHighlightMap with layer code keys",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 11592,
        "docstring": "Constructor\n\nIN:\n    tag - tag string for this arm\n    layer_map - layer map to use\n        key: image layer code\n        value: True if exists, False if not\n    hl_data - highlght map data. tuple of the following formaT:\n        [0] - default MASFilterMap to use. Pass in None to\n            not set a default highlight\n        [1] - highlight mapping to use. Format:\n            key: image layer code\n            value: MASFilterMap object, or None if no highlight\n        pass in None if no highlights should be used at all",
        "function_args": {
          "args": [
            "self",
            "tag",
            "layer_map",
            "hl_data"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__build_loadstrs_hl",
        "line": 11622,
        "docstring": "Builds load strings for a hlight from a given map\n\nIN:\n    prefix - prefix to apply\n    layer_code - layer code to generate loadstrings for\n\nRETURNS: list of lists of strings representing image path for all\n    highlights for a layer code",
        "function_args": {
          "args": [
            "self",
            "prefix",
            "layer_code"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "_fromJSON",
        "line": 11651,
        "docstring": "Builds a MASArm object based on the given JSON format of it\n\nIN:\n    json_obj - JSON object to parse\n    ind_lvl - indent level\n    build_class - actual MASArm derivative to build\n\nOUT:\n    msg_log - list to save messages to\n\nRETURNS: MASArm instance built with the JSON, or None if failed",
        "function_args": {
          "args": [
            "cls",
            "json_obj",
            "msg_log",
            "ind_lvl",
            "build_class"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_loadstrs",
        "line": 11743,
        "docstring": "Builds loadstrs for this arm\n\nIN:\n    prefix - prefix to apply to the loadstrs\n        should be list of strings\n\nRETURNS: list of lists of strings representing the load strings\n    for this arm, + highlights",
        "function_args": {
          "args": [
            "self",
            "prefix"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "clean_map",
        "line": 11784,
        "docstring": "cleans the given map, ensuring it contains only valid layer\nkeys. No errors are logged.\n\nIN:\n    mapping - mapping to clean",
        "function_args": {
          "args": [
            "self",
            "mapping"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 11796,
        "docstring": "Generates tag name + suffixes to use for\na given layer code. A tag name is a tuple of strings\nthat can be joined to build the full tag name,\nTag Names do NOT include file extensions\n\nIN:\n    layer_code - layer code to fetch tag names for\n    prefix - prefix to apply to the tag string if desired\n        (Default: [])\n\nRETURNS: list consisting of the tag strings and\n    appropriate suffixes",
        "function_args": {
          "args": [
            "self",
            "layer_code",
            "prefix"
          ],
          "pos_only_args": [],
          "defaults": [
            "[]"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "gethlc",
        "line": 11825,
        "docstring": "Gets highlight code.\n\nIN:\n    layer_code - layer to get highlight for\n    flt - filter to get highilght for\n    defval - default value to return\n        (Default: None)\n\nRETURNS: highlight code, or None if no highligiht",
        "function_args": {
          "args": [
            "self",
            "layer_code",
            "flt",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hl_keys",
        "line": 11844,
        "docstring": "Returns hl keys for a MASArm\n\nRETURNS: tuple of hl keys",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "hl_keys_c",
        "line": 11853,
        "docstring": "Class method version of hl_keys\n\nRETURNS: tuple of hl keys",
        "function_args": {
          "args": [
            "cls"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASArmBoth": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASArmBoth",
    "class_bases": [
      "MASArm"
    ],
    "line": 11862,
    "docstring": "Representation of an \"arm\" that actually covers both arms\n\nThis currently has no additional behavior.\nIt's primary use is to act as a type of MASArm\n\nPROPERTIES:\n    see MASArm",
    "class_functions": []
  },
  "MASArmLeft": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASArmLeft",
    "class_bases": [
      "MASArm"
    ],
    "line": 11875,
    "docstring": "Representation of a left arm.\n\nOverrides prefix-based functions\n\nPROPERTIES:\n    see MASArm",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_loadstrs",
        "line": 11885,
        "docstring": "Generates loadstrs for this arm\n\nIN:\n    prefix - prefix to apply to the loadstrs\n        list of strings\n\nRETURNS: list of lists of strings representing the loadstrs",
        "function_args": {
          "args": [
            "self",
            "prefix"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 11899,
        "docstring": "See MASArm.get\n\nThis adds left- prefix to result",
        "function_args": {
          "args": [
            "self",
            "layer_code"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASArmRight": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASArmRight",
    "class_bases": [
      "MASArm"
    ],
    "line": 11911,
    "docstring": "Representation of a right arm.\n\nOverrides prefix-based functions\n\nPROPERTIES:\n    see MASArm",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_loadstrs",
        "line": 11921,
        "docstring": "Generates loadstrs for this arm\n\nIN:\n    prefix - prefix to apply to the loadstrs\n        list of strings\n\nRETURNS: list of lists of strings representing the loadstrs",
        "function_args": {
          "args": [
            "self",
            "prefix"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 11935,
        "docstring": "See MASArm.get\n\nThis adds right- prefix to result",
        "function_args": {
          "args": [
            "self",
            "layer_code"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASPoseArms": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASPoseArms",
    "class_bases": [
      "object"
    ],
    "line": 11947,
    "docstring": "Collection of MASArm objects. An Arm object is the representation of\nan arm sprite.\n\nPROPERTIES:\n    arms - dict mapping arms to MASArm objects\n        keys: number from NUM_ARMS\n        value: MASArm object. None means no arm for this arm",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 11960,
        "docstring": "Constructor\n\nIN:\n    arm_data - see arms property\n    def_base - True will use base arms for all missing data\n        False will not\n        (Default: True)",
        "function_args": {
          "args": [
            "self",
            "arm_data",
            "def_base"
          ],
          "pos_only_args": [],
          "defaults": [
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_clean_arms",
        "line": 11981,
        "docstring": "Cleans arm data given\nWill Noneify invalid-typed data\n\nIN:\n    arm_data - arm data to clean\n    def_base - True will use base arms for all missing data\n        False will not\n\nOUT:\n    arm_data - cleaned arm data",
        "function_args": {
          "args": [
            "self",
            "arm_data",
            "def_base"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_loadstrs",
        "line": 12020,
        "docstring": "Generates loadstrs for this PoseArms object\n\nIN:\n    prefix - list of strings to apply as prefix\n\nRETURNS: list of lists of strings representing the load strs",
        "function_args": {
          "args": [
            "self",
            "prefix"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "fromJSON",
        "line": 12057,
        "docstring": "Builds a MASPoseArms object given a JSON format of it\n\nIN:\n    json_obj - json object to parse\n    ind_lvl - indent level\n\nOUT:\n    msg_log - list to save messages to\n\nRETURNS: MASPoseArms object built using the JSON, None if no\n    data to be made, False if error occured",
        "function_args": {
          "args": [
            "json_obj",
            "msg_log",
            "ind_lvl"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 12156,
        "docstring": "Gets the arm data associated with the given arm key\n\nIN:\n    arm_key - key of the arm data to get\n\nRETURNS: MASArm object requested, or NOne if not available for the\n    arm key",
        "function_args": {
          "args": [
            "self",
            "arm_key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getflp",
        "line": 12168,
        "docstring": "Retrieves arms assocaited with the given leanpose\n\nIN:\n    leanpose - the leanpose to get arms for\n\nRETURNS: Tuple of arms associated with the leanpose. None may be\n    returned if no arms for the leanpose. The number of arms is\n    not a guarantee.",
        "function_args": {
          "args": [
            "self",
            "leanpose"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASPoseMap": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASPoseMap",
    "class_bases": [
      "renpy.store.object"
    ],
    "line": 12193,
    "docstring": "The Posemap helps connect pose names to images\n\nNOTE: the internal maps are public, but should be converted to\n    private.\n\nThis is done via a dict containing pose names and where they\nmap to.\n\nThere is also a seperate dict to handle lean variants",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 12266,
        "docstring": "Constructor\n\nIf None is passed in for any var, we assume that no image should\nbe shown for that pose\n\nIN:\n    mpm_type - MASPoseMap type of this posemap\n        Default is 0 (enable/disble mode)\n    default - default pose id to use for poses that are not\n        specified (aka are None).\n    l_default - default pose id to use for lean poses that are not\n        specified (aka are None).\n    use_reg_for_l - if True and default is not None and l_default\n        is None, then we use the default instead of l_default\n        when rendering for lean poses\n    **pargs - the remaining name value pairs are checked in param\n        names. Each apply to specific pose.\n        (See MASPoseArms.PARAM_NAMES and L_PARAM_NAMES)",
        "function_args": {
          "args": [
            "self",
            "mpm_type",
            "default",
            "l_default",
            "use_reg_for_l"
          ],
          "pos_only_args": [],
          "defaults": [
            "0",
            "None",
            "None",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "pargs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__associate",
        "line": 12318,
        "docstring": "Associates the given pargs (retrieved from **pargs) and with\nindex values related to POSES and L_POSES\n\nIN:\n    pargs - dict retrieved from a **pargs var\n\nRETURNS: tuple of the following format:\n    [0] - POSES associations. List of tuples:\n        [0] - index to map\n        [1] - parg value to map to\n    [1] - L_POSES associations. List of tuples:\n        [0] - index to map\n        [1] - parg value to map to",
        "function_args": {
          "args": [
            "self",
            "pargs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__listify",
        "line": 12347,
        "docstring": "Takes the pargs and generates lists of them in the same order as\nPOSES and L_POSES.\n\nIf an item doesnt exist in pargs, None is used\n\nIN:\n    pargs - dict retrieved from a **pargs var\n\nRETURNS: tuple of hte following format:\n    [0] - list of pose values from pargs, in order of POSES\n    [1] - list of lean values from pargs, in order of L_POSES",
        "function_args": {
          "args": [
            "self",
            "pargs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__set_defaults",
        "line": 12366,
        "docstring": "Sets all pose defaults",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__set_posedefs",
        "line": 12380,
        "docstring": "Sets pose defaults\n\nIN:\n    pose_dict - dict of poses\n    _def - default to use here",
        "function_args": {
          "args": [
            "self",
            "pose_dict",
            "_def"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__sync_all",
        "line": 12392,
        "docstring": "Syncs internal all map with the internal maps",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_modify",
        "line": 12399,
        "docstring": "Modifes poses based on given pargs.\nNOTE: this can damage the sprite system if done incorrectly.\n\nIN:\n    **pargs - param name-value pairs. See MASPoseArms.PARAM_NAMES\n        and MASPoseArms.L_PARAM_NAMES",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "pargs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_transform",
        "line": 12421,
        "docstring": "Applies the given function to transform value in each pose\nNOTE: this can damage the sprite system if done incorrectly\n\nIN:\n    func - function to call for each pose. The current vlaue for\n        each pose is passed in. The return value of this function\n        is set to the pose.",
        "function_args": {
          "args": [
            "self",
            "func"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "_verify_mpm_item",
        "line": 12443,
        "docstring": "Verifies data for an mpm item based on type\n\nIN:\n    ind_lvl - indent lvl\n    mpm_type - mpm type to check values for\n    prop_name - name of the item to check\n    prop_val - value of the item to check\n\nOUT:\n    mpm_data - dict to save data to\n    msg_log - list to add messages to\n\nRETURNS: True if successful verification, False if not",
        "function_args": {
          "args": [
            "cls",
            "mpm_data",
            "msg_log",
            "ind_lvl",
            "mpm_type",
            "prop_name",
            "prop_val"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "fromJSON",
        "line": 12541,
        "docstring": "Builds a MASPoseMap given a JSON format of it\n\nIN:\n    json_obj - json object to parse\n    ind_lvl - indent lvl\n    valid_types - tuple/list of MPM types we should consider valid.\n        NOTE: this should be used by the caller to ensure that\n        the MPM being loaded is the correct one.\n        If not passed, then we don't check for valid types\n\nOUT:\n    msg_log - list to add messages to\n\nRETURNS: MASPoseMap object built using the JSON, or None if failed",
        "function_args": {
          "args": [
            "cls",
            "json_obj",
            "msg_log",
            "ind_lvl",
            "valid_types"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get",
        "line": 12667,
        "docstring": "Get passed to the internal pose map\nonly because its common to call get on this object.\n\nIN:\n    pose - pose to get from pose map\n    defval - default value to return if pose not found\n\nRETURNS:\n    value of pose in internal dict, or defval if not found",
        "function_args": {
          "args": [
            "self",
            "pose",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_fallback",
        "line": 12681,
        "docstring": "Checks if this posemap is a fallback one via type.\n\nRETURNS: True if this posemap is a fallback one, False if not",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "unique_values",
        "line": 12689,
        "docstring": "Gets all unique non-None values in this MASPoseMap.\nNOTE: because MPM's may not include hashable values, this is\ntry/excepted to handle those cases. If something is non-hashable,\nwe always return all values.\n\nRETURNS: list of unique non-None values in this MASPoseMap",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "values",
        "line": 12708,
        "docstring": "Gets all non-None values in this MASPoseMap.\n\nRETURNS: list of all non-None values in this MASPoseMap",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "lp2pn",
        "line": 12721,
        "docstring": "Converts a leanpose to a PARAM NAME\n\nIN:\n    leanpose - leanpose to convert\n\nRETURNS: param name associated with leanpose, or \"\" if not valid",
        "function_args": {
          "args": [
            "leanpose"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "pn2lp",
        "line": 12741,
        "docstring": "Converts a PARAM NAME to a leanpose\n\nIN:\n    name - name of the param to convert\n\nRETURNS: leanpose associated with param name, or \"\" if not valid",
        "function_args": {
          "args": [
            "name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASSpriteBase": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASSpriteBase",
    "class_bases": [
      "renpy.store.object"
    ],
    "line": 12759,
    "docstring": "Base class for MAS sprite objects\n\nPROPERTIES:\n    name - name of the item\n    img_sit - filename of the sitting version of the item\n    img_stand - filename of the standing version of the item\n    pose_map - MASPoseMap object that contains pose mappings\n    stay_on_start - determines if the item stays on startup\n    entry_pp - programmign point to call when wearing this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        NOTE: this is called after the item is added to MASMonika\n    exit_pp - programming point to call when taking off this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        NOTE: this is called before the item is removed from MASMonika\n    is_custom - True if this is a custom object. False if not.\n        NOTE: this must be set AFTER object creation\n    hl_map - MASHighlightMap. Actual implementation may vary by extended\n        classes",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 12784,
        "docstring": "MASSpriteBase constructor\n\nIN:\n    name - name of this item\n    img_sit - filename of the sitting image\n    pose_map - MASPoseMAp object that contains pose mappings\n    img_stand - filename of the standing image\n        If this is not passed in, this is considered blacklisted\n        from standing sprites.\n        (Default: \"\")\n    stay_on_start - True means the item should reappear on startup\n        False means the item should always drop when restarting.\n        (Default: False)\n    entry_pp - programming point to call when wearing this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    exit_pp - programming point to call when taking off this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    ex_props - dict of additional properties to apply to this\n        sprite object.\n        (Default: None)\n    full_hl_data - tuple of the following format:\n        [0] - keys to use for MASHighlightMap\n        [1] - default value for MASHighlightMap\n            if None, no default highlights\n        [2] - mapping dict of the following format:\n            key: key in [0]\n            value: value to use for key\n                if None, no highlight for this key\n            if None, no mapped highlights\n        if None, no highlights at all\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "name",
            "img_sit",
            "pose_map",
            "img_stand",
            "stay_on_start",
            "entry_pp",
            "exit_pp",
            "ex_props",
            "full_hl_data"
          ],
          "pos_only_args": [],
          "defaults": [
            "''",
            "False",
            "None",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__eq__",
        "line": 12859,
        "docstring": "Equality override",
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__ne__",
        "line": 12868,
        "docstring": "Not equal override",
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__setup_hl_map",
        "line": 12877,
        "docstring": "Sets up the highlight map\n\nIN:\n    hl_data - See constructor for description",
        "function_args": {
          "args": [
            "self",
            "hl_data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "addprop",
        "line": 12901,
        "docstring": "Adds the given prop to the ex_props list\n\nIN:\n    prop - prop to add",
        "function_args": {
          "args": [
            "self",
            "prop"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_loadstrs",
        "line": 12910,
        "docstring": "Build list of strings representing each image that may be used\nin this sprite.\n\nNOTE: this should be implemented by the extending classes\n\nIN:\n    prefix - prefix to apply to each image. should be list of\n        strings\n        (DEfault: \"\")\n\nRETURNS: list of lists of strings represented in this image.\n    use .join on each inner list to make the image",
        "function_args": {
          "args": [
            "self",
            "prefix"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "default_exprops",
        "line": 12927,
        "docstring": "Called after sprite creation in the base class. This should be\nimplemented by sprite object classes as appropraite.\n\nthe only things that should happen in here are defaulting of\nexprops as a result of other exprops.\n\nAll code in here should be safe to call more than once.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "entry",
        "line": 12939,
        "docstring": "Calls the entry programming point if it exists\n\nIN:\n    _monika_chr - the MASMonika object being changed\n    **kwargs - other keyword args to pass",
        "function_args": {
          "args": [
            "self",
            "_monika_chr"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "kwargs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "exit",
        "line": 12950,
        "docstring": "Calls the exit programming point if it exists\n\nIN:\n    _monika_chr - the MASMonika object being changed\n    **kwargs - other keyword args to pass",
        "function_args": {
          "args": [
            "self",
            "_monika_chr"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "kwargs",
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "format_exprops",
        "line": 12961,
        "docstring": "Called after sprite creation in the base class, after exprops\nhave been defaulted in. This should be implemented by sprite object\nclasses as appropriate.\n\nThe only things that should happen here are adjusting formats\nof exprops so they are valid/uniform/as expected by consuming code\n\nAll code in here should be safe to call more than once.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "gethlc",
        "line": 12974,
        "docstring": "Gets highlight code\n\nNOTE: actual args and implementation should be handled by the\n    extended classes\n\nRETURNS: highlight code, or defval if no highlight",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "kwargs",
          "var_arg": "args"
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getprop",
        "line": 12985,
        "docstring": "Gets the exprop\n\nIN:\n    prop - prop to get\n    defval - default value to return if prop not found",
        "function_args": {
          "args": [
            "self",
            "prop",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "gettype",
        "line": 12995,
        "docstring": "Gets the type of this sprite object\n\nRETURNS: type of this sprite object",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hasprogpoints",
        "line": 13003,
        "docstring": "RETURNS: true if this sprite object has at least 1 non-null prog\n    point, False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hasprop",
        "line": 13010,
        "docstring": "Checks if this sprite object has the given prop\n\nIN:\n    prop - prop in ex_props to look for\n\nRETURNS: True if this sprite object has the ex_prop, False if not",
        "function_args": {
          "args": [
            "self",
            "prop"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hl_keys",
        "line": 13021,
        "docstring": "Gets keys used for the MASHighlightMap\n\nRETURNS: keys used in the primary level of this MASHighlightMap.\nAn empty list is returned if no hl map or no keys",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_dynamic",
        "line": 13033,
        "docstring": "Is this a dynamic sprite?\n\nREUTRNS: True if this is a dynamic sprite",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "rmprop",
        "line": 13041,
        "docstring": "Removes the prop from this sprite's ex_props, if it exists\n\nIN:\n    prop - prop to remove\n\nRETURNS: True if the prop was found and removed, False otherwise",
        "function_args": {
          "args": [
            "self",
            "prop"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "sortkey",
        "line": 13057,
        "docstring": "Returns the sorting key of the given MASSpriteBase object",
        "function_args": {
          "args": [
            "sprite_base"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASDynamicSpriteBase": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASDynamicSpriteBase",
    "class_bases": [
      "renpy.store.object"
    ],
    "line": 13066,
    "docstring": "Special sprite type for dynamic sprites - all dynamic based sprites\nshould inherit this as a 2nd type and call dyn_init in init\n\nPROPERTIES:\n    disp - Displayable to associate with this sprite. Can be dynamic.\n    hl_disp - Displayable to use for highlights. Can be dynamic.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "dyn_init",
        "line": 13076,
        "function_args": {
          "args": [
            "self",
            "disp",
            "hl_disp"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASSpriteFallbackBase": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASSpriteFallbackBase",
    "class_bases": [
      "MASSpriteBase"
    ],
    "line": 13081,
    "docstring": "MAS sprites that can use pose maps as fallback maps.\n\nPROPERTIES:\n    None\n\nSEE MASSpriteBase for inherited properties",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 13091,
        "docstring": "MASSpriteFallbackBase constructor\n\nIN:\n    name - name of this item\n    img_sit - filename of the sitting image for this item\n    pose_map - MASPoseMap object that contains pose mappings or\n        fallback mappings\n    img_stand - filename of the stnading image\n        If this is not passed in, this is considered blacklisted\n        from standing sprites.\n        (Default: \"\")\n    stay_on_start - True means the item should reappear on startup\n        False means the item should always drop when restarting\n        (Default: False)\n    fallback - Unused\n    entry_pp - programming point to call when wearing this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    exit_pp - programming point to call when taking off this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    ex_props - dict of additional properties to apply to this\n        sprite object.\n        (Default: None)\n    hl_data - tuple of the following format:\n        [0] - keys to use for MASHighlightMap\n        [1] - default value for MASHighlightMap\n            if None, no default highlights\n        [2] - mapping dict of the following format:\n            key: key in [0]\n            value: value to use for key\n                if None, no highlight for this key\n            if None, no mapped highlights\n        if None, no highlights at all\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "name",
            "img_sit",
            "pose_map",
            "img_stand",
            "stay_on_start",
            "fallback",
            "entry_pp",
            "exit_pp",
            "ex_props",
            "full_hl_data"
          ],
          "pos_only_args": [],
          "defaults": [
            "''",
            "False",
            "False",
            "None",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_fallback",
        "line": 13155,
        "docstring": "Gets the fallback pose for a given pose or lean\n\nNOTE: the fallback variable is NOT checked\n\nLean is checked first if its not None.\n\nIN:\n    pose - pose to retrieve fallback for\n    lean - lean to retrieve fallback for\n\nRETURNS:\n    tuple fo thef ollowing format:\n    [0]: arms type\n        - default for this is steepling\n    [1]: lean type\n        - defualt for this is None",
        "function_args": {
          "args": [
            "self",
            "pose",
            "lean"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_leanpose",
        "line": 13193,
        "docstring": "Gets actual leanpose based on posemaps + fallback settings\n\nIN:\n    leanpose - leanpose we are trying to get actual leanpose for\n    defval - default value to return if no leanpose\n        (Default: None)\n\n\nRETURNS: actual leanpose, or defval if not found",
        "function_args": {
          "args": [
            "self",
            "leanpose",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASAccessoryBase": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASAccessoryBase",
    "class_bases": [
      "MASSpriteBase"
    ],
    "line": 13218,
    "docstring": "MASAccesory base objects\n\nPROPERTIES:\n    priority - render priority. Lower is rendered first\n    acs_type - an optional type to help organize acs\n    mux_type - list of acs types that we shoudl treat\n        as mutally exclusive with this type. Basically if this acs is\n        worn, all acs with a type in this property are removed.\n    dlg_desc - user friendly way to describe this accessory in dialogue\n        Think \"black bow\" or \"silver earrings\"\n    dlg_plur - True if the dlg_desc should be used in the plural\n        sense, like \"these silver earrings\", False if not, like:\n        \"this black bow\"\n    keep_on_desk - Set to True to keep the ACS on the desk when monika\n        leaves, False if not\n    hl_map - MASHighlightMap object where keys are defined by the given\n        posemap. Value determined by extending classes.\n\nSEE MASSpriteBase for inherited properties",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 13254,
        "docstring": "MASAccessory constructor\n\nIN:\n    aso_type - Accessory Sprite Object type\n    name - name of this accessory\n    img_sit - file name of the sitting image\n    pose_map - MASPoseMap object that contains pose mappings\n    img_stand - file name of the standing image\n        IF this is not passed in, we assume the standing version\n            has no accessory.\n        (Default: \"\")\n    rec_layer - recommended layer to place this accessory\n        (Must be one the ACS types in MASMonika)\n        (Default: MASMonika.PST_ACS)\n    priority - render priority. Lower is rendered first\n        (Default: 10)\n    stay_on_start - True means the accessory is saved for next\n        startup. False means the accessory is dropped on next\n        startup.\n        (Default: False)\n    entry_pp - programming point to call when wearing this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    exit_pp - programming point to call when taking off this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    acs_type - type, for ease of organization of acs\n        This works with mux type to determine if an ACS can work\n        with another ACS.\n        (Default: None)\n    mux_type - list of acs types that should be\n        mutually exclusive with this acs.\n        this works with acs_type to determine if this works with\n        other ACS.\n        (Default: None)\n    ex_props - dict of additional properties to apply to this\n        sprite object.\n        (Default: None)\n    dlg_data - tuple of the following format:\n        [0] - string to use for dlg_desc\n        [1] - boolean value for dlg_plur\n        (Default: None)\n    keep_on_desk - determines if ACS should be shown if monika\n        leaves\n        (Default: False)\n    hl_data - tuple of the following format:\n        [0] - default value for MASHighlightMap\n            if None, no default highlight\n        [1] - dict-based highlight map data:\n            key: string. should match values used in pose_map\n            value: highlight data. Determined by extended classes.\n                if None, then no highlight for the key\n            if None, then no mapped highlights\n        if None, no highlights at all\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "aso_type",
            "name",
            "img_sit",
            "pose_map",
            "img_stand",
            "rec_layer",
            "priority",
            "stay_on_start",
            "entry_pp",
            "exit_pp",
            "acs_type",
            "mux_type",
            "ex_props",
            "dlg_data",
            "keep_on_desk",
            "hl_data"
          ],
          "pos_only_args": [],
          "defaults": [
            "''",
            "MASMonika.PST_ACS",
            "10",
            "False",
            "None",
            "None",
            "None",
            "None",
            "None",
            "None",
            "False",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_prepare_hl_data",
        "line": 13357,
        "docstring": "Generates hl-ready data from ahldata\n\nIN:\n    hl_data - ahl data. See constructor for info\n    pose_map - pose map. see constructor for info\n\nRETURNS: hl data to pass into MASSpriteBase",
        "function_args": {
          "args": [
            "hl_data",
            "pose_map"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "format_exprops",
        "line": 13380,
        "docstring": "Override of base class function",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "get_priority",
        "line": 13393,
        "docstring": "Gets the priority of the given accessory\n\nThis is for sorting",
        "function_args": {
          "args": [
            "acs"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated()"
        ],
        "identifier": "get_arm_split_code",
        "line": 13402,
        "docstring": "DEPRECATED\n            NOTE: we are keeping this around for compatiblity purposes\n\n            IN:\n                poseid - ignored\n\n            RETURNS: empty list",
        "function_args": {
          "args": [
            "self",
            "poseid"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_rec_layer",
        "line": 13413,
        "docstring": "Returns the recommended layer ofr this accessory\n\nRETURNS:\n    recommend MASMOnika accessory type for this accessory",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "opt_gethlc",
        "line": 13422,
        "docstring": "Optimized highlight code getter. Implementation varies in\nextended classes.\nThe point of this is to avoid additional lookups during render.",
        "function_args": {
          "args": [
            "self",
            "poseid",
            "flt",
            "arm_split",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASAccessory": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASAccessory",
    "class_bases": [
      "MASAccessoryBase"
    ],
    "line": 13431,
    "docstring": "Standard MASAccessory object.\n\nPROPERTIES:\n    hl_map - MASHighlightMap containing MASFilterMap objects.\n\nSee MASAccessoryBase for inherited properties.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 13441,
        "docstring": "Constructor.\n\nIN:\n    name - name of this accessory\n    img_sit - file name of the sitting image\n    pose_map - MASPoseMap object that contains pose mappings\n    img_stand - file name of the standing image\n        IF this is not passed in, we assume the standing version\n            has no accessory.\n        (Default: \"\")\n    rec_layer - recommended layer to place this accessory\n        (Must be one the ACS types in MASMonika)\n        (Default: MASMonika.PST_ACS)\n    priority - render priority. Lower is rendered first\n        (Default: 10)\n    stay_on_start - True means the accessory is saved for next\n        startup. False means the accessory is dropped on next\n        startup.\n        (Default: False)\n    entry_pp - programming point to call when wearing this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    exit_pp - programming point to call when taking off this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    acs_type - type, for ease of organization of acs\n        This works with mux type to determine if an ACS can work\n        with another ACS.\n        (Default: None)\n    mux_type - list of acs types that should be\n        mutually exclusive with this acs.\n        this works with acs_type to determine if this works with\n        other ACS.\n        (Default: None)\n    ex_props - dict of additional properties to apply to this\n        sprite object.\n        (Default: None)\n    dlg_data - tuple of the following format:\n        [0] - string to use for dlg_desc\n        [1] - boolean value for dlg_plur\n        (Default: None)\n    keep_on_desk - determines if ACS should be shown if monika\n        leaves\n        (Default: False)\n    hl_data - ACS highlight data. Format: tuple:\n        [0] - default MASFilterMap highlight to use\n            if None, then no default highlight\n        [1] - dict of the following format:\n            key: values used for pose_map\n            value: MASFilterMap to associate with that pose id\n                None means no highlight for the pose code\n            if None, then no mapped highlights\n        if None, then no highlights at all\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "name",
            "img_sit",
            "pose_map",
            "img_stand",
            "rec_layer",
            "priority",
            "stay_on_start",
            "entry_pp",
            "exit_pp",
            "acs_type",
            "mux_type",
            "ex_props",
            "dlg_data",
            "keep_on_desk",
            "hl_data"
          ],
          "pos_only_args": [],
          "defaults": [
            "''",
            "MASMonika.PST_ACS",
            "10",
            "False",
            "None",
            "None",
            "None",
            "None",
            "None",
            "None",
            "False",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 13535,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__build_loadstrs_hl",
        "line": 13538,
        "docstring": "Builds highlight load strs for a pose\n\nIN:\n    prefix - prefix to apply to the load strings\n        should be a list of strings\n    poseid - pose id to find highlights for\n\nRETURNS: list of lists of strings",
        "function_args": {
          "args": [
            "self",
            "prefix",
            "poseid"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_loadstrs",
        "line": 13567,
        "docstring": "See MASSpriteBase.build_loadstrs",
        "function_args": {
          "args": [
            "self",
            "prefix"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "gethlc",
        "line": 13591,
        "docstring": "Gets highlight code.\nNOTE: if you already know the poseid, use opt_gethlc\n\nIN:\n    leanpose - leanpose to get highlight for\n    flt - filter to get highlight for\n    hl_key - unused\n    defval - default value to return\n        (Default: None)\n\nRETURNS: highlight code, or None if no highlight",
        "function_args": {
          "args": [
            "self",
            "leanpose",
            "flt",
            "hl_key",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "opt_gethlc",
        "line": 13612,
        "docstring": "MASAccessory-specific gethlc.\nOptimized to only accept the args that actually matter for\nMASAccessory objects.\n\nIN:\n    poseid - string from pose_map\n    flt - fitler to get highlight for\n    arm_split - unused\n    defval - default value to return\n        (Default: None)\n\nRETURNS: highlight code, or None if no highlight",
        "function_args": {
          "args": [
            "self",
            "poseid",
            "flt",
            "arm_split",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASSplitAccessory": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASSplitAccessory",
    "class_bases": [
      "MASAccessoryBase"
    ],
    "line": 13630,
    "docstring": "MASSplitAccessory object. For accessories that should be placeable\nat split layers (ASE/BSE)\n\nPROPERTIES:\n    arm_split - MASPoseMap determining which arm position the ACS\n        should be visible in. This only applies to ACS that are\n        intended to be used in a BSE or ASE ACS layer.\n        This accepts the following values for poses;\n            \"0\" - sprite has \"-0\" version, and should be used for\n                arms-0 for this pose or body-0\n            \"1\" - sprite has \"-1\" version, and should be used for\n                body-1\n            \"5\" - sprite has \"-5\" version, and should be used for\n                arms-5 for this pose\n            \"10\" - sprite has \"-10\" version, and should be used for\n                arms-10\n            \"\" - sprite does not have any arm split for this pose\n            \"*\" - sprite has an arm split for all poses.\n            A ^ (caret) delimted string is also acceptable:\n                1^5^10\n    hl_map - MASHighlightMap (with same keys as pose_map values) of\n        MASHighlightMap objects (with same keys as arm_split values)\n        of MASFilterMap objects.\n\nSee MASAccessoryBase for inherited propeties",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 13667,
        "docstring": "MASSplitAccessory constructor\n\nIN:\n    name - name of this accessory\n    img_sit - file name of the sitting image\n    pose_map - MASPoseMap object that contains pose mappings\n    img_stand - file name of the standing image\n        IF this is not passed in, we assume the standing version\n            has no accessory.\n        (Default: \"\")\n    rec_layer - recommended layer to place this accessory\n        (Must be one the ACS types in MASMonika)\n        (Default: MASMonika.PST_ACS)\n    priority - render priority. Lower is rendered first\n        (Default: 10)\n    stay_on_start - True means the accessory is saved for next\n        startup. False means the accessory is dropped on next\n        startup.\n        (Default: False)\n    entry_pp - programming point to call when wearing this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    exit_pp - programming point to call when taking off this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    acs_type - type, for ease of organization of acs\n        This works with mux type to determine if an ACS can work\n        with another ACS.\n        (Default: None)\n    mux_type - list of acs types that should be\n        mutually exclusive with this acs.\n        this works with acs_type to determine if this works with\n        other ACS.\n        (Default: None)\n    ex_props - dict of additional properties to apply to this\n        sprite object.\n        (Default: None)\n    arm_split - MASPoseMap object for determining arm splits. See\n        property list above for more info.\n        (Default: None)\n    dlg_data - tuple of the following format:\n        [0] - string to use for dlg_desc\n        [1] - boolean value for dlg_plur\n        (Default: None)\n    keep_on_desk - determines if ACS should be shown if monika\n        leaves\n        (Default: False)\n    hl_data - highlight data. Format:\n        key: values used for pose_map\n        value: tuple:\n            [0] - default highlight ot use. pass in None to not\n                set a default (MASFilterMap object)\n            [1] - highlight mapping to use. format:\n                key: see arm_split property\n                value: MASFilterMap objects\n                    None means no highlight for this layer\n            None means no highlight for this pose\n        if None, then no highlights at all\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "name",
            "img_sit",
            "pose_map",
            "img_stand",
            "rec_layer",
            "priority",
            "stay_on_start",
            "entry_pp",
            "exit_pp",
            "acs_type",
            "mux_type",
            "ex_props",
            "arm_split",
            "dlg_data",
            "keep_on_desk",
            "hl_data"
          ],
          "pos_only_args": [],
          "defaults": [
            "''",
            "MASMonika.PST_ACS",
            "10",
            "False",
            "None",
            "None",
            "None",
            "None",
            "None",
            "None",
            "None",
            "False",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 13769,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__build_loadstrs_hl",
        "line": 13772,
        "docstring": "Builds highlight load strs for a pose and arm layer\n\nIN:\n    prefix - prefix to apply to the load strings\n        should be a list of strings\n    poseid - pose id to find highlight for\n    armcode - arm_split code to find highlight for\n\nRETURNS: list of lists of strings",
        "function_args": {
          "args": [
            "self",
            "prefix",
            "poseid",
            "armcode"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "_prepare_hl_data",
        "line": 13808,
        "docstring": "Generates hl-ready data from ahl data for MASAccessoryBase\n    processing\n\nIN:\n    hl_data - ahl data. See constructor for info\n\nRETURNS: hl_data to pass into MASAccessoryBase",
        "function_args": {
          "args": [
            "cls",
            "hl_data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_loadstrs",
        "line": 13833,
        "docstring": "See MASSpriteBase.build_loadstrs",
        "function_args": {
          "args": [
            "self",
            "prefix"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "fromJSON_hl_data",
        "line": 13869,
        "docstring": "Parses JSOn data for a highlight split object\n\nIN:\n    json_obj - JSON object to parse\n    ind_lvl - indentation level\n        NOTE: this function handles loading/success so do NOT\n            incrememnt indent\n    pm_keys - pose map keys\n    rec_layer - the layer that this ACS wants to be on\n\nOUT:\n    msg_log - list to add messages to\n\nRETURNS: split hl_data, completely validated:\n    dict:\n    key: pose map keys\n    value: tuple:\n        [0] - default MASFilterMap object\n        [1] - dict:\n            key: arm split keys\n            value: MASFilterMap object\n    or None if no data, False if failure in parsing occured",
        "function_args": {
          "args": [
            "cls",
            "json_obj",
            "msg_log",
            "ind_lvl",
            "pm_keys",
            "rec_layer"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_arm_split_code",
        "line": 14009,
        "docstring": "Gets arm split code if needed\n\nIN:\n    poseid - poseid to get arm split code for\n\nRETURNS: arms split code as iterable, or empty list",
        "function_args": {
          "args": [
            "self",
            "poseid"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "gethlc",
        "line": 14033,
        "docstring": "Gets highlight code.\nNOTE: if you already know the pose id, use opt_gethlc\n\nIN:\n    leanpose - leanpose to get highlight for\n    flt - filter to get highlight for\n    hl_key - arm_spilt code\n    defval - default value to use\n        (Default: None)\n\nRETURNS: highlight code, or none if no highlight",
        "function_args": {
          "args": [
            "self",
            "leanpose",
            "flt",
            "hl_key",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hl_keys",
        "line": 14054,
        "docstring": "Returns keys used for MASHighlightMap.\n\nRETURNS: keys used for all MASHighlightMaps for MASAccessories.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "hl_keys_c",
        "line": 14063,
        "docstring": "Class method version of hl_keys\n\nRETURNS: tuple of hl keys",
        "function_args": {
          "args": [
            "cls"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "opt_gethlc",
        "line": 14071,
        "docstring": "MASSplitAccessory-specific gethlc.\nOptimized to only accept the args that actually matter for\nMASSplitAccessory objects\n\nIN:\n    poseid - string from pose_map\n    flt - filter to get highlight for\n    arm_split - arm split code to get highlight for\n    defval - default value to return\n        (Default: None)\n\nRETURNS: highlight code, or None if no highlight",
        "function_args": {
          "args": [
            "self",
            "poseid",
            "flt",
            "arm_split",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "verify_arm_split_val",
        "line": 14097,
        "docstring": "Verifies if an arm split value is valid\n\nIN:\n    value - arm split value to check\n\nRETURNS: True if valid, false if not",
        "function_args": {
          "args": [
            "cls",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASDynamicAccessory": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASDynamicAccessory",
    "class_bases": [
      "MASAccessoryBase",
      "MASDynamicSpriteBase"
    ],
    "line": 14109,
    "docstring": "A Dynamic MAS Accessory. This can vary an ACS based on displayables.\n\nNOTE: does NOT support split ACS.\n\nPROPERTIES:\n    No Additional.\nSee MASAccessory and MASDynamicSpriteBase for inherited properties.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 14120,
        "docstring": "Dynamic accessory constructor.\n\nFor simplicity, this passes in fake values to the accessory base.\n\nIN:\n    name - name of this accessory\n    disp - displayable to associate with this accessory. Can be\n        dynamic.\n    pose_map - MASPoseMap - this is assumed to be in enable/disable\n        mode.\n    rec_layer - recommended layer to place this accessory\n        (Must be one the ACS types in MASMonika)\n        (Default: MASMonika.PST_ACS)\n    priority - render priority. Lower is rendered first\n        (Default: 10)\n    stay_on_start - True means the accessory is saved for next\n        startup. False means the accessory is dropped on next\n        startup.\n        (Default: False)\n    entry_pp - programming point to call when wearing this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    exit_pp - programming point to call when taking off this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    acs_type - type, for ease of organization of acs\n        This works with mux type to determine if an ACS can work\n        with another ACS.\n        (Default: None)\n    mux_type - list of acs types that should be\n        mutually exclusive with this acs.\n        this works with acs_type to determine if this works with\n        other ACS.\n        (Default: None)\n    ex_props - dict of additional properties to apply to this\n        sprite object.\n        (Default: None)\n    dlg_data - tuple of the following format:\n        [0] - string to use for dlg_desc\n        [1] - boolean value for dlg_plur\n        (Default: None)\n    keep_on_desk - determines if ACS should be shown if monika\n        leaves\n        (Default: False)\n    hl_disp - displayable to use for Highlights. Can be dynamic.\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "name",
            "disp",
            "pose_map",
            "rec_layer",
            "priority",
            "stay_on_start",
            "entry_pp",
            "exit_pp",
            "acs_type",
            "mux_type",
            "ex_props",
            "dlg_data",
            "keep_on_desk",
            "hl_disp"
          ],
          "pos_only_args": [],
          "defaults": [
            "MASMonika.PST_ACS",
            "10",
            "False",
            "None",
            "None",
            "None",
            "None",
            "None",
            "None",
            "False",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASHair": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASHair",
    "class_bases": [
      "MASSpriteFallbackBase"
    ],
    "line": 14205,
    "docstring": "MASHair objects\n\nRepresentations of hair items\n\nPROPERTIES:\n    split - MASPoseMap object that determins if a pose has split hair\n        or not.\n        if a pose has True, it is split. False or None means no split.\n    hl_map - MASHighlightMap with the following format:\n        keys:\n            \"front\" - front hair\n            \"back\" - back hair\n            \"mid\" - mid hair\n            \"<lean>|front\" - front hair for a leaning type\n                NOTE: can be multiple of this format\n            \"<lean>|back\" - back hair for a leaning type\n                NOTE: can be multiple of this format\n            \"<lean>|mid\" - mid hair for a leaning type\n                NOTE: can be multiple of this format\n        values:\n            MASFilterMap objects\n    mpm_mid - MASPoseMap for mid hair layer.\n        Determines if the mid layer should be used for a pose.\n        This is the enable/disable type\n\nSEE MASSpriteFallbackBase for inherited properties\n\nPOSEMAP explanations:\n    Use an empty string to",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 14240,
        "docstring": "MASHair constructor\n\nIN;\n    name - name of this hairstyle\n    img_sit - filename of the sitting image for this hairstyle\n    pose_map - MASPoseMap object that contains pose mappings\n    img_stand - filename of the standing image for this hairstyle\n        If this is not passed in, this is considered blacklisted\n            from standing sprites.\n        (Default: \"\")\n    stay_on_strat - True means the hairstyle should reappear on\n        startup. False means a restart clears the hairstyle\n        (Default: True)\n    fallback - Unused\n    entry_pp - programming point to call when wearing this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    exit_pp - programming point to call when taking off this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    split - MASPoseMap object saying which hair has splits or Not.\n        If None, we assume hair has splits for everything.\n        (Default: None)\n    ex_props - dict of additional properties to apply to this\n        sprite object.\n        (Default: None)\n    hl_data - tuple of the following format:\n        [0] - default MASFilterMap to use.\n            NOTE: it almost certain that you do NOT want to set\n                this\n            If None, no default highlight\n        [1] - mapping dict. Format:\n            key: see hl_map property\n            value: MASFilterMap object, or None if no highlight\n        if None, then no highlights at all.\n        (Default: None)\n    mpm_mid - MASPoseMap for mid hair usage.\n        Determines if a mid layer should be used for a pose.\n        Should be enable/disable type or else we crash\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "name",
            "img_sit",
            "pose_map",
            "img_stand",
            "stay_on_start",
            "fallback",
            "entry_pp",
            "exit_pp",
            "split",
            "ex_props",
            "hl_data",
            "mpm_mid"
          ],
          "pos_only_args": [],
          "defaults": [
            "''",
            "True",
            "False",
            "None",
            "None",
            "None",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 14325,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__build_loadstrs_hl",
        "line": 14328,
        "docstring": "Builds highlight load strs for a split layer\n\nIN:\n    prefix - prefix to apply to the load strings\n        should be a list of strings\n    hl_key - key of the hl to use\n\nRETURNS: list of lists of strings",
        "function_args": {
          "args": [
            "self",
            "prefix",
            "hl_key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "_prepare_hl_data",
        "line": 14357,
        "docstring": "Generates hl-ready data for MASSpriteBase\n\nIN:\n    hl_data - hl data. See Constructor for info\n\nRETURNS: hl_data to pass into MASSpriteBase",
        "function_args": {
          "args": [
            "cls",
            "hl_data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_loadstrs",
        "line": 14375,
        "docstring": "See MASSpriteBase.build_loadstrs",
        "function_args": {
          "args": [
            "self",
            "prefix"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "format_exprops",
        "line": 14456,
        "docstring": "Override of base class function",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "gethlc",
        "line": 14468,
        "docstring": "Gets highlight code\n\nIN:\n    hair_key - the hair key to get hlc for (front/back)\n    lean - type of lean to get hlc for\n    flt - filter to get highlight for\n    defval - the default value to return\n        (Default: None)\n\nRETURNS: highlight code, or defval if no highlight",
        "function_args": {
          "args": [
            "self",
            "hair_key",
            "lean",
            "flt",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hl_keys",
        "line": 14496,
        "docstring": "Returns keys used for MASHighlightMap.\n\nRETURNS: keys used for all MASHighlightMaps for MASHair objects",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "hl_keys_c",
        "line": 14505,
        "docstring": "Class method of hl_keys\n\nRETURNS: tuple of hl keys",
        "function_args": {
          "args": [
            "cls"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASClothes": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASClothes",
    "class_bases": [
      "MASSpriteFallbackBase"
    ],
    "line": 14514,
    "docstring": "MASClothes objects\n\nRepresentations of clothes\n\nPROPERTIES:\n    hair_map - dict of available hair styles for these clothes\n        keys should be hair name properites. Values should also be\n        hair name properties.\n        use \"all\" to signify a default hair style for all mappings that\n        are not found.\n    pose_arms - MASPoseArms object containing the arms for these\n        clothes.\n    outfit_hair - MASHair object of the hair that should be worn with\n        these clothes in outfit mode\n    outfit_acs - dict of MASAccessory objects of the ACS that should be\n        worn with these clothes in outfit mode\n    hl_map - MASHighlightMap with the following format:\n        keys:\n            \"0\" - body-0 layer\n            \"1\" - body-1 layer\n            \"<lean>|0\" - body-0 layer for a leaning type\n                NOTE: can be multiple of this format\n            \"<lean>|1\" - body-1 layer for a leaning type\n                NOTE: can be multiple of this format\n        values:\n            MASFilterMap objects\n\nSEE MASSpriteFallbackBase for inherited properties",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 14552,
        "docstring": "MASClothes constructor\n\nIN;\n    name - name of these clothes\n    img_sit - filename of the sitting image for these clothes\n    pose_map - MASPoseMap object that contains pose mappings\n    img_stand - filename of the standing image for these clothes\n        If this is not passed in, this is considered blacklisted\n            from standing sprites.\n        (Default: \"\")\n    stay_on_start - True means the clothes should reappear on\n        startup. False means a restart clears the clothes\n        (Default: False)\n    fallback - Unused\n    hair_map - dict of available hair styles and what they map to\n        These should all be strings. To signify a default, add\n        a single item called \"all\" with the value being the hair\n        to map to.\n        NOTE: use the name property for hairstyles.\n        (Default: {})\n    entry_pp - programming point to call when wearing this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    exit_pp - programming point to call when taking off this sprite\n        the MASMonika object that is being changed is fed into this\n        function\n        (Default: None)\n    ex_props - dict of additional properties to apply to this\n        sprite object.\n        (Default: None)\n    pose_arms - MASPoseMap object represneting the arm layers\n        for poses. If None is passed, we assume use the base\n        layers as a guide\n        (Default: None)\n    hl_data - tuple of the following format:\n        [0] - default MASFilterMap to use.\n            NOTE: it almost certain that you do NOT want to set\n                this\n            If None, no default highlight\n        [1] - mapping dict. Format:\n            key: see hl_map proprety\n            value: MASFilterMap object, or None if no highlight\n        if None, then no highlights at all.\n        (Default: None)\n    outfit_hair - MASHair object that should be used with these\n        clothes in outfit mode\n        (Default: None)\n    outfit_acs - MASAccessory objects that should be used with\n        these clothes in outfit mode. The following types are\n        accepted:\n            1 - dictionary\n                key: acs name\n                value: acs object\n            2 - list of acs names/acs objects - mixed types allowed\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "name",
            "img_sit",
            "pose_map",
            "img_stand",
            "stay_on_start",
            "fallback",
            "hair_map",
            "entry_pp",
            "exit_pp",
            "ex_props",
            "pose_arms",
            "hl_data",
            "outfit_hair",
            "outfit_acs"
          ],
          "pos_only_args": [],
          "defaults": [
            "''",
            "False",
            "False",
            "{}",
            "None",
            "None",
            "None",
            "None",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 14653,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_sprite0x2dchart__build_loadstrs_hl",
        "line": 14656,
        "docstring": "Builds loadstrs for body highlights\n\nIN:\n    prefix - prefix to apply\n        should be a list of strings\n    hl_key - key of the hl to use\n\nRETURNS: list of lists of strings representing image paths",
        "function_args": {
          "args": [
            "self",
            "prefix",
            "hl_key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "_prepare_hl_data",
        "line": 14685,
        "docstring": "Generates hl-ready data for MASSpriteBase\n\nIN:\n    hl_data - hl data. See constructor for info\n\nRETURNS: hl_data to pass into MASSpriteBase",
        "function_args": {
          "args": [
            "cls",
            "hl_data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_format_outfit_acs",
        "line": 14703,
        "docstring": "Formats the given data so its ready for outfit_acs property.\nThis also validates the data with the ACS map, and will delay\nvalidation until later if needed.\n\nIN:\n    outfit_acs_data - outfit acs data to format\n\nRETURNS: data ready for the outfit_acs property",
        "function_args": {
          "args": [
            "self",
            "outfit_acs_data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_format_outfit_hair",
        "line": 14742,
        "docstring": "Formats the given data so its ready for the outfit_hair property.\nThis also validates the data with the HAIR map, and will delay\nvalidation until later if needed.\n\nIN:\n    outfit_hair_data - outfit hair data to format\n\nRETURNS: data ready for the outfit_hair property",
        "function_args": {
          "args": [
            "self",
            "outfit_hair_data"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_proc_delayed_outfit_data",
        "line": 14770,
        "docstring": "Proccesses any delayed outfit hair/acs",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "process_delayed_outfits",
        "line": 14802,
        "docstring": "Processes all the delayed outfits data for all clothes.\nAlso sets the delayed outfit validation flag.",
        "function_args": {
          "args": [
            "cls"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_loadstrs",
        "line": 14811,
        "docstring": "See MASSpriteBase.build_loadstrs",
        "function_args": {
          "args": [
            "self",
            "prefix"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "default_exprops",
        "line": 14883,
        "docstring": "Override of base class function",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "determine_arms",
        "line": 14903,
        "docstring": "Determines arms pose to use for a given leanpose\n\nIN:\n    leanpose - leanpose to determine arms pose for\n\nRETURNS: MASPoseArms object to use for this leanpose, or None if\n    no MASPoseArms to use",
        "function_args": {
          "args": [
            "self",
            "leanpose"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_hair",
        "line": 14924,
        "docstring": "Given a hair type, grabs the available mapping for this hair type\n\nIN:\n    hair - hair type to get mapping for\n\nRETURNS:\n    the hair mapping to use inplace for the given hair type",
        "function_args": {
          "args": [
            "self",
            "hair"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "gethlc",
        "line": 14936,
        "docstring": "Gets highlight code\n\nIN:\n    bcode - base code to get hlc for (0,1)\n    lean - type of lean\n    flt - filter to get highlight for\n    defval - the default value to return\n        (Default: None)\n\nRETURNS: highlight code, or defval is no highlight",
        "function_args": {
          "args": [
            "self",
            "bcode",
            "lean",
            "flt",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "has_hair_map",
        "line": 14964,
        "docstring": "RETURNS: True if we have a mapping to check, False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hl_keys",
        "line": 14970,
        "docstring": "Returns keys used for MASHighlightMap.\n\nRETURNS: keys used for all MASHighlightMaps for MASHair objects",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "hl_keys_c",
        "line": 14979,
        "docstring": "Class method version of hl_keys\n\nRETURNS: tuple of hl keys",
        "function_args": {
          "args": [
            "cls"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "by_exprop",
        "line": 14988,
        "docstring": "Gets all clothes that have the given exprop.\n\nIN:\n    exprop - exprop to look for\n    value - value the exprop should be. Set to None to ignore.\n\nRETURNS: list of MASClothes objects with the given exprop and value",
        "function_args": {
          "args": [
            "exprop",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASOutfitChangeData": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASOutfitChangeData",
    "class_bases": [
      "object"
    ],
    "line": 15014,
    "docstring": "contains data related to outfit mode changes.\nMeant to be worked with in prog points.\n\nUse the functions to modify outfit data as appropriate.\n\nSupports:\n    - preventing ACS from being removed\n    - preventing hair or ACS from being worn",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 15026,
        "docstring": "Constructor\n\nIN:\n    hair - initial hair to associate with the outfit\n        (Default: None)\n    acs - dict of ACS to initially associate with the outfit\n        key: name of the ACS\n        value: the ACS object\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "hair",
            "acs"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "set_acs_change",
        "line": 15051,
        "docstring": "Enables or disables a specific ACS changing as part of outfit mode.\n\nIN:\n    acs_name - the name of the ACS to enable/disable\n    value - pass True to enable, False to disable",
        "function_args": {
          "args": [
            "self",
            "acs_name",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "set_acs_change_all",
        "line": 15062,
        "docstring": "Enables or disables ALL ACS changing as part of outfit mode\n\nIN:\n    value - pass True to enable, False to disable",
        "function_args": {
          "args": [
            "self",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "will_acs_change",
        "line": 15072,
        "docstring": "Checks if a specific acs will change as part of outfit mode.\n\nIN:\n    acs_name - the name of the ACS to check",
        "function_args": {
          "args": [
            "self",
            "acs_name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "set_hair_change",
        "line": 15084,
        "docstring": "Enables or disables hair changing as part of outfit mode.\n\nIN:\n    value - pass True to enable, False to disable.\n        if there is no hair to change, this value will not change.",
        "function_args": {
          "args": [
            "self",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "will_hair_change",
        "line": 15095,
        "docstring": "Checks if the hair will change as part of outfit mode.\n\nRETURNS: True if the hair will be changed, False if not",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_drawmonika": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_drawmonika",
    "line": 15108,
    "docstring": "DEPRECATED\n        This function has been gutted and only draws standing\n\n        IN:\n            st - renpy related\n            at - renpy related\n            character - MASMonika character object\n            eyebrows - type of eyebrows (sitting)\n            eyes - type of eyes (sitting)\n            nose - type of nose (sitting)\n            mouth - type of mouth (sitting)\n            head - type of head (standing)\n            left - type of left side (standing)\n            right - type of right side (standing)\n            lean - type of lean (sitting)\n                (Default: None)\n            arms - type of arms (sitting)\n                (Default: \"steepling\")\n            eyebags - type of eyebags (sitting)\n                (Default: None)\n            sweat - type of sweatdrop (sitting)\n                (Default: None)\n            blush - type of blush (sitting)\n                (Default: None)\n            tears - type of tears (sitting)\n                (Default: None)\n            emote - type of emote (sitting)\n                (Default: None)\n            stock - True means we are using stock standing, False means not\n                (standing)\n                (Default: True)\n            single - type of single standing image (standing)\n                (Default: None)",
    "function_args": {
      "args": [
        "st",
        "at",
        "character",
        "eyebrows",
        "eyes",
        "nose",
        "mouth",
        "lean",
        "arms",
        "eyebags",
        "sweat",
        "blush",
        "tears",
        "emote",
        "head",
        "left",
        "right",
        "stock",
        "single"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "'steepling'",
        "None",
        "None",
        "None",
        "None",
        "None",
        "''",
        "''",
        "''",
        "True",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_fwm_select": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_fwm_select",
    "line": 15191,
    "docstring": "Selects an image based on current filter and weather.\n\nIN:\n    st - renpy related\n    at - renpy related\n    mfwm - MASFilterWeatherMap to select image wtih\n\nRETURNS: dynamic disp output",
    "function_args": {
      "args": [
        "st",
        "at",
        "mfwm"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_fbf_select": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_fbf_select",
    "line": 15211,
    "docstring": "Selects an image based on current filter, respecting fallback\nmechanics.\n\nIN:\n    st - renpy related\n    at - renpy related\n    mfmfb - MASFilterMapFallback object to select image with\n\nRETURNS: dynamic disp output",
    "function_args": {
      "args": [
        "st",
        "at",
        "mfmfb"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_drawmonika_rk": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_drawmonika_rk",
    "line": 15231,
    "docstring": "Draws monika dynamically, using render keys\nSee mas_drawmonika for more info.\n\nIN:\n    st - renpy related\n    at - renpy related\n    character - MASMonika character object\n    eyebrows - type of eyebrows (sitting)\n    eyes - type of eyes (sitting)\n    nose - type of nose (sitting)\n    mouth - type of mouth (sitting)\n    head - type of head (standing)\n    left - type of left side (standing)\n    right - type of right side (standing)\n    lean - type of lean (sitting)\n        (Default: None)\n    arms - type of arms (sitting)\n        (Default: \"steepling\")\n    eyebags - type of eyebags (sitting)\n        (Default: None)\n    sweat - type of sweatdrop (sitting)\n        (Default: None)\n    blush - type of blush (sitting)\n        (Default: None)\n    tears - type of tears (sitting)\n        (Default: None)\n    emote - type of emote (sitting)\n        (Default: None)\n    stock - True means we are using stock standing, False means not\n        (standing)\n        (Default: True)\n    single - type of single standing image (standing)\n        (Default: None)",
    "function_args": {
      "args": [
        "st",
        "at",
        "character",
        "eyebrows",
        "eyes",
        "nose",
        "mouth",
        "lean",
        "arms",
        "eyebags",
        "sweat",
        "blush",
        "tears",
        "emote",
        "head",
        "left",
        "right",
        "stock",
        "single"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "'steepling'",
        "None",
        "None",
        "None",
        "None",
        "None",
        "'a'",
        "'1l'",
        "'1r'",
        "True",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_drawemptydesk_rk": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_drawemptydesk_rk",
    "line": 15380,
    "docstring": "draws the table dynamically. includes ACS that should stay on desk.\nNOTE: uses image manips.\nNOTE: this is assumed to be used with empty desk ONLY\nNOTE: sitting only\n\nIN:\n    st - renpy related\n    at - renpy realted\n    character - MASMonika character object",
    "function_args": {
      "args": [
        "st",
        "at",
        "character"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "CustomEncoder": {
    "type": "class",
    "class_decorators": [],
    "identifier": "CustomEncoder",
    "class_bases": [
      "json.JSONEncoder"
    ],
    "line": 15447,
    "docstring": "Custom JSONEncoder used to process sets",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "default",
        "line": 15451,
        "function_args": {
          "args": [
            "self",
            "obj"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASCalendar": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASCalendar",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 15457,
    "docstring": "Custom Calendar UI, can be used to display the events that are dependent\non dates or to allow user to pick a date",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 15657,
        "docstring": "Constructor for the custom calendar.\n\nIN:\n    select_date - a boolean that indicates how this calendar is going to\n        do, True indicates that it will select a day, False means that it\n        will only be for displaying events.\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "select_date"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_setupDayButtons",
        "line": 15911,
        "docstring": "Sets up the day buttons used in the calendar",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_showScrollableEventList",
        "line": 16154,
        "docstring": "Displays the events contained in the events list\nsaid list is a list of Strings to show",
        "function_args": {
          "args": [
            "self",
            "events"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_xcenter",
        "line": 16172,
        "docstring": "Returns the appropriate X location to center an object with the\ngiven width\n\nIN:\n    v_width - width of the view\n    width - width of the object to center\n\nRETURNS:\n    appropiate X coord to center",
        "function_args": {
          "args": [
            "self",
            "v_width",
            "width"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_buttonSelect",
        "line": 16187,
        "docstring": "Goes through the list of buttons and return the first non-None\nvalue returned\n\nRETURNS:\n    first non-none value returned",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_yearSanityChecks",
        "line": 16210,
        "docstring": "Checks that the current date is on the right interval, otherwise,\nit will force it back",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_changeYear",
        "line": 16224,
        "docstring": "Changes the currently selected year by incrementing or decrementing it by one\nand refreshes the view\n\nIN:\n    ascend - flag that indicates wheter increment or decrement\n        (Defaults to True)\n    set_to - if not None, set year to this value instead",
        "function_args": {
          "args": [
            "self",
            "ascend",
            "set_to"
          ],
          "pos_only_args": [],
          "defaults": [
            "True",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_changeMonth",
        "line": 16246,
        "docstring": "Changes the currently selected month by incrementing or decrementing it by one\nand refreshes the view\n\nIN:\n    ascend - flag that indicates wheter increment or decrement\n        (Defaults to True)",
        "function_args": {
          "args": [
            "self",
            "ascend"
          ],
          "pos_only_args": [],
          "defaults": [
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_isEvInYear",
        "line": 16277,
        "docstring": "Checks if the given event should appear in the given year.\n\nIN:\n    ev - event to check\n    year - year to check\n\nRETURNS: True if the given event belongs in the given year,\n    False otherwise",
        "function_args": {
          "args": [
            "self",
            "ev",
            "year"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_setupEasterEG",
        "line": 16296,
        "docstring": "Fills the quip objects used to generate EG events",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_getEGMonthEvents",
        "line": 16315,
        "docstring": "Generates a dict of events to display in the calendar\nwhen players go too far away\n\nRETURNS: A dict with the proper structure [day][eventname]\n    which contains a repeatable event with a nice label :D",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 16354,
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 16428,
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_checkOverDate": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_checkOverDate",
    "line": 16508,
    "docstring": "Checks if the player was gone over the given date entirely (taking you somewhere)\n\nIN:\n    date - a datetime.date of the date we want to see if we've been out all day for\n\nOUT:\n    True if the player and Monika were out together the whole day, False if not.",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_capGainAff": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_capGainAff",
    "line": 16522,
    "docstring": "Gains affection according to the cap(s) defined\n\nIN:\n    amount:\n        Amount of affection to gain\n\n    aff_gained_var:\n        The persistent variable which the total amount gained for the holiday is stored\n        (NOTE: Must be a string)\n\n    normal_cap:\n        The cap to use when not player bday\n\n    pbday_cap:\n        The cap to use when it's player bday (NOTE: if not provided, normal_cap is assumed)",
    "function_args": {
      "args": [
        "amount",
        "aff_gained_var",
        "normal_cap",
        "pbday_cap"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hasSpecialOutfit": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hasSpecialOutfit",
    "line": 16553,
    "docstring": "Checks if the given date is a special event that has an outfit in the event clothes map\nIN:\n    _date - date to check.\n        (Default: None)\n\nRETURNS: True if given date has a special outfit, False otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMonikaBirthday": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMonikaBirthday",
    "line": 16571,
    "docstring": "checks if the given date is monikas birthday\nComparison is done solely with month and day\nIN:\n    _date - date to check. If not passed in, we use today.",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMonikaBirthday_dt": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMonikaBirthday_dt",
    "line": 16586,
    "docstring": "checks if the given date is monikas birthday.\nTakes hours beyond the date into account via the `extend_by` param.\n\nIN:\n    _datetime - datetime to check. If not passed in, we use now.\n    extend_by - hours we want to extend past 922\n        defaults to 0",
    "function_args": {
      "args": [
        "_datetime",
        "extend_by"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getNextMonikaBirthday": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getNextMonikaBirthday",
    "line": 16606,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_recognizedBday": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_recognizedBday",
    "line": 16617,
    "docstring": "Checks if the user recognized monika's birthday at all.\n\nRETURNS:\n    True if the user recoginzed monika's birthday, False otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_surpriseBdayShowVisuals": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_surpriseBdayShowVisuals",
    "line": 16638,
    "docstring": "Shows bday surprise party visuals",
    "function_args": {
      "args": [
        "cake"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_surpriseBdayHideVisuals": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_surpriseBdayHideVisuals",
    "line": 16649,
    "docstring": "Hides all visuals for surprise party",
    "function_args": {
      "args": [
        "cake"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_confirmedParty": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_confirmedParty",
    "line": 16659,
    "docstring": "Checks if the player has confirmed the party",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_mbdayCapGainAff": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_mbdayCapGainAff",
    "line": 16697,
    "function_args": {
      "args": [
        "amount"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "RigMouse": {
    "type": "function",
    "function_decorators": [],
    "identifier": "RigMouse",
    "line": 19049,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "FileActionMod": {
    "type": "function",
    "function_decorators": [],
    "identifier": "FileActionMod",
    "line": 19059,
    "function_args": {
      "args": [
        "name",
        "page"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": "kwargs",
      "var_arg": null
    }
  },
  "MASNumericalRepeatRule": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASNumericalRepeatRule",
    "class_bases": [
      "object"
    ],
    "line": 19098,
    "docstring": "Static Class used to create numerical repetition rules in tuple form.\nThat tuple is then stored in a dict containing this rule name constant.\nEach rule is defined by a repeat which specifies the time interval for\nthe repetition and an advance_by which specifies how many of the time\nintervals the next repetition is going to get scheduled.\nThe repetition rule increases the event start_date and end_date and\nworks seamlessly with the current calendar function.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create_rule",
        "line": 19110,
        "docstring": "IN:\n    repeat - An EV_NUM_RULE, that determines the time unit we'll be\n        using to increment the start_date and end_date\n    advance_by - A positive integer used to determine how many times\n        the desired time unit will be added to start_date and\n        end_date\n        (Default: 1)\n    ev - Event to add this rule to. This will replace exisiting\n        rules of the same key.\n        (Default: None)\n\nRETURNS:\n    a dict containing the specified rule with the appropriate key",
        "function_args": {
          "args": [
            "repeat",
            "advance_by",
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [
            "1",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "update_dates",
        "line": 19146,
        "docstring": "Updates the start_date and end_date to be the next possible dates\nchecked against check_time\n\nIN:\n    rule - a MASNumericalRepeatRule tuple containing the rules for the\n        appropiate update\n    check_time - The time to check and update against\n    ev - Event to update as well. This will update the existing\n        rules of the same key.\n        NOTE: this has priority over start_end_dates\n        (Default: None)\n    start_end_date - tuple of the following format:\n        [0]: start_date\n        [1]: end_date\n        (Default: None)\n\nRETURNS:\n    A tuple containing the new start_date and end_date. If bad\n    values were given, (-1, -1) is returned",
        "function_args": {
          "args": [
            "rule",
            "check_time",
            "ev",
            "start_end_dates"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "evaluate_rule",
        "line": 19241,
        "docstring": "Evaluates the rule given and updates the event's start_date and\nend_date\n\nIN:\n    check_time - The datetime to check the rule against\n    ev - The Event to check and update\n    rule - a MASNumericalRepeatRule tuple containing the rules for the\n        appropiate update\n        If passed in, we use this instead of the given event's rule\n        (Default: None)\n    skip_update - True means we shoudl skip updating the given\n        Event's rule.\n        (Default: False)\n    defval - value to return if sanity checks fail or if the\n        event doesnt have a rule\n        (Default: True)\n\nRETURNS:\n    True if the event date comply to the rule, False if it doesn't",
        "function_args": {
          "args": [
            "check_time",
            "ev",
            "rule",
            "skip_update",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "False",
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASSelectiveRepeatRule": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASSelectiveRepeatRule",
    "class_bases": [
      "object"
    ],
    "line": 19297,
    "docstring": "Static Class used to create selective repetition rules in tuple form.\nThat tuple is then stored in a dict containing this rule name constant.\nEach rule is defined by a list of acceptable values for that rule.\nThe rules then are evaluated against the current datetime.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create_rule",
        "line": 19306,
        "docstring": "NOTE: these values are assumed to be the same as stored in datetime\n\nIN:\n    seconds - list of seconds this rule will match to\n    minutes - list of minutess this rule will match to\n    hours - list of hours this rule will match to\n    days - list of days this rule will match to\n    weekdays - list of weekdays this rule will match to\n    months - list of months this rule will match to\n    years - list of years this rule will match to\n    ev - Event to store this rule in, if not None\n        (Default: None)\n\nRETURNS:\n    a dict containing the specified rules",
        "function_args": {
          "args": [
            "seconds",
            "minutes",
            "hours",
            "days",
            "weekdays",
            "months",
            "years",
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None",
            "None",
            "None",
            "None",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "evaluate_rule",
        "line": 19372,
        "docstring": "Checks if the current_time is valid for the rule\n\nIN:\n    check_time - The time to check against the rule\n    ev - Event to check\n        NOTE: this takes prioriy over the rule param\n        (Default: None)\n    rule - MASSelectiveRepeatRule to check\n        (Default: None)\n    defval - value to return if this event doesn't have a rule\n        to check\n        (Default: True)\n\nRETURNS:\n    A boolean value indicating if the time is in the defined interval",
        "function_args": {
          "args": [
            "check_time",
            "ev",
            "rule",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None",
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASGreetingRule": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASGreetingRule",
    "class_bases": [
      "object"
    ],
    "line": 19434,
    "docstring": "Static Class used to create greeting specific rules in tuple form.\nThat tuple is then stored in a dict containing this rule name constant.\nEach rule is defined by a skip_visual boolean and a special random chance.\nskip_visual is used to store if the greeting should be executed without\nexecuting the normal visual setup, this is useful for special greetings\nrandom_chance is used to define the chance that this\ngreeting can be called",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create_rule",
        "line": 19446,
        "docstring": "IN:\n    ev - Event to create rule for, if passed in\n        (Default: None)\n    skip_visual - A boolean stating wheter we should skip visual\n        initialization\n        (Default: False)\n    random_chance - A float used to determine\n        special chance for this greeting to appear\n        If None, we ignore this property\n        (Default: None)\n    setup_label - label to call right after this greeting is\n        selected. This happens before post_greeting_check.\n        (Default: None)\n    override_type - True will let this greeting override type\n        checks during selection, False will not\n        (Default: False)\n    forced_exp - FULL exp code we want to force\n        for the first spaceroom render\n        (Default: None)\n\nOUT:\n    a dict containing the specified rules\n\nRAISES:\n    ValueError - on invalid input",
        "function_args": {
          "args": [
            "ev",
            "skip_visual",
            "random_chance",
            "setup_label",
            "override_type",
            "forced_exp"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "False",
            "None",
            "None",
            "False",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "evaluate_rule",
        "line": 19525,
        "docstring": "IN:\n    event - the event to evaluate\n    rule - the MASGreetingRule to check it's random_chance\n    defval - value to return if event/rule doesn't exist\n        (Default: True)\n\nRETURNS:\n    True if the random returned 1",
        "function_args": {
          "args": [
            "event",
            "rule",
            "defval"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None",
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "should_override_type",
        "line": 19560,
        "docstring": "IN:\n    ev - the event to evaluate, gets priority\n    rule - the MASGreetingRule to evaluate\n\nRETURNS: True if the rule should override types, false if not",
        "function_args": {
          "args": [
            "ev",
            "rule"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "should_skip_visual",
        "line": 19577,
        "docstring": "IN:\n    event - the event to evaluate, gets priority\n    rule - the MASGreetingRule to evaluate\n\nRETURNS:\n    True if the rule is True to skip_visual",
        "function_args": {
          "args": [
            "event",
            "rule"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "get_setup_label",
        "line": 19599,
        "docstring": "Gets th setup label from the given ev\n\nIN:\n    ev - the event to evalute\n\nRETURNS: setup label, or NOne if not found",
        "function_args": {
          "args": [
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "get_forced_exp",
        "line": 19616,
        "docstring": "Gets the forced exp for an event\n\nIN:\n    ev - the event to evalute\n\nOUT:\n    string with full exp code, or None",
        "function_args": {
          "args": [
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASFarewellRule": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASFarewellRule",
    "class_bases": [
      "object"
    ],
    "line": 19633,
    "docstring": "Static Class used to create farewell specific rules in tuple form.\nThat tuple is then stored in a dict containing this rule name constant.\nEach rule is defined by a special random chance.\nrandom_chance is used to define the 1 in random_chance chance that this\nfarewell can be called",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create_rule",
        "line": 19643,
        "docstring": "IN:\n    random_chance - An int used to determine 1 in random_chance\n        special chance for this farewell to appear\n    ev - Event to create rule for, if passed in\n        (Default: None)\n\nRETURNS:\n    a dict containing the specified rules",
        "function_args": {
          "args": [
            "random_chance",
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "evaluate_rule",
        "line": 19669,
        "docstring": "IN:\n    event - the event to evaluate\n    rule - the MASFarewellRule to check it's random_chance\n\nRETURNS:\n    True if the random returned 1",
        "function_args": {
          "args": [
            "event",
            "rule"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASAffectionRule": {
    "type": "class",
    "class_decorators": [
      "store.mas_utils.deprecated(use_instead='the aff_range property for Events', should_raise=True)"
    ],
    "identifier": "MASAffectionRule",
    "class_bases": [
      "object"
    ],
    "line": 19700,
    "docstring": "NOTE: DEPRECATED\nUse the aff_range property for Events instead\n\nStatic Class used to create affection specific rules in tuple form.\nThat tuple is then stored in a dict containing this rule name constant.\nEach rule is defined by a min and a max determining a range of affection\nto check against.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='the aff_range property for Events', should_raise=True)",
          "staticmethod"
        ],
        "identifier": "create_rule",
        "line": 19713,
        "docstring": "IN:\n    min - An int representing the minimal(inclusive) affection required\n        for the event to be available, if None is passed is assumed\n        that there's no minimal affection\n    max - An int representing the maximum(inclusive) affection required\n        for the event to be available, if None is passed is assumed\n        that there's no maximum affection\n    ev - Event to create rule for, if passed in\n        (Default: None)\n\nRETURNS:\n    a dict containing the specified rules",
        "function_args": {
          "args": [
            "min",
            "max",
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "store.mas_utils.deprecated(use_instead='the aff_range property for Events', should_raise=True)",
          "staticmethod"
        ],
        "identifier": "evaluate_rule",
        "line": 19744,
        "docstring": "IN:\n    event - the event to evaluate\n    rule - the MASAffectionRule to check against\n    affection - the affection to check the rule against\n\nRETURNS:\n    True if the current affection is inside the rule range",
        "function_args": {
          "args": [
            "event",
            "rule",
            "affection",
            "noRuleReturn"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None",
            "None",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASPriorityRule": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASPriorityRule",
    "class_bases": [
      "object"
    ],
    "line": 19777,
    "docstring": "Static class used to create priority rules. Priority rules are just\nintegers that determine priority of somehting.\nLower numbers mean higher priority.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create_rule",
        "line": 19786,
        "docstring": "IN:\n    priority - the priority to set.\n        If None is passed in, we use the default priority value.\n    ev - Event to add this rule to. This will replace existing\n        rules of the same key.\n        (Default: None)",
        "function_args": {
          "args": [
            "priority",
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "get_priority",
        "line": 19812,
        "docstring": "Gets the priority of the given event.\n\nIN:\n    ev - event to get priority of\n\nRETURNS the priority of the given event, or def if no priorityrule\n    is found",
        "function_args": {
          "args": [
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASWeightRule": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASWeightRule",
    "class_bases": [
      "object"
    ],
    "line": 19825,
    "docstring": "Static class used to create probability rules.\n\nProbability rules are just integers that determine the weight of something being selected.\n\nWeights must be greater than 1\n\nThis value is designed to be used with mas_utils.weightedChoice, and acts essentially akin to duplicating\nthe choice `probability` times in the list",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "create_rule",
        "line": 19839,
        "docstring": "IN:\n    weight - the weight to set.\n        If None is passed in, we use the default weight value.\n        NOTE: If it is below 1 weight, is is set to 1\n\n    ev - Event to add this rule to. This will replace existing\n        rules of the same key.\n        (Default: None)",
        "function_args": {
          "args": [
            "cls",
            "weight",
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "get_weight",
        "line": 19869,
        "docstring": "Gets the weight of the given event.\n\nIN:\n    ev - event to get weight of\n\nOUT:\n    The weight of the given event, or def if no ProbilityRule is found",
        "function_args": {
          "args": [
            "cls",
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASProbabilityRule": {
    "type": "class",
    "class_decorators": [
      "store.mas_utils.deprecated(use_instead='MASWeightRule')"
    ],
    "identifier": "MASProbabilityRule",
    "class_bases": [
      "object"
    ],
    "line": 19883,
    "docstring": "Deprecated version, use MASWeightRule",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "staticmethod",
          "store.mas_utils.deprecated(use_instead='MASWeightRule.create_rule')"
        ],
        "identifier": "create_rule",
        "line": 19889,
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "kwargs",
          "var_arg": "args"
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod",
          "store.mas_utils.deprecated(use_instead='MASWeightRule.get_weight')"
        ],
        "identifier": "get_probability",
        "line": 19894,
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": "kwargs",
          "var_arg": "args"
        }
      }
    ]
  },
  "MASTimedeltaRepeatRule": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASTimedeltaRepeatRule",
    "class_bases": [
      "object"
    ],
    "line": 19898,
    "docstring": "Static class used to create repeat rules.\nTimedelta repeat rules allow events to be repeated only every 'timedelta' since their last seen.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create_rule",
        "line": 19904,
        "docstring": "IN:\n    timedelta - the timedelta to set\n\n    ev - the event to add this rule to\n        (Default: None)\n\nOUT:\n    dict containing the rule",
        "function_args": {
          "args": [
            "timedelta",
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "evaluate_rule",
        "line": 19933,
        "docstring": "Evaluates a MASTimedeltaRepeatRule rule\n\nIN:\n    event - the event to evaluate\n    rule - the timedelta of the MASTimedeltaRepeatRule to check against,\n        if None, we get it from the event\n        (Default: None)\n    now - time to check against, if None, datetime.datetime.now() is used\n        (Default: None)\n\nOUT:\n    boolean whether or not the event's passed",
        "function_args": {
          "args": [
            "event",
            "rule",
            "now"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "get_procs": {
    "type": "function",
    "function_decorators": [],
    "identifier": "get_procs",
    "line": 20003,
    "docstring": "Retrieves list of processes running right now!\n\nOnly works for windows atm\n\nRETURNS: list of running processes, or an empty list if\nwe couldn't do that",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "is_running": {
    "type": "function",
    "function_decorators": [],
    "identifier": "is_running",
    "line": 20024,
    "docstring": "Checks if a process in the given list is currently running.\n\nRETURNS: True if a proccess in proc_list is running, False otherwise",
    "function_args": {
      "args": [
        "proc_list"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "is_apology_present": {
    "type": "function",
    "function_decorators": [],
    "identifier": "is_apology_present",
    "line": 20041,
    "docstring": "Checks if the 'imsorry' file is in the characters folder.\n\nOUT:\n    True is apology is present, False otherwise",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_cvToHM": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_cvToHM",
    "line": 20053,
    "docstring": "Converts the given minutes into hour / minutes\n\nIN:\n    mins - number of minutes\n\nRETURNS:\n    tuple of the following format:\n        [0] - hours\n        [1] - minutes",
    "function_args": {
      "args": [
        "mins"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isSTtoAny": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isSTtoAny",
    "line": 20068,
    "docstring": "Checks if the given time is within this range:\n_suntime <= _time < (_hour, _min)\n\nNOTE: upper bound is limited to midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n    _suntime - suntime to use for lower bound\n        NOTE: suntimes are given in minutes\n    _hour - hour to use for upper bound\n    _min - minute to use for upper bound\n\nRETURNS:\n    True if the given time is within bounds of the given suntime and\n        given hour / mins, False otherwise",
    "function_args": {
      "args": [
        "_time",
        "_suntime",
        "_hour",
        "_min"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isSRtoAny": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isSRtoAny",
    "line": 20092,
    "docstring": "Checks if the given time is within Sunrise time to the given _hour\nand _minute\n\nNOTE: upper bound is limited to midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n    _hour - hour to use for upper bound\n    _min - minute to use for upper bound\n        (Default: 0)\n\nRETURNS:\n    True if the given time is whithin bounds of sunrise and the given\n    hour / mins, False otherwise",
    "function_args": {
      "args": [
        "_time",
        "_hour",
        "_min"
      ],
      "pos_only_args": [],
      "defaults": [
        "0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isSStoAny": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isSStoAny",
    "line": 20113,
    "docstring": "Checks if the given time is within sunset to the given _hour and minute\n\nNOTE: upper bound is limited to midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n    _hour - hour to use for upper bound\n    _min - minute to use for upper bound\n        (Default: 0)\n\nRETURNS:\n    True if the given time is within bounds of sunset and the given\n    hour/min, False otherwise",
    "function_args": {
      "args": [
        "_time",
        "_hour",
        "_min"
      ],
      "pos_only_args": [],
      "defaults": [
        "0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMNtoAny": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMNtoAny",
    "line": 20133,
    "docstring": "Checks if the given time is within midnight to the given hour/min.\n\nNOTE: upper bound is 24 midnight\nNOTE: lower bound is 0 midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n    _hour - hour to use for upper bound\n    _min - minute to use for upper bound\n        (Default: 0)\n\nRETURNS:\n    True if the given time is within bounds of midnight and the given\n    hour/min, False otherwise",
    "function_args": {
      "args": [
        "_time",
        "_hour",
        "_min"
      ],
      "pos_only_args": [],
      "defaults": [
        "0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isNtoAny": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isNtoAny",
    "line": 20154,
    "docstring": "Checks if the given time is within noon to the given hour/min.\n\nNOTE: upper bound is 24 midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n    _hour - hour to use for upper bound\n    _min - minute to use for upper bound\n        (Default: 0)\n\nRETURNS:\n    True if the given time is within bounds of noon and the given hour\n    /min, False otherwise",
    "function_args": {
      "args": [
        "_time",
        "_hour",
        "_min"
      ],
      "pos_only_args": [],
      "defaults": [
        "0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isAnytoST": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isAnytoST",
    "line": 20174,
    "docstring": "Checks if the given time is within this range:\n(_hour, _min) <= _time < _suntime\n\nNOTE: lower bound is limited to midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n    _hour - hour to use for lower bound\n    _min - minute to use for lower bound\n    _suntime - suntime to use for upper bound\n        NOTE: suntimes are given in minutes\n\nRETURNS:\n    True if the given time is within bounds of the given hour / mins\n    and the given suntime, false Otherwise",
    "function_args": {
      "args": [
        "_time",
        "_hour",
        "_min",
        "_suntime"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isAnytoSR": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isAnytoSR",
    "line": 20198,
    "docstring": "Checks if the given time is within a given hour and minute to sunrise\ntime\n\nNOTE: lower bound is limited to midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n    _hour - hour to use for lower bound\n    _min - minute to use for lower bound\n        (Default: 0)\n\nRETURNS:\n    True if the given time is within the bounds of the given hour/min\n    and sunrise, False otherwise",
    "function_args": {
      "args": [
        "_time",
        "_hour",
        "_min"
      ],
      "pos_only_args": [],
      "defaults": [
        "0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isAnytoSS": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isAnytoSS",
    "line": 20219,
    "docstring": "Checks if the given time is within a given hour/min to sunset time\n\nNOTE: lower bound is limited to midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n    _hour - hour to use for lower bound\n    _min - minute to use for lower bound\n        (Default: 0)\n\nRETURNS:\n    True if the given time is within the bounds of the given hour/min\n    and sunset, False otherwise",
    "function_args": {
      "args": [
        "_time",
        "_hour",
        "_min"
      ],
      "pos_only_args": [],
      "defaults": [
        "0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isAnytoMN": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isAnytoMN",
    "line": 20239,
    "docstring": "Checks if the given time is within a given hour/min to midnight (next\nday)\n\nNOTE: lower bound is limited to midnight\nNOTE: upper bound is 24 - midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n    _hour - hour to use for lower bound\n    _min - mintue to use for lower bound\n        (DEfault: 0)\n\nRETURNS:\n    True if the given time is within the bounds of the given hour/min\n    and midnight, False otherwise",
    "function_args": {
      "args": [
        "_time",
        "_hour",
        "_min"
      ],
      "pos_only_args": [],
      "defaults": [
        "0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isAnytoN": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isAnytoN",
    "line": 20261,
    "docstring": "Checks if the given time is within a given hour/min to noon.\n\nNOTE: lower bound is limited to midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n    _hour - hour to use for lower bound\n    _min - minute to use for lower bound\n        (Default: 0)\n\nRETURNS:\n    True if the given tim eis within the bounds of the given hour/min\n    and Noon, False otherwise",
    "function_args": {
      "args": [
        "_time",
        "_hour",
        "_min"
      ],
      "pos_only_args": [],
      "defaults": [
        "0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMNtoSR": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMNtoSR",
    "line": 20281,
    "docstring": "Checks if the given time is within midnight to sunrise\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n\nRETURNS: True if the given time is within midnight to sunrise",
    "function_args": {
      "args": [
        "_time"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isSRtoN": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isSRtoN",
    "line": 20294,
    "docstring": "Checks if the given time is within sunrise to noon\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n\nRETURNS: True if the given time is witin sunrise to noon",
    "function_args": {
      "args": [
        "_time"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isNtoSS": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isNtoSS",
    "line": 20307,
    "docstring": "Checks if the given time is within noon to sunset\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n\nRETURNS: True if the given time is within noon to sunset",
    "function_args": {
      "args": [
        "_time"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isSStoMN": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isSStoMN",
    "line": 20320,
    "docstring": "Checks if the given time is within sunset to midnight\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n\nRETURNS: True if the given time is within sunset to midnight",
    "function_args": {
      "args": [
        "_time"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isSunny": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isSunny",
    "line": 20333,
    "docstring": "DEPRECATED\n        Use mas_isDay instead",
    "function_args": {
      "args": [
        "_time"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isDay": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isDay",
    "line": 20341,
    "docstring": "Checks if the sun would be up during the given time\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n\nRETURNS: True if it is day time during the given time",
    "function_args": {
      "args": [
        "_time"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isDayNow": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isDayNow",
    "line": 20355,
    "docstring": "Checks if the sun would be up right now\n\nRETURNS: True if the sun would be up now, False if not",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isNight": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isNight",
    "line": 20364,
    "docstring": "Checks if the sun is down during the given time\n\nIN:\n    _time - current time to check\n        NOTE: datetime.time object\n\nRETURNS: True if it the sun is down during the given time",
    "function_args": {
      "args": [
        "_time"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isNightNow": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isNightNow",
    "line": 20377,
    "docstring": "Checks if the sun is down right now\n\nRETURNS: True if it is night now, False if not",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_cvToDHM": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_cvToDHM",
    "line": 20386,
    "docstring": "Converts the given minutes into a displayable hour / minutes\nHH:MM\nNOTE: 24 hour format only\n\nIN:\n    mins - number of minutes\n\nRETURNS:\n    string time perfect for displaying",
    "function_args": {
      "args": [
        "mins"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_genDateRange": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_genDateRange",
    "line": 20402,
    "docstring": "Generates a list of datetime.date objects with the given range.\n\nNOTE: exclusive:\n\nIN:\n    _start - starting date of range\n    _end - ending date of range\n\nRETURNS: list of datetime.date objects between the _start and _end,\n    exclusive. May be empty if invalid start and end dates are given",
    "function_args": {
      "args": [
        "_start",
        "_end"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_EVgenYDT": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_EVgenYDT",
    "line": 20430,
    "docstring": "Creates a valid start or end datetime for Event creation, given the\nstart and end datetimes.\n\nNOTE: this only modifies year. Build a custom function for something\nmore precise.\n\nIN:\n    _start - datetime that begins this period\n    _end - datetime that ends this period\n    for_start - True if we want the next valid starting datetime\n        False if we want the next valid ending datetime\n\nRETURNS: valid datetime for Event creation",
    "function_args": {
      "args": [
        "_start",
        "_end",
        "for_start"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_EVgenYD": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_EVgenYD",
    "line": 20454,
    "docstring": "Variation of mas_EVgenYDT that accepts datetime.dates. This still\nreturns datetimes though.\n\nIN:\n    _start - date that begins this period\n    _end - date that ends this period\n    for_start - True if we want the next valid starting datetime\n        False if we want the next valid ending datetime\n    _time - time to use with the dates.\n        (Default: datetime.time.min)\n\nRETURNS: valid datetime for Event creation",
    "function_args": {
      "args": [
        "_start",
        "_end",
        "for_start",
        "_time"
      ],
      "pos_only_args": [],
      "defaults": [
        "datetime.time.min"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isSpecialDay": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isSpecialDay",
    "line": 20485,
    "docstring": "Checks if today is a special day(birthday, anniversary or holiday)\n\nRETURNS:\n    boolean indicating if today is a special day.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_maxPlaytime": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_maxPlaytime",
    "line": 20503,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isInDateRange": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isInDateRange",
    "line": 20507,
    "docstring": "Checks if the given subject date is within  range of the given start\nend dates.\n\nNOTE: this does year normalization, so we only compare months and days\nNOTE: we do NOT compare years\n\nIN:\n    subject - subject date to compare\n    _start - starting date of the range\n    _end - ending date of the range\n    start_inclusive - True if start date should be inclusive\n        (Derfault: True)\n    end_inclusive - True if end date should be inclusive\n        (Default: False)\n\nRETURNS: True if the given subject is within date range, False if not",
    "function_args": {
      "args": [
        "subject",
        "_start",
        "_end",
        "start_inclusive",
        "end_inclusive"
      ],
      "pos_only_args": [],
      "defaults": [
        "True",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "get_pos": {
    "type": "function",
    "function_decorators": [],
    "identifier": "get_pos",
    "line": 20555,
    "docstring": "Gets the current position in what's playing on the provided channel\n\nIN:\n    channel - The channel to get the sound position for\n        (Default: 'music')",
    "function_args": {
      "args": [
        "channel"
      ],
      "pos_only_args": [],
      "defaults": [
        "'music'"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "delete_all_saves": {
    "type": "function",
    "function_decorators": [],
    "identifier": "delete_all_saves",
    "line": 20569,
    "docstring": "Deletes all saved states",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_delete_all_chrs": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_delete_all_chrs",
    "line": 20576,
    "docstring": "Deletes all chr files under /characters/ folder. Any encountered errors\nwill be printed to log.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "pause": {
    "type": "function",
    "function_decorators": [],
    "identifier": "pause",
    "line": 20584,
    "docstring": "Pauses for the given amount of time\n\nIN:\n    time - The time to pause for. If None, a pause until the user progresses is assumed\n        (Default: None)",
    "function_args": {
      "args": [
        "time"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "enumerate_steam": {
    "type": "function",
    "function_decorators": [],
    "identifier": "enumerate_steam",
    "line": 20605,
    "docstring": "Gets installed steam application IDs from the main steam install directory\n\nOUT:\n    List of application IDs\n\nNOTE: Does NOT work if the user has edited their game install directory for windows at all",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASGraphicsMenu": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASGraphicsMenu",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 20667,
    "docstring": "Custom graphics menu",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 20702,
        "docstring": "Constructor",
        "function_args": {
          "args": [
            "self",
            "curr_renderer"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_xcenter",
        "line": 20845,
        "docstring": "Returns the appropriate X location to center an object with the\ngiven width\n\nIN:\n    v_width - width of the view\n    width - width of the object to center\n\nRETURNS:\n    appropiate X coord to center",
        "function_args": {
          "args": [
            "self",
            "v_width",
            "width"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_button_select",
        "line": 20860,
        "docstring": "Goes through the list of buttons and return the first non-None\nvalue returned\n\nRETURNS:\n    first non-none value returned",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 20876,
        "docstring": "RENDER",
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 20927,
        "docstring": "EVENT",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASUpdaterDisplayable": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASUpdaterDisplayable",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 20968,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 21045,
        "docstring": "Constructor",
        "function_args": {
          "args": [
            "self",
            "update_link",
            "start_state"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_checkUpdate",
        "line": 21218,
        "docstring": "Does the purely logical update checking\nThis will set the appropriate states",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_handleRedirect",
        "line": 21255,
        "docstring": "Attempts to connect to the redircted url\nIN:\n    new_url - the redirect we want to connect to\nReturns read_json if we got a connection, Nnone otherwise",
        "function_args": {
          "args": [
            "new_url"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "cancel_value",
        "line": 21294,
        "docstring": "Returns appropriate cancel value that should be returned upon\na cancel click.\n\nRETURNS: an appropriate RET_VAL_*_CANCEL value.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_sendRequest",
        "line": 21307,
        "docstring": "Sends out the http request and returns a response and stuff\nNOTE: designed to be called as a background thread\nASSUMES:\n    _thread_result\n        appends appropriate state for use",
        "function_args": {
          "args": [
            "update_link",
            "thread_result"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 21435,
        "docstring": "RENDER",
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 21554,
        "docstring": "EVENT",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_isSpring": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isSpring",
    "line": 21608,
    "docstring": "Checks if given date is during spring\niff none passed in, then we assume today\n\nNote: If persistent._mas_pm_live_north_hemisphere is none, we assume northern hemi\n\nRETURNS:\n    boolean showing whether or not it's spring right now",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isSummer": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isSummer",
    "line": 21628,
    "docstring": "Checks if given date is during summer\niff none passed in, then we assume today\n\nNote: If persistent._mas_pm_live_north_hemisphere is none, we assume northern hemi\n\nRETURNS:\n    boolean showing whether or not it's summer right now",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isFall": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isFall",
    "line": 21648,
    "docstring": "Checks if given date is during fall\niff none passed in, then we assume today\n\nNote: If persistent._mas_pm_live_north_hemisphere is none, we assume northern hemi\n\nRETURNS:\n    boolean showing whether or not it's fall right now",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isWinter": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isWinter",
    "line": 21668,
    "docstring": "Checks if given date is during winter\niff none passed in, then we assume today\n\nNote: If persistent._mas_pm_live_north_hemisphere is none, we assume northern hemi\n\nRETURNS:\n    boolean showing whether or not it's winter right now",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "clearUpdateStructs": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='mas_versions.clear', should_raise=True)"
    ],
    "identifier": "clearUpdateStructs",
    "line": 21699,
    "docstring": "DEPRECATED\n        Use mas_versions.clear instead",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_SELisUnlocked": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_SELisUnlocked",
    "line": 21712,
    "docstring": "Checks if the given sprite item is unlocked\n\nIN:\n    _sprite_item - sprite object to check\n\nRETURNS: True if the given sprite item is unlocked, false otherwise",
    "function_args": {
      "args": [
        "_sprite_item"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_filterUnlockGroup": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_filterUnlockGroup",
    "line": 21731,
    "docstring": "Unlock selector topic for the given group if appropriate number of\nselector objects are unlocked.\n\nIN:\n    sp_type - sprite type to filter on\n    group - group to use for filtering selectors\n    unlock_min - minimum number that has to be unlocked for us to\n        unock the selector topic.\n        IF None, then we use the amount provided by the PROMPT_MAP\n        (Default: None)\n    allow_lock - True will lock the selector topic if it fails to be\n        unlocked.\n        (Default: False)",
    "function_args": {
      "args": [
        "sp_type",
        "group",
        "unlock_min",
        "allow_lock"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hasUnlockedClothesWithExprop": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hasUnlockedClothesWithExprop",
    "line": 21785,
    "docstring": "Checks if we have unlocked clothes with a specific exprop\n\nIN:\n    exprop - exprop to look for\n    value - value the exprop should be. Set to None to ignore.\n    (Default: None)\n\nOUT:\n    boolean:\n        True if we have unlocked clothes with the exprop + value provided\n        False otherwise",
    "function_args": {
      "args": [
        "exprop",
        "value"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hasLockedClothesWithExprop": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hasLockedClothesWithExprop",
    "line": 21805,
    "docstring": "Checks if we have locked clothes with a specific exprop\n\nIN:\n    exprop - exprop to look for\n    value - value the exprop should be. Set to None to ignore.\n    (Default: None)\n\nOUT:\n    boolean:\n        True if we have locked clothes with the exprop + value provided\n        False otherwise",
    "function_args": {
      "args": [
        "exprop",
        "value"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASSelectableImageButtonDisplayable": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASSelectableImageButtonDisplayable",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 21826,
    "docstring": "Custom button for the selectable items.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 21858,
        "docstring": "Constructor for this displayable\n\nIN:\n    selectable - the selectable object we want to encapsulate\n    select_map - dict containing group keys of previously selected\n        objects.\n    viewport_bounds - tuple of the following format:\n        [0]: xpos of the viewport upper left\n        [1]: ypos of the viewport upper left\n        [2]: width of the viewport\n        [3]: height of the viewport\n        [4]: border size\n    mailbox - dict to send messages to outside from this\n        displayable.\n        (Default: None)\n    multi_select - True means we can select more than one item.\n        False otherwise\n        (Default: False)\n    disable_type - pass in a disable constant to disable this item\n        for the specified reason.\n        (Default: 0 - DISB_NONE)",
        "function_args": {
          "args": [
            "self",
            "_selectable",
            "select_map",
            "viewport_bounds",
            "mailbox",
            "multi_select",
            "disable_type"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "False",
            "store.mas_selspr.DISB_NONE"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_blit_bottom_frame",
        "line": 21984,
        "docstring": "bliting the bottom frames\n\nIN:\n    r - render to blit to\n    _renders - list of bottom renders to blit",
        "function_args": {
          "args": [
            "self",
            "r",
            "_renders"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_blit_top_frame",
        "line": 21996,
        "docstring": "bliting the top frames\n\nIN:\n    r - render to blit to\n    _renders - list of top renders to blit\n    _disp_name - list of display name renders to blit",
        "function_args": {
          "args": [
            "self",
            "r",
            "_renders",
            "_disp_name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_check_display_name",
        "line": 22021,
        "docstring": "Checks the given display name to see if it fits within the frame\nbounds. We will have to adjust if not\n\nIN:\n    _display_name_text - display name as text\n\nRETURNS:\n    the rendered display name rendre if it fits, None if not.",
        "function_args": {
          "args": [
            "self",
            "_display_name_text",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_check_render_split",
        "line": 22043,
        "docstring": "Checks the given line to see if it fits within a line render.\n\nNOTE: adds hypen and multiple lines if the line is too long\n\nIN:\n    line - the line we want to check for render\n    lines_list - list to add lines to\n    st - st for renpy render\n    at - at for renpy render\n\nOUT:\n    lines_list - list with lines added",
        "function_args": {
          "args": [
            "self",
            "line",
            "lines_list",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_display_name",
        "line": 22067,
        "docstring": "Returns the text object for the display name.\n\nIN:\n    selected - True if selected, False if not\n    _text - actual text to convert into display name obj\n\nRETURNS:\n    the text object for the display name",
        "function_args": {
          "args": [
            "self",
            "selected",
            "_text"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_hover",
        "line": 22093,
        "docstring": "Does hover actions, which include playing hover sound and sending\nhover msg if appropriate",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_hypen_render_split",
        "line": 22121,
        "docstring": "Splits a line via hypen.\n\nWe do a reverse through the string to find appropriate render\nsizes.\n\nNOTE: we add renders to self.item_name\n\nIN:\n    line - line to split\n    lines_list - list to add lines to\n    st - st for renpy render\n    at - at for renpy render\n    tokens - current list of tokens, if we are in the token mode.\n        Insert the leftover token word at position 1.\n        (Default: None)\n\nOUT:\n    lines_list - list with lines added",
        "function_args": {
          "args": [
            "self",
            "line",
            "lines_list",
            "st",
            "at",
            "tokens"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_is_over_me",
        "line": 22168,
        "docstring": "Returns True if the given x, y is over us.\nThis also handles if the mouse is past the viewport bounds.\n\nIN:\n    x - x coord relative to upper left of this displayable\n    y - y coord relative to upper left of this displayable",
        "function_args": {
          "args": [
            "self",
            "x",
            "y"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_rand_select_dlg",
        "line": 22186,
        "docstring": "Randomly selects dialogue from the given list\n\nIN:\n    dlg_list - list to select from\n\nASSUMES the list is not empty",
        "function_args": {
          "args": [
            "self",
            "dlg_list"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_render_bottom_frame",
        "line": 22198,
        "docstring": "Renders the bottom frames, returns a list of the renders in order\nof bliting.\n\nIN:\n    hover - True means we are hovering (or are selected), false\n        otherwise\n\nRETURNS:\n    list of renders, in correct blit order",
        "function_args": {
          "args": [
            "self",
            "hover",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_render_bottom_frame_piece",
        "line": 22222,
        "docstring": "Renders a single bottom frame piece and returns it",
        "function_args": {
          "args": [
            "self",
            "piece",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_render_display_name",
        "line": 22234,
        "docstring": "Renders display name\n\nIN:\n    hover - True if selected, False if not\n    _text - actual text to render\n    st - st for renpy render\n    at - at for renpy render\n\nRETURNS: rendered display name",
        "function_args": {
          "args": [
            "self",
            "hover",
            "_text",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_render_display_name_raw",
        "line": 22252,
        "docstring": "Renders display name, given a text object\n\nIN:\n    disp_text - text object to display\n    st - st for renpy render\n    at - at for renpy render\n\nRETURNS: rendered display name",
        "function_args": {
          "args": [
            "self",
            "disp_text",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_render_display_name_test",
        "line": 22271,
        "docstring": "Renders display name using testing width. (1000)\n\nIN:\n    disp_text - the text to show\n    st - st for renpy render\n    at - at for renpy render\n\nRETURNS: rendered display name",
        "function_args": {
          "args": [
            "self",
            "disp_text",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_render_top_frame",
        "line": 22284,
        "docstring": "Renders the top renders, returns a list of the renders in order of\nbliting.\n\nIN:\n    hover - True means we are hovering (or are selected\n\nRETURNS:\n    list of renders, in correct blit order",
        "function_args": {
          "args": [
            "self",
            "hover",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_render_top_frame_piece",
        "line": 22311,
        "docstring": "Renders a top frame piece. No Text, please",
        "function_args": {
          "args": [
            "self",
            "piece",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_core_select",
        "line": 22323,
        "docstring": "does selection, but without gui elements.\nCall this to select programatically.\nDOES NOT CHECK IF ALREADY SELECTED.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_send_select_dlg",
        "line": 22343,
        "docstring": "Sends select dialogue as appropraite to mailbox",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_select",
        "line": 22376,
        "docstring": "Makes this item a selected item. Also handles other logic realted\nto selecting this.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_select_disabled",
        "line": 22407,
        "docstring": "Called when selecting a disabled item.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_send_first_select_text",
        "line": 22416,
        "docstring": "Sends first select text to mailbox\n\nASSUMES first select text exists",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_send_disabled_select_text",
        "line": 22428,
        "docstring": "Sends disabled select text to mailbox\n\nASSUMES we are disabled",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_send_generic_select_text",
        "line": 22441,
        "docstring": "Sends generic select text to mailbox",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_send_hover_text",
        "line": 22451,
        "docstring": "Sends hover text to mailbox\n\nASSUMES hover text exists",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_send_msg_disp_text",
        "line": 22463,
        "docstring": "Sends text message to mailbox.\n\nIN:\n    msg - text message to send",
        "function_args": {
          "args": [
            "self",
            "msg"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_send_select_text",
        "line": 22472,
        "docstring": "Sends the select text to mailbox\n\nASSUMES select text exists",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_setup_display_name",
        "line": 22484,
        "docstring": "Sets up item_name and item_name_hover with list of text display\nobjects, ready for render.\n\nIN:\n    st - st for renpy render\n    at - at for renpy render",
        "function_args": {
          "args": [
            "self",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_split_render",
        "line": 22532,
        "docstring": "Attempts to split the displayname, then checks renders for it\nto see if it fits within the bounds.\n\nNOTE: this will add renders to self.item_name\n\nIN:\n    disp_name - display name to split\n    st - st for renpy render\n    at - at for renpy render\n\nRETURNS:\n    list of string lines that fit when rendered.",
        "function_args": {
          "args": [
            "self",
            "disp_name",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_split_render_tokens",
        "line": 22555,
        "docstring": "Token version of _split_render\n\nIN:\n    tokens - tokens to handle with\n    lines_list - list of string lines that we rendered\n    st - st for renpy render\n    at - at for renpy render\n    loop - True if we are recursively calling this.\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "tokens",
            "lines_list",
            "st",
            "at",
            "loop"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_token_render_split",
        "line": 22583,
        "docstring": "Uses the given tokens to determine best fit render options for\nthose tokens.\n\nNOTE: we also do self.item_name\n\nIN:\n    tokens - list of string tokens to apply best fit\n    lines_list - list to add lines to\n    st - st for renpy render\n    at - at for renpy render\n\nOUT:\n    lines_list - list with lines added",
        "function_args": {
          "args": [
            "self",
            "tokens",
            "lines_list",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 22632,
        "docstring": "EVENT. We only want to handle 2 cases:\n    MOUSEMOTION + hover is over us\n    MOUSEDOWN + mouse is over us",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 22684,
        "docstring": "Render. we want the button here.",
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "remove_seen_labels": {
    "type": "function",
    "function_decorators": [],
    "identifier": "remove_seen_labels",
    "line": 22776,
    "function_args": {
      "args": [
        "pool"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_randomSelectAndRemove": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_randomSelectAndRemove",
    "line": 22790,
    "docstring": "Randomly selects an element from the given list\nThis also removes the element from that list.\n\nIN:\n    sel_list - list to select from\n\nRETURNS:\n    selected element",
    "function_args": {
      "args": [
        "sel_list"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_randomSelectAndPush": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_randomSelectAndPush",
    "line": 22810,
    "docstring": "Randomly selects an element from the the given list and pushes the event\nThis also removes the element from that list.\n\nNOTE: this does sensitivy checks\n\nIN:\n    sel_list - list to select from",
    "function_args": {
      "args": [
        "sel_list"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_insertSort": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_insertSort",
    "line": 22835,
    "docstring": "Performs a round of insertion sort.\nThis does least to greatest sorting\n\nIN:\n    sort_list - list to insert + sort\n    item - item to sort and insert\n    key - function to call using the given item to retrieve sort key\n\nOUT:\n    sort_list - list with 1 additonal element, sorted",
    "function_args": {
      "args": [
        "sort_list",
        "item",
        "key"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_splitSeenEvents": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_splitSeenEvents",
    "line": 22851,
    "docstring": "Splits the seen_list into seena nd most seen\n\nIN:\n    sorted_seen - list of seen events, sorted by shown_count\n\nRETURNS:\n    tuple of thef ollowing format:\n    [0] - seen list of events\n    [1] - most seen list of events",
    "function_args": {
      "args": [
        "sorted_seen"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_splitRandomEvents": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_splitRandomEvents",
    "line": 22891,
    "docstring": "Splits the given random events dict into 2 lists of events\nNOTE: cleans the seen list\n\nRETURNS:\n    tuple of the following format:\n    [0] - unseen list of events\n    [1] - seen list of events, sorted by shown_count",
    "function_args": {
      "args": [
        "events_dict"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_buildEventLists": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_buildEventLists",
    "line": 22922,
    "docstring": "Builds the unseen / most seen / seen event lists\n\nRETURNS:\n    tuple of the following format:\n    [0] - unseen list of events\n    [1] - seen list of events\n    [2] - most seen list of events\n\nASSUMES:\n    evhand.event_database\n    mas_events_built",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_buildSeenEventLists": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_buildSeenEventLists",
    "line": 22955,
    "docstring": "Builds the seen / most seen event lists\n\nRETURNS:\n    tuple of the following format:\n    [0] - seen list of events\n    [1] - most seen list of events\n\nASSUMES:\n    evhand.event_database",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_rebuildEventLists": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_rebuildEventLists",
    "line": 22985,
    "docstring": "Rebuilds the unseen, seen and most seen event lists.\n\nASSUMES:\n    mas_rev_unseen - unseen list\n    mas_rev_seen - seen list\n    mas_rev_mostseen - most seen list",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASTopicLabelException": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASTopicLabelException",
    "class_bases": [
      "Exception"
    ],
    "line": 22999,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 23000,
        "function_args": {
          "args": [
            "self",
            "msg"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__str__",
        "line": 23002,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "Dev_DynamicACSBattery": {
    "type": "class",
    "class_decorators": [],
    "identifier": "Dev_DynamicACSBattery",
    "class_bases": [
      "store.MASFilterable"
    ],
    "line": 23189,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 23190,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_bat_lvl",
        "line": 23197,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "gen_ims",
        "line": 23203,
        "function_args": {
          "args": [
            "self",
            "bat_lvl"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 23213,
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "per_interact",
        "line": 23237,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "visit",
        "line": 23241,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_enableMouseTracking": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_enableMouseTracking",
    "line": 23330,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_disableMouseTracking": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_disableMouseTracking",
    "line": 23335,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMouseTrackingVisible": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMouseTrackingVisible",
    "line": 23341,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASMouseTracker": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASMouseTracker",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 23345,
    "docstring": "Custom mouse tracker displayable",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 23351,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 23356,
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 23362,
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASRenderInfo": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASRenderInfo",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 23382,
    "docstring": "custom screen that shows render information",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 23388,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 23394,
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 23402,
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_calDropOverlayShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_calDropOverlayShield",
    "line": 23485,
    "docstring": "RUNTIME ONLY\n        Enables input for the calendar overlay",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_calHideOverlay": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_calHideOverlay",
    "line": 23492,
    "docstring": "RUNTIME ONLY\n        Hides the calendar overlay",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_calIsVisible_ovl": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_calIsVisible_ovl",
    "line": 23499,
    "docstring": "RETURNS: True if the calendar ovelray is visible, False otherwise",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_calRaiseOverlayShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_calRaiseOverlayShield",
    "line": 23506,
    "docstring": "RUNTIME ONLY\n        Disables input for the calendar overlay",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_calShowOverlay": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_calShowOverlay",
    "line": 23513,
    "docstring": "RUNTIME ONLY\n        Shows the calendar overlay",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isLeapYear": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isLeapYear",
    "line": 23520,
    "docstring": "Checks if the given year is a leap year, accounting for the error\n\nIN:\n    year - int, year to check\n\nOUT:\n    bool - Whether or not the given year is a leap year",
    "function_args": {
      "args": [
        "year"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "grant_xp": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(should_raise=True)"
    ],
    "identifier": "grant_xp",
    "line": 23541,
    "docstring": "DEPRECATED\n        This does not do anything anymore. Around for compatibility\n        purposes",
    "function_args": {
      "args": [
        "experience"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "get_level": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(should_raise=True)"
    ],
    "identifier": "get_level",
    "line": 23549,
    "docstring": "DEPRECATED\n        This does not do anything anymore. Around for compatibility purposes",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_FreezeGoodAffExp": {
    "type": "function",
    "function_decorators": [
      "mas_utils.deprecated()"
    ],
    "identifier": "mas_FreezeGoodAffExp",
    "line": 23575,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_FreezeBadAffExp": {
    "type": "function",
    "function_decorators": [
      "mas_utils.deprecated()"
    ],
    "identifier": "mas_FreezeBadAffExp",
    "line": 23579,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_FreezeBothAffExp": {
    "type": "function",
    "function_decorators": [
      "mas_utils.deprecated()"
    ],
    "identifier": "mas_FreezeBothAffExp",
    "line": 23583,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_UnfreezeBadAffExp": {
    "type": "function",
    "function_decorators": [
      "mas_utils.deprecated()"
    ],
    "identifier": "mas_UnfreezeBadAffExp",
    "line": 23587,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_UnfreezeGoodAffExp": {
    "type": "function",
    "function_decorators": [
      "mas_utils.deprecated()"
    ],
    "identifier": "mas_UnfreezeGoodAffExp",
    "line": 23591,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_UnfreezeBothExp": {
    "type": "function",
    "function_decorators": [
      "mas_utils.deprecated()"
    ],
    "identifier": "mas_UnfreezeBothExp",
    "line": 23595,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_getAffection": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_getAffection",
    "line": 23598,
    "docstring": "Tries to return current affection\n\nOUT:\n    float",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_getBadExp": {
    "type": "function",
    "function_decorators": [
      "mas_utils.deprecated(use_instead='_get_current_aff_lose')"
    ],
    "identifier": "_mas_getBadExp",
    "line": 23608,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_getGoodExp": {
    "type": "function",
    "function_decorators": [
      "mas_utils.deprecated(use_instead='_get_current_aff_gain')"
    ],
    "identifier": "_mas_getGoodExp",
    "line": 23612,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_getTodayExp": {
    "type": "function",
    "function_decorators": [
      "mas_utils.deprecated()"
    ],
    "identifier": "_mas_getTodayExp",
    "line": 23616,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isBelowZero": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isBelowZero",
    "line": 23619,
    "docstring": "Checks if affection is negative\n\nOUT:\n    boolean",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_betweenAff": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_betweenAff",
    "line": 23630,
    "docstring": "Checks if the given affection is between the given affection levels.\n\nIf low is actually greater than high, then False is always returned\n\nIN:\n    aff_low - the lower bound of affecton to check with (inclusive)\n        if None, then we assume no lower bound\n    aff_check - the affection to check\n    aff_high - the upper bound of affection to check with (inclusive)\n        If None, then we assume no upper bound\n\nRETURNS:\n    True if the given aff check is within the bounds of the given\n    lower and upper affection limits, False otherwise.\n    If low is greater than high, False is returned.",
    "function_args": {
      "args": [
        "aff_low",
        "aff_check",
        "aff_high"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_compareAff": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_compareAff",
    "line": 23651,
    "docstring": "Runs compareTo logic on the given affection states\n\nIN:\n    aff_1 - an affection state to compare\n    aff_2 - an affection state to compare\n\nRETURNS:\n    negative number if aff_1 < aff_2\n    0 if aff_1 == aff_2\n    postitive number if aff_1 > aff_2\n    Returns 0 if a non affection state was provided",
    "function_args": {
      "args": [
        "aff_1",
        "aff_2"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_compareAffG": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_compareAffG",
    "line": 23668,
    "docstring": "Runs compareTo logic on the given affection groups\n\nIN:\n    affg_1 - an affection group to compare\n    affg_2 - an affection group to compare\n\nRETURNS:\n    negative number if affg_1 < affg_2\n    0 if affg_1 == affg_2\n    positive numbre if affg_1 > affg_2\n    Returns 0 if a non affection group was provided",
    "function_args": {
      "args": [
        "affg_1",
        "affg_2"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniBroken": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniBroken",
    "line": 23687,
    "docstring": "Checks if monika is broken\n\nIN:\n    lower - True means we include everything below this affection state\n        as broken as well\n        (Default: False)\n    higher - True means we include everything above this affection\n        state as broken as well\n        (Default: False)\n\nRETURNS:\n    True if monika is broke, False otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniDis": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniDis",
    "line": 23709,
    "docstring": "Checks if monika is distressed\n\nIN:\n    lower - True means we cinlude everything below this affection state\n        as distressed as well\n        NOTE: takes precedence over higher\n        (Default: False)\n    higher - True means we include everything above this affection\n        state as distressed as well\n        (Default: FAlse)\n\nRETURNS:\n    True if monika is distressed, false otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniUpset": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniUpset",
    "line": 23733,
    "docstring": "Checks if monika is upset\n\nIN:\n    lower - True means we include everything below this affection\n        state as upset as well\n        (Default: False)\n    higher - True means we include everything above this affection\n        state as upset as well\n        (Default: False)\n\nRETURNS:\n    True if monika is upset, false otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniNormal": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniNormal",
    "line": 23756,
    "docstring": "Checks if monika is normal\n\nIN:\n    lower - True means we include everything below this affection state\n        as normal as well\n        (Default: False)\n    higher - True means we include evreything above this affection\n        state as normal as well\n        (Default: False)\n\nRETURNS:\n    True if monika is normal, false otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniHappy": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniHappy",
    "line": 23779,
    "docstring": "Checks if monika is happy\n\nIN:\n    lower - True means we include everything below this affection\n        state as happy as well\n        (Default: False)\n    higher - True means we include everything above this affection\n        state as happy as well\n        (Default: False)\n\nRETURNS:\n    True if monika is happy, false otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniAff": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniAff",
    "line": 23802,
    "docstring": "Checks if monika is affectionate\n\nIN:\n    lower - True means we include everything below this affection\n        state as affectionate as well\n        (Default: FAlse)\n    higher - True means we include everything above this affection\n        state as affectionate as well\n        (Default: False)\n\nRETURNS:\n    True if monika is affectionate, false otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniEnamored": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniEnamored",
    "line": 23825,
    "docstring": "Checks if monika is enamored\n\nIN:\n    lower - True means we include everything below this affection\n        state as enamored as well\n        (Default: False)\n    higher - True means we include everything above this affection\n        state as enamored as well\n        (Default: False)\n\nRETURNS:\n    True if monika is enamored, false otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniLove": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniLove",
    "line": 23848,
    "docstring": "Checks if monika is in love\n\nIN:\n    lower - True means we include everything below this affectionate\n        state as love as well\n        (Default: False)\n    higher - True means we include everything above this affection\n        state as love as well\n        (Default: False)\n\nRETURNS:\n    True if monika in love, false otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniGSad": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniGSad",
    "line": 23871,
    "docstring": "Checks if monika is in sad affection group\n\nIN:\n    lower - True means we include everything below this affection\n        group as sad as well\n        (Default: False)\n    higher - True means we include everything above this affection\n        group as sad as well\n        (Default: False)\n\nRETURNS:\n    True if monika in sad group, false otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniGNormal": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniGNormal",
    "line": 23893,
    "docstring": "Checks if monika is in normal affection group\n\nIN:\n    lower - True means we include everything below this affection\n        group as normal as well\n        (Default: False)\n    higher - True means we include everything above this affection\n        group as normal as well\n        (Default: False)\n\nRETURNS:\n    True if monika is in normal group, false otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isMoniGHappy": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isMoniGHappy",
    "line": 23916,
    "docstring": "Checks if monika is in happy affection group\n\nIN:\n    lower - True means we include everything below this affection\n        group as happy as well\n        (Default: False)\n    higher - True means we include everything above this affection\n        group as happy as well\n        (Default: FAlse)\n\nRETURNS:\n    True if monika is in happy group, false otherwise",
    "function_args": {
      "args": [
        "lower",
        "higher"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_updateAffectionExp": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_updateAffectionExp",
    "line": 23939,
    "function_args": {
      "args": [
        "skipPP"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_get_current_aff_gain": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_get_current_aff_gain",
    "line": 23994,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_get_current_aff_lose": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_get_current_aff_lose",
    "line": 24000,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_get_current_aff_fraction_lose": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_get_current_aff_fraction_lose",
    "line": 24006,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_gainAffection": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_gainAffection",
    "line": 24012,
    "docstring": "Grants some affection whenever something positive happens\n\nIN:\n    amount - float, None - amount of affection to grant,\n        If None, uses the default value for the current aff\n        (Default: None)\n    modifier - float - modifier for the amount value\n        (Default: 1.0)\n    bypass - bool - whether or not we should bypass the cap,\n        for example during special events\n        (Default: False)\n    current_evlabel - str/None - the topic that caused this aff gain,\n        MUST be current topic label or None.\n        You probably DO NOT want to use this\n        (Default: None)",
    "function_args": {
      "args": [
        "amount",
        "modifier",
        "bypass",
        "current_evlabel"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "1.0",
        "False",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_loseAffection": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_loseAffection",
    "line": 24049,
    "docstring": "Subtracts some affection whenever something negative happens\n\nA reason can be specified and used for the apology dialogue\nif the default value is used Monika won't comment on the reason,\nand slightly will recover affection\nif None is passed she won't acknowledge that there was need for an apology.\nDEFAULTS reason to an Empty String mostly because when this one is called\nis intended to be used for something the player can apologize for, but it's\nnot totally necessary.\nNEW BITS:\nprompt: the prompt shown in the menu for apologizing\nexpirydatetime:\ngeneric: do we want this to be persistent? or not\n\nIN:\n    amount - float, None - amount of affection to subtract,\n        If None, uses the default value for the current aff\n        (Default: None)\n    modifier - float - modifier for the amount value\n        (Default: 1.0)\n    reason - int, None, - a constant for the reason for the apology\n        See mas_setApologyReason\n        (Default: None)\n    ev_label - string, None - the label for the apology event\n        See mas_setApologyReason\n        (Default: None)\n    apology_active_expiry - datetime.timedelta - the amount of session time\n        for the apology to expire\n        (Default: 3 hours)\n    apology_overall_expiry - datetime.timedelta - the amount of overall time\n        for the apology to expire\n        (Default: 1 week)\n    current_evlabel - str/None - the topic that caused this aff gain,\n        MUST be current topic label or None.\n        You probably DO NOT want to use this\n        (Default: None)",
    "function_args": {
      "args": [
        "amount",
        "modifier",
        "reason",
        "ev_label",
        "apology_active_expiry",
        "apology_overall_expiry",
        "current_evlabel"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "1.0",
        "None",
        "None",
        "datetime.timedelta(hours=3)",
        "datetime.timedelta(weeks=1)",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_loseAffectionFraction": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_loseAffectionFraction",
    "line": 24118,
    "docstring": "See mas_loseAffection for more info\nSubtracts portion of affection whenever something negative happens\nUSE VERY WISELY\n\nIN:\n    fraction - float, None - portion of affection to subtracts,\n        If None, uses the default value for the current aff\n        (Default: None)\n    min_amount - float, None - minimal amount of affection to substruct,\n        allows to verify that you take at least this amount, but no more\n        than the provided fraction\n        If None, uses the default value for the current aff\n        (Default: None)\n    modifier - float - modifier for the amount value\n        NOTE: the modifier is being applied AFTER min_amount\n        (Default: 1.0)",
    "function_args": {
      "args": [
        "fraction",
        "min_amount",
        "modifier",
        "reason",
        "ev_label",
        "apology_active_expiry",
        "apology_overall_expiry",
        "current_evlabel"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "None",
        "1.0",
        "None",
        "None",
        "datetime.timedelta(hours=3)",
        "datetime.timedelta(weeks=1)",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_revertFreshStart": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_revertFreshStart",
    "line": 24184,
    "docstring": "Revert affection to before the fresh start",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_shatterAffection": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_shatterAffection",
    "line": 24199,
    "docstring": "Sets affection to the lowest value",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_doFreshStart": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_doFreshStart",
    "line": 24209,
    "docstring": "Resets affection",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_setAffection": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated()"
    ],
    "identifier": "mas_setAffection",
    "line": 24221,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": "kwargs",
      "var_arg": "args"
    }
  },
  "mas_setApologyReason": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_setApologyReason",
    "line": 24224,
    "docstring": "Sets a reason for apologizing\n\nIN:\n    reason - The reason for the apology (integer value corresponding to item in the apology_reason_db)\n        (if left None, and an ev_label is present, we assume a non-generic apology)\n    ev_label - The apology event we want to unlock\n        (required)\n    apology_active_expiry - The amount of session time after which, the apology that was added expires\n        defaults to 3 hours active time\n    apology_overall_expiry - The amount of overall time after which, the apology that was added expires\n        defaults to 7 days",
    "function_args": {
      "args": [
        "reason",
        "ev_label",
        "apology_active_expiry",
        "apology_overall_expiry"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "None",
        "datetime.timedelta(hours=3)",
        "datetime.timedelta(weeks=1)"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_checkAffection": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_checkAffection",
    "line": 24270,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_m1_script0x2daffection__long_absence_check": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_m1_script0x2daffection__long_absence_check",
    "line": 24300,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_AffStartup": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_AffStartup",
    "line": 24333,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASFinalNoteDisplayable": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASFinalNoteDisplayable",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 24359,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 24372,
        "docstring": "Creates the final poem displayable",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 24404,
        "docstring": "Render function",
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 24419,
        "docstring": "Event function",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "_write_txt": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_write_txt",
    "line": 24436,
    "docstring": "Writes the text file in the specified path using basedir as starting path\n\nIN:\n    path - String path to the file this function will write\n        it will always start at basedir\n    text - actual text for the txt file\n    update - if it should override the file if it exists\n        defaults to False\nASSUMES:\n    basedir",
    "function_args": {
      "args": [
        "path",
        "text",
        "update"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_cute_message": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_cute_message",
    "line": 24455,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_surprise": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_surprise",
    "line": 24460,
    "docstring": "Leaves a \"surprise\" to the player in a txt file\n\nASSUMES:\n    mas_curr_affection",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_unlockSurprisePoem": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_unlockSurprisePoem",
    "line": 24519,
    "docstring": "Unlocks a MASPoem for the given aff level",
    "function_args": {
      "args": [
        "aff_level"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "addReaction": {
    "type": "function",
    "function_decorators": [],
    "identifier": "addReaction",
    "line": 24591,
    "docstring": "Globalied version of the addReaction function in the mas_filereacts\nstore.\n\nRefer to that function for more information",
    "function_args": {
      "args": [
        "ev_label",
        "fname_list",
        "_action",
        "is_good",
        "exclude_on"
      ],
      "pos_only_args": [],
      "defaults": [
        "EV_ACT_QUEUE",
        "None",
        "[]"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_checkReactions": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_checkReactions",
    "line": 24601,
    "docstring": "Checks for reactions, then queues them",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_receivedGift": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_receivedGift",
    "line": 24625,
    "docstring": "Globalied version for gift stats tracking",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_generateGiftsReport": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_generateGiftsReport",
    "line": 24632,
    "docstring": "Globalied version for gift stats tracking",
    "function_args": {
      "args": [
        "date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getGiftStatsForDate": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getGiftStatsForDate",
    "line": 24638,
    "docstring": "Globalied version to get the stats for a specific gift\nIN:\n    label - the gift label identifier.\n    date - the date to get the stats for, if None is given will check\n        today's date.\n        (Defaults to None)\n\nRETURNS:\n    The number of times the gift has been given that date",
    "function_args": {
      "args": [
        "label",
        "date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getGiftStatsRange": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getGiftStatsRange",
    "line": 24658,
    "docstring": "Returns status of gifts over a range (needs to be supplied to actually be useful)\n\nIN:\n    start - a start date to check from\n    end - an end date to check to\n\nRETURNS:\n    The gift status of all gifts given over the range",
    "function_args": {
      "args": [
        "start",
        "end"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getSpriteObjInfo": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getSpriteObjInfo",
    "line": 24687,
    "docstring": "Returns sprite info from the sprite reactions list.\n\nIN:\n    sp_data - tuple of the following format:\n        [0] - sprite type\n        [1] - sprite name\n        If None, we use pseudo random select from sprite reacts\n        (Default: None)\n\nREUTRNS: tuple of the folling format:\n    [0]: sprite type of the sprite\n    [1]: sprite name (id)\n    [2]: giftname this sprite is associated with\n    [3]: True if this gift has already been given before\n    [4]: sprite object (could be None even if sprite name is populated)",
    "function_args": {
      "args": [
        "sp_data"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_finishSpriteObjInfo": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_finishSpriteObjInfo",
    "line": 24739,
    "docstring": "Finishes the sprite object with the given data.\n\nIN:\n    sprite_data - sprite data tuple from getSpriteObjInfo\n    unlock_sel - True will unlock the selector topic, False will not\n        (Default: True)",
    "function_args": {
      "args": [
        "sprite_data",
        "unlock_sel"
      ],
      "pos_only_args": [],
      "defaults": [
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_giftCapGainAff": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_giftCapGainAff",
    "line": 24777,
    "function_args": {
      "args": [
        "amount",
        "modifier"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "1"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getGiftedDates": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getGiftedDates",
    "line": 24783,
    "docstring": "Gets the dates that a gift was gifted\n\nIN:\n    giftlabel - gift reaction label to check when it was last gifted\n\nOUT:\n    list of datetime.dates of the times the gift was given",
    "function_args": {
      "args": [
        "giftlabel"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_lastGiftedInYear": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_lastGiftedInYear",
    "line": 24799,
    "docstring": "Checks if the gift for giftlabel was last gifted in _year\n\nIN:\n    giftlabel - gift reaction label to check it's last gifted year\n    _year - year to see if it was last gifted in this year\n\nOUT:\n    boolean:\n        - True if last gifted in _year\n        - False otherwise",
    "function_args": {
      "args": [
        "giftlabel",
        "_year"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "dec_musicvol": {
    "type": "function",
    "function_decorators": [],
    "identifier": "dec_musicvol",
    "line": 24826,
    "docstring": "Decreases the volume of the music channel by the value defined in songs.vol_bump\n\nASSUMES:\n    persistent.playername",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "inc_musicvol": {
    "type": "function",
    "function_decorators": [],
    "identifier": "inc_musicvol",
    "line": 24838,
    "docstring": "increases the volume of the music channel by the value defined in songs.vol_bump",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mute_music": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mute_music",
    "line": 24845,
    "docstring": "Mutes and unmutes the music channel\n\nIN:\n    mute_enabled - True means we are allowed to mute.\n        False means we are not",
    "function_args": {
      "args": [
        "mute_enabled"
      ],
      "pos_only_args": [],
      "defaults": [
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_play_song": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_play_song",
    "line": 24866,
    "docstring": "literally just plays a song onto the music channel\nAlso sets the currentt track\n\nIN:\n    song - Song to play. If None, the channel is stopped\n    fadein - Number of seconds to fade the song in\n        (Default: 0.0)\n    loop - True if we should loop the song if possible, False to not loop.\n        (Default: True)\n    set_per - True if we should set persistent track, False if not\n        (Default: False)\n    fadeout - Number of seconds to fade the song out\n        (Default: 0.0)\n    if_changed - Whether or not to only set the song if it's changing\n        (Use to play the same song again without it being restarted)\n        (Default: False)",
    "function_args": {
      "args": [
        "song",
        "fadein",
        "loop",
        "set_per",
        "fadeout",
        "if_changed"
      ],
      "pos_only_args": [],
      "defaults": [
        "0.0",
        "True",
        "False",
        "0.0",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "play_song": {
    "type": "function",
    "function_decorators": [
      "mas_utils.deprecated(use_instead='mas_play_song')"
    ],
    "identifier": "play_song",
    "line": 24907,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": "kwargs",
      "var_arg": "args"
    }
  },
  "mas_startup_song": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_startup_song",
    "line": 24910,
    "docstring": "Starts playing either the persistent track\n\nMeant for usage in startup processes.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "select_music": {
    "type": "function",
    "function_decorators": [],
    "identifier": "select_music",
    "line": 24920,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_resetQuitMsg": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_resetQuitMsg",
    "line": 24957,
    "docstring": "Resets quit messages to the ones appropriate for the current affection.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_setQuitMsg": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_setQuitMsg",
    "line": 24964,
    "docstring": "Sets text for the quit dialogue box\n\nIN:\n    quit_msg - text to show as the quit dialogue box message. Not set\n        if None.\n        (Default: None)\n    quit_yes - text to show when YES is clicked in the quit dialogue\n        box. Not set if None.\n        (Default: None)\n    quit_no - text to show when NO is clicked in the quit dialogue box.\n        Not set if None.\n        (Default: None)",
    "function_args": {
      "args": [
        "quit_msg",
        "quit_yes",
        "quit_no"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "None",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASUndoActionRule": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASUndoActionRule",
    "class_bases": [
      "object"
    ],
    "line": 24989,
    "docstring": "Static class used to undo ev actions when outside their date ranges",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create_rule",
        "line": 24995,
        "docstring": "Creates the undoactionrule\n\nIN:\n    - ev: event to add the rule to\n    - start_date: start date of the event\n        if None passed, we use the event\n    - end_date: end date of the event\n        if None passed, we use the event",
        "function_args": {
          "args": [
            "ev",
            "start_date",
            "end_date"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create_rule_EVL",
        "line": 25014,
        "docstring": "Creates undo action rule from EVL:\n\nIN:\n    evl - event label to add rule for\n    start_date - start date to use\n    end_date - end date to use",
        "function_args": {
          "args": [
            "evl",
            "start_date",
            "end_date"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "has_rule",
        "line": 25048,
        "docstring": "Checks if the event has an undo action rule associated with it\n\nIN:\n    ev - event to check",
        "function_args": {
          "args": [
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "has_rule_EVL",
        "line": 25058,
        "docstring": "Checks if event label as undo action rule associated with it\n\nIN:\n    evl - event label to check",
        "function_args": {
          "args": [
            "evl"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "adjust_rule",
        "line": 25068,
        "docstring": "Adjusts the start/end dates stored\n\nIN:\n    ev - event to adjust\n    start_date - new start date\n    end_date - new end date",
        "function_args": {
          "args": [
            "ev",
            "start_date",
            "end_date"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "remove_rule",
        "line": 25084,
        "docstring": "Removes the rule from the persistent dict\n\nIN:\n    ev - event to remove",
        "function_args": {
          "args": [
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "evaluate_rule",
        "line": 25095,
        "docstring": "Evaluates to see if we need to undo the actions based on the ev dates stored in our persistent dict\n\nIN:\n    - ev - event to evaluate\n\nOUT:\n    True if we are past the stored end date and we need to",
        "function_args": {
          "args": [
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "check_persistent_rules",
        "line": 25142,
        "docstring": "Applies rules from persistent dict\n\nNOTE: uses mas_getEV",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASStripDatesRule": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASStripDatesRule",
    "class_bases": [
      "object"
    ],
    "line": 25161,
    "docstring": "Static class for the strip ev dates rule.\nThis rule will strip the event dates when out of the date range",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "create_rule",
        "line": 25168,
        "docstring": "Creates the strip event dates rule\n\nIN:\n    ev - event to create rules for\n    - end_date: end date of the event\n        if None is passed, we use the event's end date",
        "function_args": {
          "args": [
            "ev",
            "end_date"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "remove_rule",
        "line": 25197,
        "docstring": "Removes the rule from the persistent dict",
        "function_args": {
          "args": [
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "evaluate_rule",
        "line": 25205,
        "docstring": "Evaluates to see if we need to strip the ev dates based on the stored end date in the persistent\ndict\n\nIN:\n    ev - event to check\n\nOUT:\n    True if we are past the stored end date and we need to strip dates",
        "function_args": {
          "args": [
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "check_persistent_rules",
        "line": 25235,
        "docstring": "Applies rules from persistent dict\n\nNOTE: pulls from mas_getEV\n\nIN:\n    per_rule - persistent dict of rules",
        "function_args": {
          "args": [
            "per_rules"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "dumpPersistentToFile": {
    "type": "function",
    "function_decorators": [],
    "identifier": "dumpPersistentToFile",
    "line": 25253,
    "docstring": "Prints a file containing each dictionary element of a persistent variable\n\nIN:\n    dumped_persistent - a renpy persistent variable\n    dumppath - a file path to the text file to be created. Must be a valid write location",
    "function_args": {
      "args": [
        "dumped_persistent",
        "dumppath"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "show_dialogue_box": {
    "type": "function",
    "function_decorators": [],
    "identifier": "show_dialogue_box",
    "line": 25338,
    "docstring": "Jumps to the topic promt menu",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "pick_game": {
    "type": "function",
    "function_decorators": [],
    "identifier": "pick_game",
    "line": 25345,
    "docstring": "Jumps to the pick a game workflow",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getuser": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getuser",
    "line": 25352,
    "docstring": "Attempts to get the current user\n\nRETURNS: current user if found, or None if not found",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_enable_quitbox": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_enable_quitbox",
    "line": 25366,
    "docstring": "Enables Monika's quit dialogue warning",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_disable_quitbox": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_disable_quitbox",
    "line": 25374,
    "docstring": "Disables Monika's quit dialogue warning",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_enable_quit": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_enable_quit",
    "line": 25382,
    "docstring": "Enables quitting without monika knowing",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_disable_quit": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_disable_quit",
    "line": 25390,
    "docstring": "Disables quitting without monika knowing",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_drawSpaceroomMasks": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_drawSpaceroomMasks",
    "line": 25398,
    "docstring": "Draws the appropriate masks according to the current state of the\ngame.\n\nIN:\n    dissolve_masks - True will dissolve masks, False will not\n        (Default; True)",
    "function_args": {
      "args": [
        "dissolve_masks"
      ],
      "pos_only_args": [],
      "defaults": [
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_validate_suntimes": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_validate_suntimes",
    "line": 25417,
    "docstring": "Validates both persistent and store suntimes are in a valid state.\nSunrise is always used as the lead if a reset is needed.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "show_calendar": {
    "type": "function",
    "function_decorators": [],
    "identifier": "show_calendar",
    "line": 25430,
    "docstring": "RUNTIME ONLY\n        Opens the calendar if we can",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "slow_nodismiss": {
    "type": "function",
    "function_decorators": [],
    "identifier": "slow_nodismiss",
    "line": 25454,
    "docstring": "Callback for whenever monika talks\n\nIN:\n    event - main thing we can use here, lets us now when in the pipeline\n        we are for display text:\n        begin -> start of a say statement\n        show -> right before dialogue is shown\n        show_done -> right after dialogue is shown\n        slow_done -> called after text finishes showing\n        end -> end of dialogue (user has interacted)\n            NOTE: dismiss needs to be possible for end to be reached\n                when mouse is clicked after an interaction ends.",
    "function_args": {
      "args": [
        "event",
        "interact"
      ],
      "pos_only_args": [],
      "defaults": [
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": "kwargs",
      "var_arg": null
    }
  },
  "mas_isMorning": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='mas_isDayNow', should_raise=True)"
    ],
    "identifier": "mas_isMorning",
    "line": 25488,
    "docstring": "DEPRECATED\n        Checks if it is day or night via suntimes\n\n        NOTE: the wording of this function is bad. This does not literally\n            mean that it is morning. USE mas_isDayNow\n\n        RETURNS: True if day, false if not",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_progressFilter": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_progressFilter",
    "line": 25500,
    "docstring": "Changes filter according to rules.\n\nCall this when you want to update the filter.\n\nRETURNS: True upon a filter change, False if not",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_shouldChangeTime": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(should_raise=True)"
    ],
    "identifier": "mas_shouldChangeTime",
    "line": 25515,
    "docstring": "DEPRECATED\n        This no longer makes sense with the filtering system.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_shouldRain": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_shouldRain",
    "line": 25522,
    "docstring": "Rolls some chances to see if we should make it rain\n\nRETURNS:\n    rain weather to use, or None if we dont want to change weather",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_lockHair": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_lockHair",
    "line": 25600,
    "docstring": "Locks all hair topics",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_seasonalCheck": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_seasonalCheck",
    "line": 25607,
    "docstring": "Determines the current season and runs an appropriate programming\npoint.\n\nIf the global for season is currently None, then we instead set the\ncurrent season.\n\nNOTE: this does NOT do progressive programming point execution.\n    This is intended for runtime usage only.\n\nASSUMES:\n    persistent._mas_current_season",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_enableTextSpeed": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_enableTextSpeed",
    "line": 25635,
    "docstring": "Enables text speed",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_disableTextSpeed": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_disableTextSpeed",
    "line": 25643,
    "docstring": "Disables text speed",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_resetTextSpeed": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_resetTextSpeed",
    "line": 25651,
    "docstring": "Sets text speed to the appropriate one depending on global settings\n\nRules:\n1 - developer always gets text speed (unless ignoredev is True)\n2 - text speed enabled if affection above happy\n3 - text speed disabled otherwise",
    "function_args": {
      "args": [
        "ignoredev"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isTextSpeedEnabled": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isTextSpeedEnabled",
    "line": 25673,
    "docstring": "Returns true if text speed is enabled",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_check_player_derand": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_check_player_derand",
    "line": 25679,
    "docstring": "Checks the player derandom lists for events that are not random and derandoms them",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_get_player_bookmarks": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_get_player_bookmarks",
    "line": 25693,
    "docstring": "Gets topics which are bookmarked by the player\nAlso cleans events which no longer exist\n\nNOTE: Will NOT add events which fail the aff range check\n\nIN:\n    bookmarked_evls - appropriate persistent variable holding the bookmarked eventlabels\n\nOUT:\n    List of bookmarked topics as evs",
    "function_args": {
      "args": [
        "bookmarked_evls"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_get_player_derandoms": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_get_player_derandoms",
    "line": 25723,
    "docstring": "Gets topics which are derandomed by the player (in check-scrollable-menu format)\nAlso cleans out events which no longer exist\n\nIN:\n    derandomed_evls - appropriate variable holding the derandomed eventlabels\n\nOUT:\n    List of player derandomed topics in mas_check_scrollable_menu form",
    "function_args": {
      "args": [
        "derandomed_evls"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_safeToRefDokis": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_safeToRefDokis",
    "line": 25752,
    "docstring": "Checks if it is safe for us to reference the dokis in a potentially\nsensitive matter. The user must have responded to the question\nregarding dokis - if the user hasn't responded, then we assume it is\nNEVER safe to reference dokis.\n\nRETURNS: True if safe to reference dokis",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_set_pronouns": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_set_pronouns",
    "line": 25763,
    "docstring": "Sets gender specific word replacements\n\nFew examples:\n    \"It is his pen.\" (if the player's gender is declared as male)\n    \"It is her pen.\" (if the player's gender is declared as female)\n    \"It is their pen.\" (if player's gender is not declared)\n\nFor all available pronouns/words check the keys in MAS_PRONOUN_GENDER_MAP\n\nIN:\n    key - Optional[Literal[\"M\", \"F\", \"X\"]] - key (perhaps current gender) to set the pronouns for\n        If None, uses persistent.gender",
    "function_args": {
      "args": [
        "key"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getTimeFile": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getTimeFile",
    "line": 25797,
    "docstring": "Returns the filestring pointing to the right asset for day/night\n\nIN:\n    the DAY variant of the image file needed\n\nRETURNS:\n    filestring pointing to the right path",
    "function_args": {
      "args": [
        "filestring"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_swapStyle": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_swapStyle",
    "line": 25823,
    "docstring": "Swaps the single style between default and dark variants.\n\nIN:\n    morning_flag - Light/dark mode switch",
    "function_args": {
      "args": [
        "base_name",
        "dark_name",
        "morning_flag"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hasDarkStyle": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hasDarkStyle",
    "line": 25840,
    "docstring": "Check if selected style has a dark alternative.",
    "function_args": {
      "args": [
        "style_name"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isDarkStyle": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isDarkStyle",
    "line": 25853,
    "docstring": "Check if selected style is a dark style.",
    "function_args": {
      "args": [
        "style_name"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isTextDarkStyle": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isTextDarkStyle",
    "line": 25859,
    "docstring": "Check if selected style is a text_dark style.",
    "function_args": {
      "args": [
        "style_name"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_darkMode": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_darkMode",
    "line": 25866,
    "docstring": "Swaps all styles to dark/light mode provided on the input\n\nIN:\n    morning_flag - if True, light mode, if False, dark mode",
    "function_args": {
      "args": [
        "morning_flag"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_passedILY": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_passedILY",
    "line": 25939,
    "docstring": "Checks whether we are within the appropriate time since the last time\nMonika told the player 'ily' which is stored in persistent._mas_last_monika_ily\nIN:\n    pass_time - a timedelta corresponding to the time limit we want to check against\n\nRETURNS:\n    boolean indicating if we are within the time limit",
    "function_args": {
      "args": [
        "pass_time"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_ILY": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_ILY",
    "line": 25958,
    "docstring": "Sets persistent._mas_last_monika_ily (the last time Monika said ily) to a given time\nIN:\n    set_time - the time we want to set persistent._mas_last_monika_ily to\n        defaults to datetime.datetime.now()",
    "function_args": {
      "args": [
        "set_time"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_shouldKiss": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_shouldKiss",
    "line": 25969,
    "docstring": "Checks if Monika should give the player a random kiss\n\nCONDITIONS:\n    1. Enamored+ affection\n    2. Player already had their first kiss with Monika\n    3. Random chance that changes depending on the chance and special_day_bypass vars\n    4. Enough time has passed since the last kiss\n\nIN:\n    chance:\n        the chance to receive a kiss from Monika\n    cooldown:\n        a datetime.timedelta representing the amount of time after the\n        last kiss the next random kiss will be allowed\n        (Default: 1 hour)\n    special_day_bypass:\n        whether a special day should bypass the chance (Default=False)\n\nOUT:\n    boolean:\n        - True if the above conditions are met\n        - False otherwise",
    "function_args": {
      "args": [
        "chance",
        "cooldown",
        "special_day_bypass"
      ],
      "pos_only_args": [],
      "defaults": [
        "datetime.timedelta(hours=1)",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_open_extra_menu": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_open_extra_menu",
    "line": 26012,
    "docstring": "Jumps to the extra menu workflow",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "zoom_smoothly": {
    "type": "function",
    "function_decorators": [],
    "identifier": "zoom_smoothly",
    "line": 26022,
    "docstring": "Transition function used in mas_smooth_transition\ntakes the standard parameters on functions used on transforms\nsee https://www.renpy.org/doc/html/atl.html#function-statement\nASSUMES:\n    _mas_old_zoom - containing the old zoom\n    _mas_old_zoom_value - containing the old zoom value\n    _mas_old_y - containing the old y value\n    _mas_zoom_diff - containing the difference between the old and new zoom levels\n    _mas_zoom_value_diff - containing the difference between the old and new zoom values\n    _mas_zoom_y_diff - containing the difference between the old and new y values",
    "function_args": {
      "args": [
        "trans",
        "st",
        "at"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_checkApologies": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_checkApologies",
    "line": 26060,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "removeTopicID": {
    "type": "function",
    "function_decorators": [],
    "identifier": "removeTopicID",
    "line": 26082,
    "docstring": "Removes one topic from the _seen_ever variable topics list if it exists in either var\n(persistent is also checked for existence)\n\nIN:\n    topicID - the topicID to remove\n\nASSUMES:\n    persistent._seen_ever",
    "function_args": {
      "args": [
        "topicID"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_eraseTopic": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_eraseTopic",
    "line": 26096,
    "docstring": "Erases an event from both lockdb and Event database\nThis should also handle lockdb data as well.\nTopicIDs that are not in the given eventDB are silently ignored.\n(LockDB data will be erased if found)\n\nIN:\n    topicID - topic ID / label\n    per_eventDB - persistent database this topic is in",
    "function_args": {
      "args": [
        "topicID",
        "per_eventDB"
      ],
      "pos_only_args": [],
      "defaults": [
        "persistent.event_database"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_transferTopic": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_transferTopic",
    "line": 26113,
    "docstring": "DEPREACTED\n\n        NOTE: This can cause data corruption. DO NOT USE.\n\n        Transfers a topic's data from the old topic ID to the new one int he\n        given database as well as the lock database.\n\n        NOTE: If the new topic ID already exists in the given databases,\n        the data is OVERWRITTEN\n\n        IN:\n            old_topicID - old topic ID to transfer\n            new_topicID - new topic ID to receieve\n            per_eventDB - persistent databse this topic is in",
    "function_args": {
      "args": [
        "old_topicID",
        "new_topicID",
        "per_eventDB"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_transferTopicSeen": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_transferTopicSeen",
    "line": 26140,
    "docstring": "Tranfers persistent seen ever data. This is separate because of complex\ntopic adjustments\n\nIN:\n    old_topicID - old topic ID to tranfer\n    new_topicID - new topic ID to receieve",
    "function_args": {
      "args": [
        "old_topicID",
        "new_topicID"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "adjustTopicIDs": {
    "type": "function",
    "function_decorators": [],
    "identifier": "adjustTopicIDs",
    "line": 26153,
    "docstring": "Changes labels in persistent._seen_ever\nto new IDs in the changedIDs dict\n\nIN:\n    oldList - the list of old Ids to change\n    changedIDs - dict of changed ids:\n        key -> old ID\n        value -> new ID\n\nASSUMES:\n    persistent._seen_ever",
    "function_args": {
      "args": [
        "changedIDs",
        "updating_persistent"
      ],
      "pos_only_args": [],
      "defaults": [
        "persistent"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "updateTopicIDs": {
    "type": "function",
    "function_decorators": [],
    "identifier": "updateTopicIDs",
    "line": 26177,
    "docstring": "Updates topic IDS between versions by performing a two step process: adjust exisitng IDS to match the new IDS\nthen add newIDs to the persistent randomtopics\n\nIN:\n    version_number - the version number we are updating to\n\nASSUMES:\n    persistent._seen_ever\n    updates.topics",
    "function_args": {
      "args": [
        "version_number",
        "updating_persistent"
      ],
      "pos_only_args": [],
      "defaults": [
        "persistent"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "updateGameFrom": {
    "type": "function",
    "function_decorators": [],
    "identifier": "updateGameFrom",
    "line": 26198,
    "docstring": "Updates the game, starting at the given start version\n\nIN:\n    startVers - the version number in the parsed format ('v#####')\n\nASSUMES:\n    updates.version_updates",
    "function_args": {
      "args": [
        "startVers"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "safeDel": {
    "type": "function",
    "function_decorators": [],
    "identifier": "safeDel",
    "line": 26218,
    "docstring": "Safely deletes variables from persistent\n\nIN:\n    varname - name of the variable to delete from persistent as string\n\nNOTE: THIS SHOULD BE USED IN PLACE OF THE DEFAULT `del` KEYWORD WHEN DELETING VARIABLES FROM THE PERSISTENT",
    "function_args": {
      "args": [
        "varname"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "Shaker": {
    "type": "class",
    "class_decorators": [],
    "identifier": "Shaker",
    "class_bases": [
      "object"
    ],
    "line": 26237,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 26247,
        "function_args": {
          "args": [
            "self",
            "start",
            "child",
            "dist"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__call__",
        "line": 26255,
        "function_args": {
          "args": [
            "self",
            "t",
            "sizes"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "_Shake": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_Shake",
    "line": 26276,
    "function_args": {
      "args": [
        "start",
        "time",
        "child",
        "dist"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "100.0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": "properties",
      "var_arg": null
    }
  },
  "mas_DropShield_core": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_DropShield_core",
    "line": 26301,
    "docstring": "Enables:\n    - Talk button + hotkey\n    - Extra button + hotkey\n    - Music button + hotkey + volume keys + mute key\n    - Play button + hotkey\n    - Calendar overlay\n    - Escape key",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_RaiseShield_core": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_RaiseShield_core",
    "line": 26316,
    "docstring": "Disables:\n    - Talk button + hotkey\n    - Extra button + hotkey\n    - Music button + hotkey + volume keys + mute key\n    - Play button + hotkey\n    - Calendar overlay\n    - Escape key",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_DropShield_dlg": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_DropShield_dlg",
    "line": 26333,
    "docstring": "Enables:\n    - Talk button + hotkey\n    - Extra button + hotkey\n    - Play button + hotkey\n    - Calendar overlay\n\nDisables:\n    - Derandom hotkey\n    - bookmark hotkey\n\nUnsets:\n    - dialogue workflow flag\n\nIntended Flow:\n    - Monika stops talking",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_RaiseShield_dlg": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_RaiseShield_dlg",
    "line": 26365,
    "docstring": "Disables:\n    - Talk button + hotkey\n    - Extra button + hotkey\n    - Play button + hotkey\n    - Calendar overlay\n\nEnables:\n    - Derandom hotkey\n    - bookmark hotkey\n\nSets:\n    - dialogue workflow flag\n\nIntended Flow:\n    - Monika starts talking",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_DropShield_mumu": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_DropShield_mumu",
    "line": 26398,
    "docstring": "Enables:\n    - Talk button + hotkey\n    - Extra button + hotkey\n    - Music button\n    - Play button + hotkey\n    - Calendar overlay\n\nIntended Flow:\n    - The Music menu is closed",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_RaiseShield_mumu": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_RaiseShield_mumu",
    "line": 26416,
    "docstring": "Disables:\n    - Talk button + hotkey\n    - Extra button + hotkey\n    - Music button\n    - Play button + hotkey\n    - Calendar overlay\n\nIntended Flow:\n    - The Music menu is opened",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_DropShield_idle": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_DropShield_idle",
    "line": 26436,
    "docstring": "Enables:\n    - Talk hotkey\n    - Extra hotkey\n    - Music hotkey\n    - Play button + hotkey\n    - Music controller hotkeys\n\nIntended Flow:\n    - Idle mode ends",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_RaiseShield_idle": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_RaiseShield_idle",
    "line": 26452,
    "docstring": "Disables:\n    - Talk hotkey\n    - Extra hotkey\n    - Music hotkey\n    - Play button + hotkey\n    - Music controller hotkeys\n\nIntended Flow:\n    - Idle mode starts",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_DropShield_timedtext": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_DropShield_timedtext",
    "line": 26471,
    "docstring": "Enables:\n    - text speed\n    - escape key\n    - Music button + hotkey\n    - Music Menu\n    - Calendar overlay\n    - Window hiding\n    - dismiss\n\nShows:\n    - hotkey buttons",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_RaiseShield_timedtext": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_RaiseShield_timedtext",
    "line": 26494,
    "docstring": "Disables:\n    - text speed\n    - escape key\n    - Music button + hotkey\n    - Music Menu\n    - Calendar overlay\n    - Window hiding\n    - dismiss\n\nHides:\n    - hotkey buttons",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_MUMUDropShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_MUMUDropShield",
    "line": 26525,
    "docstring": "Enables:\n    - Music button + hotkey\n    - Music Menu\n\nIntended Flow:\n    - Whenever the music menu-based interactions need to be enabled",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_MUMURaiseShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_MUMURaiseShield",
    "line": 26539,
    "docstring": "Disables:\n    - Music button + hotkey\n    - Music Menu\n\nIntended Flow:\n    - Whenever the music menu-based interactions need to be disabled",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_MUINDropShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_MUINDropShield",
    "line": 26556,
    "docstring": "Enables:\n    - Music button + hotkey\n    - Music Menu\n    - Music controller keys\n\nIntended Flow:\n    - Whenever all music-based interactions need to be enabled",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_MUINRaiseShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_MUINRaiseShield",
    "line": 26570,
    "docstring": "Disables:\n    - Music button + hotkey\n    - Music Menu\n    - Music controller keys\n\nIntended Flow:\n    - Whenever all music-based interactions need to be disabled",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_dlgToIdleShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_dlgToIdleShield",
    "line": 26586,
    "docstring": "Enables:\n    - Talk button\n    - Extra button\n    - Calendar overlay\n\nDisables:\n    - Music hotkey\n\nUnsets:\n    - dialogue workflow flag\n\nIntended flow:\n    - when transitioning from a dialogue workflow to idle mode",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_coreToIdleShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_coreToIdleShield",
    "line": 26609,
    "docstring": "Enables:\n    - Talk button\n    - Extra button\n    - Music button\n    - Calendar overlay\n    - Escape key\n\nIntended flow:\n    - when transitiong from core sheilds to idle shields",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_mumuToIdleShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_mumuToIdleShield",
    "line": 26628,
    "docstring": "Enables:\n    - Talk button\n    - Extra button\n    - Music button\n    - songs\n    - calendar overlay\n\nIntended Flow:\n    - when transitioning from music menu to idle mode",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_canCheckActiveWindow": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_canCheckActiveWindow",
    "line": 26674,
    "docstring": "Checks if we can check the active window (simplifies conditionals)",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getActiveWindowHandle": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getActiveWindowHandle",
    "line": 26683,
    "docstring": "Gets the active window name\n\nOUT:\n    The active window handle if found. If it is not possible to get, we return an empty string\n\nNOTE: THIS SHOULD NEVER RETURN NONE",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_display_notif": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_display_notif",
    "line": 26696,
    "docstring": "Notification creation method\n\nIN:\n    title - Notification heading text\n    body - A list of items which would go in the notif body (one is picked at random)\n    group - Notification group (for checking if we have this enabled)\n        (Default: None)\n    skip_checks - Whether or not we skips checks\n        (Default: False)\nOUT:\n    bool indicating status (notif shown or not (by check))\n\nNOTE:\n    We only show notifications if:\n        1. We are able to show notifs\n        2. MAS isn't the active window\n        3. User allows them\n        4. And if the notification group is enabled\n        OR if we skip checks. BUT this should only be used for introductory or testing purposes.",
    "function_args": {
      "args": [
        "title",
        "body",
        "group",
        "skip_checks"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isFocused": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isFocused",
    "line": 26748,
    "docstring": "Checks if MAS is the focused window",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isInActiveWindow": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isInActiveWindow",
    "line": 26755,
    "docstring": "Checks if ALL keywords are in the active window name\nIN:\n    regexp:\n        Regex pattern to identify the window\n\n    active_window_handle:\n        String representing the handle of the active window\n        If None, it's fetched\n        (Default: None)",
    "function_args": {
      "args": [
        "regexp",
        "active_window_handle"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_clearNotifs": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_clearNotifs",
    "line": 26778,
    "docstring": "Clears all tray icons (also action center on win10)",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_checkForWindowReacts": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_checkForWindowReacts",
    "line": 26787,
    "docstring": "Runs through events in the windowreact_db to see if we have a reaction, and if so, queue it",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_resetWindowReacts": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_resetWindowReacts",
    "line": 26811,
    "docstring": "Runs through events in the windowreact_db to unlock them\nIN:\n    List of ev_labels to exclude from being unlocked",
    "function_args": {
      "args": [
        "excluded"
      ],
      "pos_only_args": [],
      "defaults": [
        "persistent._mas_windowreacts_no_unlock_list"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_updateFilterDict": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_updateFilterDict",
    "line": 26821,
    "docstring": "Updates the filter dict with the groups in the groups list for the settings menu",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_addBlacklistReact": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_addBlacklistReact",
    "line": 26829,
    "docstring": "Adds the given ev_label to the no unlock list\nIN:\n    ev_label: eventlabel to add to the no unlock list",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_removeBlacklistReact": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_removeBlacklistReact",
    "line": 26838,
    "docstring": "Removes the given ev_label to the no unlock list if exists\nIN:\n    ev_label: eventlabel to remove from the no unlock list",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_notifsEnabledForGroup": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_notifsEnabledForGroup",
    "line": 26847,
    "docstring": "Checks if notifications are enabled, and if enabled for the specified group\nIN:\n    group: notification group to check",
    "function_args": {
      "args": [
        "group"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_unlockFailedWRS": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_unlockFailedWRS",
    "line": 26855,
    "docstring": "Unlocks a wrs again provided that it showed, but failed to show (failed checks in the notif label)\nNOTE: This should only be used for wrs that are only a notification\nIN:\n    ev_label: eventlabel of the wrs",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_prepForReload": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_prepForReload",
    "line": 26869,
    "docstring": "Handles clearing wrs notifs and unregistering the wndclass to allow 'reload' to work properly\n\nASSUMES: renpy.windows",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKRaiseShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKRaiseShield",
    "line": 26883,
    "docstring": "RUNTIME ONLY\n        Disables main hotkeys and music controller keys",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKDropShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKDropShield",
    "line": 26891,
    "docstring": "RUNTIME ONLY\n        Enables the main hotkeys and music controller keys",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKRaiseShield_main": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKRaiseShield_main",
    "line": 26899,
    "docstring": "RUNTIME ONLY\n        Disables main hotkeys",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKDropShield_main": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKDropShield_main",
    "line": 26909,
    "docstring": "RUNTIME ONLY\n        Enables main hotkeys",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKIsEnabled": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKIsEnabled",
    "line": 26919,
    "docstring": "RETURNS: True if all the main hotkeys are enabled, False otherwise",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKCanQuietMusic": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKCanQuietMusic",
    "line": 26931,
    "docstring": "RETURNS: True if we can lower or stop the music, False if not",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKIsSettingsClosed": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKIsSettingsClosed",
    "line": 26941,
    "docstring": "RETURNS: True if the settings is closed, False otherwise",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKAllowHotkey": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKAllowHotkey",
    "line": 26948,
    "docstring": "ALWAYS CHECK THIS WHEN DOING ANYTHING THAT BREAKS FLOW.\n\nOtherwise you may break the game if the game menu opens while something\nelse breaks the context.\n\nNOTE: there are some hotkeys that DO NOT need to check this.\n\nRETURNS: True if hotkey is allowed to be used now, False otherwise",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "enable_esc": {
    "type": "function",
    "function_decorators": [],
    "identifier": "enable_esc",
    "line": 26962,
    "docstring": "Enables the escape key so you can go to the game menu\n\nNOTE: this also enables opening the game menu from other means",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "disable_esc": {
    "type": "function",
    "function_decorators": [],
    "identifier": "disable_esc",
    "line": 26972,
    "docstring": "disables the escape key so you cant go to game menu\n\nNOTE: this also disables opening the game menu from other means",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_hk_mute_music": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_hk_mute_music",
    "line": 26982,
    "docstring": "hotkey specific muting / unmuting music channel",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_hk_inc_musicvol": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_hk_inc_musicvol",
    "line": 26990,
    "docstring": "hotkey specific music volume increasing",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_hk_dec_musicvol": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_hk_dec_musicvol",
    "line": 26998,
    "docstring": "hotkey specific music volume decreasing",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_hk_show_dialogue_box": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_hk_show_dialogue_box",
    "line": 27006,
    "docstring": "hotkey specific show dialgoue box",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_hk_open_extra_menu": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_hk_open_extra_menu",
    "line": 27014,
    "docstring": "hotkey specific open extras menu",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_hk_pick_game": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_hk_pick_game",
    "line": 27022,
    "docstring": "hotkey specific pick game",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_hk_select_music": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_hk_select_music",
    "line": 27030,
    "docstring": "Runs the select music function if we are allowed to.\nINTENDED FOR HOTKEY USAGE ONLY",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_hk_derandom_topic": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_hk_derandom_topic",
    "line": 27039,
    "docstring": "hotkey specific derandom topics",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_hk_bookmark_topic": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_hk_bookmark_topic",
    "line": 27047,
    "docstring": "hotkey specific bookmark topics",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_game_menu_start": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_game_menu_start",
    "line": 27055,
    "docstring": "Runs code prior to opening the game menu in any way.\n\nOUT:\n    scope - use this dict as temp space",
    "function_args": {
      "args": [
        "scope"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_game_menu_end": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_game_menu_end",
    "line": 27069,
    "docstring": "Runs code after exiting the game menu in any way.\n\nIN:\n    scope - temp space used in `_mas_game_menu_start`",
    "function_args": {
      "args": [
        "scope"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_game_menu": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_game_menu",
    "line": 27111,
    "docstring": "Wrapper aound _invoke_game_menu that follows additional ui rules",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_quick_menu_cb": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_quick_menu_cb",
    "line": 27124,
    "docstring": "Opens game menu to the appropraite quick screen.\nNOTE: no checks are done here, please do not fuck this.",
    "function_args": {
      "args": [
        "screen_name"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_hide_windows": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_hide_windows",
    "line": 27141,
    "docstring": "Wrapper around the _hide_windows label that hides windows",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "set_keymaps": {
    "type": "function",
    "function_decorators": [],
    "identifier": "set_keymaps",
    "line": 27149,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "HKBHideButtons": {
    "type": "function",
    "function_decorators": [],
    "identifier": "HKBHideButtons",
    "line": 27203,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "HKBShowButtons": {
    "type": "function",
    "function_decorators": [],
    "identifier": "HKBShowButtons",
    "line": 27213,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKBRaiseShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKBRaiseShield",
    "line": 27221,
    "docstring": "RUNTIME ONLY\n        Disables the hotkey buttons",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKBDropShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKBDropShield",
    "line": 27231,
    "docstring": "RUNTIME ONLY\n        Enables the hotkey buttons",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKBIsEnabled": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKBIsEnabled",
    "line": 27241,
    "docstring": "RETURNS: True if all the buttons are enabled, False otherwise",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_HKBIsVisible": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_HKBIsVisible",
    "line": 27253,
    "docstring": "RETURNS: True if teh Hotkey buttons are visible, False otherwise",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MovieOverlayHideButtons": {
    "type": "function",
    "function_decorators": [],
    "identifier": "MovieOverlayHideButtons",
    "line": 27261,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MovieOverlayShowButtons": {
    "type": "function",
    "function_decorators": [],
    "identifier": "MovieOverlayShowButtons",
    "line": 27270,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_derandom_topic": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_derandom_topic",
    "line": 27286,
    "docstring": "Function for the derandom hotkey, 'x'\n\nIN:\n    ev_label - label of the event we want to derandom.\n        (Optional. If None, persistent.current_monikatopic is used)\n        (Default: None)",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_bookmark_topic": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_bookmark_topic",
    "line": 27339,
    "docstring": "Function for the bookmark hotkey, 'b'\n\nIN:\n    ev_label - label of the event we want to bookmark.\n        (Optional, defaults to persistent.current_monikatopic)",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hasBookmarks": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hasBookmarks",
    "line": 27402,
    "docstring": "Checks to see if we have bookmarks to show\n\nBookmarks are restricted to Normal+ affection\nand to topics that are unlocked and are available\nbased on current affection\n\nIN:\n    persist_var - appropriate variable holding the bookedmarked eventlabels.\n        If None, persistent._mas_player_bookmarked is assumed\n        (Default: None)\n\nOUT:\n    boolean:\n        True if there are bookmarks in the curent var\n        False otherwise",
    "function_args": {
      "args": [
        "persist_var"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_setupIdleMode": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_setupIdleMode",
    "line": 27440,
    "docstring": "Setups idle mode\n\nIN:\n    brb_label - the label of this brb event, if None, use the current label\n        (Default: None)\n    brb_callback_label - the callback label of this brb event, if None, we build it here\n        (Default: None)",
    "function_args": {
      "args": [
        "brb_label",
        "brb_callback_label"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_resetIdleMode": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_resetIdleMode",
    "line": 27470,
    "docstring": "Resets idle mode\n\nThis is meant to basically clear idle mode for holidays or other\nthings that hijack main flow\n\nIN:\n    clear_idle_data - whether or not clear persistent idle data\n        (Default: True)\n\nOUT:\n    string with idle callback label\n    or None if it was reset before",
    "function_args": {
      "args": [
        "clear_idle_data"
      ],
      "pos_only_args": [],
      "defaults": [
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "replace_text": {
    "type": "function",
    "function_decorators": [],
    "identifier": "replace_text",
    "line": 27508,
    "function_args": {
      "args": [
        "s"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "game_menu_check": {
    "type": "function",
    "function_decorators": [],
    "identifier": "game_menu_check",
    "line": 27514,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "force_integer_multiplier": {
    "type": "function",
    "function_decorators": [],
    "identifier": "force_integer_multiplier",
    "line": 27519,
    "function_args": {
      "args": [
        "width",
        "height"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASEventContext": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASEventContext",
    "class_bases": [
      "mas_utils.IsolatedFlexProp"
    ],
    "line": 27610,
    "docstring": "Context for events. Supports flexible attributes (like persistent).\n\nHowever, only picklable primitive datatypes are allowed.\nSee mas_ev_data_ver._strict_can_pickle for more info.\nIn general, DO NOT USE OBJECTS - they will be denied entry.\n\nTo get the current event context, call MASEventContext.get.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 27632,
        "docstring": "Constructor\n\nIN:\n    ctx_data - context data directly from event list. Optional.\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "ctx_data"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__setattr__",
        "line": 27644,
        "docstring": "We don't allow types that cannot be saved to persistent",
        "function_args": {
          "args": [
            "self",
            "name",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "is_allowed_data",
        "line": 27652,
        "docstring": "Checks if the given thing is allowed to be used in context.\n\nIN:\n    thing - thing to check\n\nRETURNS: True if the thing can be used, False otherwise",
        "function_args": {
          "args": [
            "cls",
            "thing"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "get",
        "line": 27689,
        "docstring": "Gets current event context.",
        "function_args": {
          "args": [
            "cls"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "_set",
        "line": 27699,
        "docstring": "Sets current event context - only for internal use.\n\nIN:\n    eli - EventListItem object. Use None to clear.",
        "function_args": {
          "args": [
            "cls",
            "eli"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASEventList": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASEventList",
    "class_bases": [
      "object"
    ],
    "line": 27712,
    "docstring": "representation of persistent.event_list*\n\n*not literally, this should be considered an abstraction layer with\nunified naming.",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "clear_current",
        "line": 27723,
        "docstring": "Clears the current event aka persistent eli data.",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "load_current",
        "line": 27730,
        "docstring": "Loads the current event as an EventListItem, which is stored in\npersistent eli data.\n\nRETURNS: EventListItem of the current event, or None if no current\n    event.",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_set_current",
        "line": 27744,
        "docstring": "Sets the current event aka persistent eli data using the given\nEventListItem object.\n\nAlso sets persistent.current_monikatopic.\n\nIN:\n    eli - the EventListItem object to set as the current one.\n        pass None to clear the current event data.",
        "function_args": {
          "args": [
            "eli"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "sync_current",
        "line": 27766,
        "docstring": "Syncs the current event persistent vars, aka:\n    - current_monikatopic\n    - _mas_curr_eli_data",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "clean",
        "line": 27792,
        "docstring": "Cleans the event list and makes sure all events are of the\nappropriate length and have a valid label.",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "iter",
        "line": 27821,
        "docstring": "an iterable over event list that yields EventListITem objects\n\nASSUMES event list data is valid\n\nRETURNS: generator/iterable over persistent.event_list",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "is_paused",
        "line": 27833,
        "docstring": "Checks if events are paused - also updates the event pause dt vars.\n\nRETURNS: True if events are paused, False otherwise.",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_next",
        "line": 27849,
        "docstring": "Gets the next event's data and its location in the event_list.\nThis takes event restrictions into account, aka pausing and idle.\n\nRETURNS: tuple of the following format:\n    [0] - EventListItem of the next event, or None if no next event\n    [1] - the index of the event, or -1 if no next event",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "peek",
        "line": 27888,
        "docstring": "Gets the EventListItem for the next event on the event list, but\ndoes NOT remove it.\n\nThis will respect pausing and other next event restrictions.\n\nDoes NOT set additional vars that pop does - please use pop\nwhen actually planning to execute an event.\n\nRETURNS: EventListItem object for the next event, or None if no\nnext event.",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "pop",
        "line": 27904,
        "docstring": "Gets the EventListItem for the next event on the event list and\nremoves the event from the event list.\n\nThis will respect pausing and other next event restrictions.\n\nAlso sets:\n    persistent.current_monikatopic\n    persistent._mas_eli_data\n\nRETURNS: EventListItem object for the next event",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "push",
        "line": 27930,
        "docstring": "Pushes an event to the list - this will make the event trigger\nnext unless something else is pushed.\n\nIN:\n    @event_label - a renpy label for the event to be called\n    skipmidloopeval - do we want to skip the mid loop eval to\n        prevent other rogue events from interrupting.\n        (Defaults: False)\n    notify - True will trigger a notification if appropriate. False\n        will not\n        (Default: False)\n    context - set to a MASEventContext object to supply extra\n        context to the event\n        (accessible via MASEventContext.get())\n        (Default: None)",
        "function_args": {
          "args": [
            "event_label",
            "skipeval",
            "notify",
            "context"
          ],
          "pos_only_args": [],
          "defaults": [
            "False",
            "False",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_push_eli",
        "line": 27958,
        "docstring": "Pushes an EventListItem directly. only for internal use.\n\nIN:\n    eli - EventListItem to push",
        "function_args": {
          "args": [
            "eli"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "queue",
        "line": 27968,
        "docstring": "Queues an event to the list - this will make the event trigger,\nbut not right away unless the list is empty.\n\nIN:\n    @event_label - a renpy label for the event to be called\n    notify - True will trigger a notification if appropriate, False\n        will not\n        (Default: False)\n    context - set to a MASEventContext object to supply extra\n        context to the event\n        (accessible via MASEventContext.get())\n        (Default: None)",
        "function_args": {
          "args": [
            "event_label",
            "notify",
            "context"
          ],
          "pos_only_args": [],
          "defaults": [
            "False",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_queue_eli",
        "line": 27990,
        "docstring": "Queues an EventListItem directly, only for internal use.\n\nIN:\n    eli - EventListItem to queue",
        "function_args": {
          "args": [
            "eli"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "rev_enum_iter",
        "line": 28000,
        "docstring": "Reverse enumerated iterable for event list.\n\nASSUMES persistent.event_list is valid\n\nRETURNS: reverse enumerated iterable:\n    [0] - index\n    [1] - EventListItem",
        "function_args": {
          "args": [
            "cls"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "rev_idx_iter",
        "line": 28014,
        "docstring": "Reverse index iterable. If you want index iterable, please use\nenumerate with iter.\n\nRETURNS: reverse index iterable for event list",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "addEvent": {
    "type": "function",
    "function_decorators": [],
    "identifier": "addEvent",
    "line": 28024,
    "docstring": "Adds an event object to the given eventdb dict\nProperly checksfor label and conditional statements\nThis function ensures that a bad item is not added to the database\n\nNOTE: this MUST be ran after init level 4.\n\nIN:\n    event - the Event object to add to database\n    eventdb - The Event databse (dict) we want to add to\n        NOTE: DEPRECATED. Use code instead.\n        NOTE: this can still be used for custom adds.\n        (Default: None)\n    skipCalendar - flag that marks wheter or not calendar check should\n        be skipped\n        (Default: True)\n\n    restartBlacklist - True if this topic should be added to the restart blacklist\n        (Default: False)\n\n    markSeen - True if this topic should be `True` in persistent._seen_ever.\n        (Default: False)\n\n    code - code of the event database to add to.\n        (Default: EVE) - event database",
    "function_args": {
      "args": [
        "event",
        "eventdb",
        "skipCalendar",
        "restartBlacklist",
        "markSeen",
        "code"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "True",
        "False",
        "False",
        "'EVE'"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "hideEventLabel": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='mas_hideEVL', should_raise=True)"
    ],
    "identifier": "hideEventLabel",
    "line": 28095,
    "function_args": {
      "args": [
        "eventlabel",
        "lock",
        "derandom",
        "depool",
        "decond",
        "eventdb"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False",
        "False",
        "False",
        "evhand.event_database"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "hideEvent": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='mas_hideEvent')"
    ],
    "identifier": "hideEvent",
    "line": 28123,
    "function_args": {
      "args": [
        "event",
        "lock",
        "derandom",
        "depool",
        "decond"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False",
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hideEvent": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hideEvent",
    "line": 28149,
    "docstring": "Hide an event by Falsing its unlocked/random/pool props\n\nIN:\n    ev - event object we want to hide\n    lock - True if we want to lock this event, False if not\n        (Default: False)\n    derandom - True fi we want to unrandom this Event, False if not\n        (Default: False)\n    depool - True if we want to unpool this event, Flase if not\n        (Default: False)\n    decond - True if we want to remove the conditional, False if not\n        (Default: False)",
    "function_args": {
      "args": [
        "ev",
        "lock",
        "derandom",
        "depool",
        "decond"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False",
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hideEventLabel": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hideEventLabel",
    "line": 28179,
    "docstring": "Hide an event label by Falsing its unlocked/random/pool props\n\nNOTE: use this with custom eventdbs\n\nIN:\n    ev_label - label of the event we wnat to hide\n    lock - True if we want to lock this event, False if not\n        (Default: False)\n    derandom - True fi we want to unrandom this Event, False if not\n        (Default: False)\n    depool - True if we want to unpool this event, Flase if not\n        (Default: False)\n    decond - True if we want to remove the conditional, False if not\n        (Default: False)\n    eventdb - event databsae ev_label is in\n        (Default: evhand.event_database)",
    "function_args": {
      "args": [
        "ev_label",
        "lock",
        "derandom",
        "depool",
        "decond",
        "eventdb"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False",
        "False",
        "False",
        "evhand.event_database"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_showEvent": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_showEvent",
    "line": 28215,
    "docstring": "Show an event by Truing its unlock/ranomd/pool props\n\nIN:\n    ev - event to show\n    unlock - True if we want to unlock this event, False if not\n        (Default: False)\n    _random - True if we want to random this event, Flase otherwise\n        (Default: False)\n    _pool - True if we want to pool this event, False otherwise\n        (Default: False)",
    "function_args": {
      "args": [
        "ev",
        "unlock",
        "_random",
        "_pool"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_showEventLabel": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_showEventLabel",
    "line": 28244,
    "docstring": "Shows an event label, by Truing the unlocked, random, and pool\nproperties.\n\nNOTE: use this for custom event dbs\n\nIN:\n    ev_label - label of event to show\n    unlock - True if we want to unlock this event, False if not\n        (DEfault: False)\n    _random - True if we want to random this event, False if not\n        (Default: False)\n    _pool - True if we want to pool this event, False if not\n        (Default: False)\n    eventdb - eventdatabase this label belongs to\n        (Default: evhannd.event_database)",
    "function_args": {
      "args": [
        "ev_label",
        "unlock",
        "_random",
        "_pool",
        "eventdb"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False",
        "False",
        "evhand.event_database"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "lockEvent": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='mas_lockEvent', should_raise=True)"
    ],
    "identifier": "lockEvent",
    "line": 28271,
    "docstring": "NOTE: DEPRECATED\nLocks the given event object\n\nIN:\n    ev - the event object to lock",
    "function_args": {
      "args": [
        "ev"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "lockEventLabel": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='mas_lockEventLabel', should_raise=True)"
    ],
    "identifier": "lockEventLabel",
    "line": 28282,
    "docstring": "NOTE: DEPRECATED\nLocks the given event label\n\nIN:\n    evlabel - event label of the event to lock\n    eventdb - Event database to find this label",
    "function_args": {
      "args": [
        "evlabel",
        "eventdb"
      ],
      "pos_only_args": [],
      "defaults": [
        "evhand.event_database"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_lockEvent": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_lockEvent",
    "line": 28294,
    "docstring": "Locks the given event object\n\nIN:\n    ev - the event object to lock",
    "function_args": {
      "args": [
        "ev"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_lockEventLabel": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_lockEventLabel",
    "line": 28304,
    "docstring": "Locks the given event label\n\nIN:\n    evlabel - event label of the event to lock\n    eventdb - Event database to find this label",
    "function_args": {
      "args": [
        "evlabel",
        "eventdb"
      ],
      "pos_only_args": [],
      "defaults": [
        "evhand.event_database"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "pushEvent": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='MASEventList.push')"
    ],
    "identifier": "pushEvent",
    "line": 28316,
    "docstring": "This pushes high priority or time sensitive events onto the top of\nthe event list\n\nIN:\n    @event_label - a renpy label for the event to be called\n    skipmidloopeval - do we want to skip the mid loop eval to\n        prevent other rogue events from interrupting.\n        (Defaults: False)\n    notify - True will trigger a notification if appropriate. False\n        will not\n        (Default: False)\n\nASSUMES:\n    persistent.event_list",
    "function_args": {
      "args": [
        "event_label",
        "skipeval",
        "notify"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "queueEvent": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='MASEventList.queue')"
    ],
    "identifier": "queueEvent",
    "line": 28337,
    "docstring": "This adds low priority or order-sensitive events onto the bottom of\nthe event list. This is slow, but rarely called and list should be\nsmall.\n\nIN:\n    @event_label - a renpy label for the event to be called\n    notify - True will trigger a notification if appropriate, False\n        will not\n        (Default: False)\n\nASSUMES:\n    persistent.event_list",
    "function_args": {
      "args": [
        "event_label",
        "notify"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "unlockEvent": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='mas_unlockEvent', should_raise=True)"
    ],
    "identifier": "unlockEvent",
    "line": 28356,
    "docstring": "NOTE: DEPRECATED\nUnlocks the given evnet object\n\nIN:\n    ev - the event object to unlock",
    "function_args": {
      "args": [
        "ev"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "unlockEventLabel": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='mas_unlockEventLabel')"
    ],
    "identifier": "unlockEventLabel",
    "line": 28367,
    "docstring": "NOTE: DEPRECATED\nUnlocks the given event label\n\nIN:\n    evlabel - event label of the event to lock\n    eventdb - Event database to find this label",
    "function_args": {
      "args": [
        "evlabel",
        "eventdb"
      ],
      "pos_only_args": [],
      "defaults": [
        "evhand.event_database"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_unlockEvent": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_unlockEvent",
    "line": 28379,
    "docstring": "Unlocks the given evnet object\n\nIN:\n    ev - the event object to unlock",
    "function_args": {
      "args": [
        "ev"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_unlockEventLabel": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_unlockEventLabel",
    "line": 28389,
    "docstring": "Unlocks the given event label\n\nIN:\n    evlabel - event label of the event to lock\n    eventdb - Event database to find this label",
    "function_args": {
      "args": [
        "evlabel",
        "eventdb"
      ],
      "pos_only_args": [],
      "defaults": [
        "evhand.event_database"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "isFuture": {
    "type": "function",
    "function_decorators": [],
    "identifier": "isFuture",
    "line": 28400,
    "docstring": "Checks if the start_date of the given event happens after the\ngiven time.\n\nIN:\n    ev - Event to check the start_time\n    date - a datetime object used to check against\n        If None is passed it will check against current time\n        (Default: None)\n\nRETURNS:\n    True if the Event's start_date is in the future, False otherwise",
    "function_args": {
      "args": [
        "ev",
        "date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "isPast": {
    "type": "function",
    "function_decorators": [],
    "identifier": "isPast",
    "line": 28417,
    "docstring": "Checks if the end_date of the given event happens before the\ngiven time.\n\nIN:\n    ev - Event to check the start_time\n    date - a datetime object used to check against\n        If None is passed it will check against current time\n        (Default: None)\n\nRETURNS:\n    True if the Event's end_date is in the past, False otherwise",
    "function_args": {
      "args": [
        "ev",
        "date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "isPresent": {
    "type": "function",
    "function_decorators": [],
    "identifier": "isPresent",
    "line": 28434,
    "docstring": "Checks if current date falls within the given event's start/end date\nrange\n\nIN:\n    ev - Event to check the start_time and end_time\n\nRETURNS:\n    True if current time is inside the  Event's start_date/end_date\n    interval, False otherwise",
    "function_args": {
      "args": [
        "ev"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "popEvent": {
    "type": "function",
    "function_decorators": [
      "store.mas_utils.deprecated(use_instead='MASEventList.pop', should_raise=True)"
    ],
    "identifier": "popEvent",
    "line": 28450,
    "docstring": "DO NOT USE.\n\nUse MASEventList.pop instead (not exactly the same)",
    "function_args": {
      "args": [
        "remove"
      ],
      "pos_only_args": [],
      "defaults": [
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "seen_event": {
    "type": "function",
    "function_decorators": [],
    "identifier": "seen_event",
    "line": 28459,
    "docstring": "Please use mas_seenEvent, this function hasn't been deprecated\nonly because it's used a lot in event conditionals\nand I don't want to update them all",
    "function_args": {
      "args": [
        "event_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_seenEvent": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_seenEvent",
    "line": 28467,
    "docstring": "This checks if an event has either been seen or is already in the\nevent list.\n\nIN:\n    event_lable = The label for the event to be checked\n\nASSUMES:\n    persistent.event_list",
    "function_args": {
      "args": [
        "event_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_findEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_findEVL",
    "line": 28481,
    "docstring": "Finds index of the given event label in the even tlist\n\nIN:\n    event_label - event lable to check\n\nRETURNS: index of the event in teh even tlist, -1 if not found",
    "function_args": {
      "args": [
        "event_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_inEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_inEVL",
    "line": 28497,
    "docstring": "This checks if an event is in the event list\n\nIN:\n    event_label - event lable to check\n\nRETURNS: True if in event list, False if not",
    "function_args": {
      "args": [
        "event_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_rmEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_rmEVL",
    "line": 28509,
    "docstring": "REmoves an event from the event list if it exists\n\nIN:\n    event label to remove",
    "function_args": {
      "args": [
        "event_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_rmallEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_rmallEVL",
    "line": 28521,
    "docstring": "Removes all events with athe given label\n\nIN:\n    event label to remove",
    "function_args": {
      "args": [
        "event_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "restartEvent": {
    "type": "function",
    "function_decorators": [],
    "identifier": "restartEvent",
    "line": 28534,
    "docstring": "This checks if there is a persistent topic, and if there was push it\nback on the stack with a little comment.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isRstBlk": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isRstBlk",
    "line": 28552,
    "docstring": "Checks if the event with the current label is blacklistd from being\nrestarted\n\nIN:\n    topic_label - label of the event we are trying to restart",
    "function_args": {
      "args": [
        "topic_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_cleanEventList": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_cleanEventList",
    "line": 28581,
    "docstring": "Iterates through the event list and removes items which shouldn't be restarted",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_cleanJustSeen": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_cleanJustSeen",
    "line": 28589,
    "docstring": "Cleans the given event list of just seen items (withitn the THRESHOLD)\nretunrs not just seen items\n\nIN:\n    eventlist - list of event labels to pick from\n    db - database these events are tied to\n\nRETURNS:\n    cleaned list of events (stuff not in the time THREASHOLD)",
    "function_args": {
      "args": [
        "eventlist",
        "db"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_cleanJustSeenEV": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_cleanJustSeenEV",
    "line": 28619,
    "docstring": "Cleans the given event list (of events) of just seen items\n(within the THRESHOLD). Returns not just seen items.\nBasically the same as mas_cleanJustSeen, except for Event object lists\n\nIN:\n    ev_list - list of event objects\n\nRETURNS:\n    cleaned list of events (stuff not in the tiem THRESHOLD)",
    "function_args": {
      "args": [
        "ev_list"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_unlockPrompt": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_unlockPrompt",
    "line": 28648,
    "docstring": "Unlocks a pool event\n\nIN:\n    count - number of pool events to unlock\n        (Default: 1)\n\nRETURNS:\n    True if an event was unlocked. False otherwise",
    "function_args": {
      "args": [
        "count"
      ],
      "pos_only_args": [],
      "defaults": [
        "1"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASChessDisplayableBase": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASChessDisplayableBase",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 28715,
    "docstring": "Base chess displayable for chess things\n\nInherit this for custom implementations like proper games or for teaching use",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 28796,
        "docstring": "MASChessDisplayableBase constructor\n\nIN:\n    is_player_white - color the player is playing\n    pgn_game - previous game to load (chess.pgn.Game)\n        if a starting_fen is provided alongside this, the fen is ignored\n        (Default: None)\n    starting_fen - starting fen to use if starting a custom scenario\n        NOTE: This is not verified for validity\n        (Default: None)\n    casual_rules - whether or not we're playing under casual rules\n        This changes:\n            - Stalemates will automatically be a victory for the player who has not been trapped\n        (NOTE: To add more casual adjustments, use conditions with `self.casual_rules` to run casual rule logic)\n        (Default: False)\n    player_move_prompts - prompts to use to indicate player move\n        If not provided, no player prompts will be used\n        (Default: None)\n    monika_move_quips - quips to use when Monika's having her turn\n        If not provided, no quips will be used\n        (Default: None)\n\nNOTE: Requires the following to be implemented for buttons to show:\n    self._visible_buttons - list of MASButtonDisplayables which should be displayed during the game\n    self._visible_buttons_winner - list of MASButtonDisplayables which should be displayed post game\n\nNOTE: The following function MUST be implemented in a class which inherits this:\n    self.check_buttons",
        "function_args": {
          "args": [
            "self",
            "is_player_white",
            "pgn_game",
            "starting_fen",
            "casual_rules",
            "player_move_prompts",
            "monika_move_quips"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None",
            "False",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "additional_setup",
        "line": 28955,
        "docstring": "Additional setup instructions for the displayable\n\nImplement to use an engine or add some other setup\n\nNOTE: IMPLEMENTATION OF THIS IS OPTIONAL.\nIt is only required to initialize a chess engine",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "start_monika_analysis",
        "line": 28966,
        "docstring": "Starts Monika's analysis of the board\n\nImplement to allow a chess engine to analyze the board and begin predicting moves\n\nNOTE: IMPLEMENTATION OF THIS IS OPTIONAL.\nIt is only required if and only if we want Monika to play using an engine rather than manually queued moves",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "poll_monika_move",
        "line": 28977,
        "docstring": "Polls for a Monika move\n\nImplement to automate Monika's moves (use for an engine)\n\nNOTE: IMPLEMENTATION OF THIS IS OPTIONAL.\nIt is only required if and only if we want Monika to play using an engine rather than manually queued moves",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "set_button_states",
        "line": 28988,
        "docstring": "Sets button states\n\nNOTE: IMPLEMENTATION OF THIS IS OPTIONAL.\nIf is only required for chess displayables which would need to manage any buttons for states",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "check_buttons",
        "line": 28997,
        "docstring": "Runs button checks/functions if pressed\n\nShould be implemnted as necessary for provided buttons\n\nNOTE: REQUIRED for displayables with buttons added, otherwise their actions will never execute\n\nTHROWS:\n    NotImplementedError - Provided the displayable has buttons and is run",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "handle_monika_move",
        "line": 29010,
        "docstring": "Handles Monika's move\n\nRe-implement to allow Monika's moves to be handled by an engine",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "handle_player_move",
        "line": 29023,
        "docstring": "Handles the player's move\n\nRe-implement to allow the player to move pieces",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": "args"
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "toggle_sensitivity",
        "line": 29040,
        "docstring": "Toggles sensitivity of this displayable\n\nOUT:\n    new sensitivity as a boolean",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "queue_move",
        "line": 29050,
        "docstring": "Queues a move to the player move stack\n\nIN:\n    move_str - uci move string",
        "function_args": {
          "args": [
            "self",
            "move_str"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_player_turn",
        "line": 29059,
        "docstring": "Checks if it's currently the player's turn",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "check_redraw",
        "line": 29065,
        "docstring": "Checks if we need to redraw the MASPieces on the board and redraws if necessary",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "update_pieces",
        "line": 29074,
        "docstring": "Updates the position of all MASPieces",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_piece_at",
        "line": 29089,
        "docstring": "Gets the piece at the given coordinates\n\nOUT:\n    chess.Piece if exists at that location\n    None otherwise",
        "function_args": {
          "args": [
            "self",
            "px",
            "py"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "request_highlight",
        "line": 29099,
        "docstring": "Requests the renderer to draw a highlight on the square at the specified square\n\nIN:\n    board_pos - position string representing the board square to highlight (example a2)",
        "function_args": {
          "args": [
            "self",
            "board_pos"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "remove_highlight",
        "line": 29111,
        "docstring": "Removes a requested highlight from the board-coordinates provided\n\nIN:\n    board_pos - position string representing the board square to remove the highlight",
        "function_args": {
          "args": [
            "self",
            "board_pos"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_chess__push_move",
        "line": 29123,
        "docstring": "Internal function which pushes a uci move to the board and all MASPieces, handling promotions as necessary\n\nIN:\n    move_str - uci string representing the move to push\n\nNOTE: This does NOT verify validity",
        "function_args": {
          "args": [
            "self",
            "move_str"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "game_loop",
        "line": 29166,
        "docstring": "Runs the game loop",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "show",
        "line": 29213,
        "docstring": "Shows this displayable",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hide",
        "line": 29221,
        "docstring": "Hides this displayable",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_player_winner",
        "line": 29229,
        "docstring": "Checks if Monika has won the game\n\nOUT:\n    boolean:\n        - True if Monika has won the game\n        - False if not, or the game is still in progress",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 29246,
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 29421,
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_piece_pos",
        "line": 29480,
        "docstring": "Gets the piece position of the current piece held by the mouse\n\nOUT:\n    Tuple of coordinates (x, y) marking where the piece is",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "coords_to_uci",
        "line": 29508,
        "docstring": "Converts board coordinates to a uci move\n\nIN:\n    x - x co-ord of the piece\n    y - y co-ord of the piece\n\nOUT:\n    the move represented in the uci form",
        "function_args": {
          "args": [
            "x",
            "y"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "uci_to_coords",
        "line": 29524,
        "docstring": "Converts uci to board-coordinates\n\nIN:\n    uci - uci move to convert to coords\n\nOUT:\n    list of tuples, [(x1, y1), (x2, y2)] representing from coords -> to coords",
        "function_args": {
          "args": [
            "uci"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "uci_alpha_to_x_coord",
        "line": 29542,
        "docstring": "Converts a uci alphabet (a-h) to an x-coord for the board\n\nIN:\n    alpha - alphabet to convert to a board x-coord",
        "function_args": {
          "args": [
            "alpha"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "square_to_board_coords",
        "line": 29552,
        "docstring": "Converts from square number to board coords\n\nIN:\n    sq_num - square number to convert\n\nOUT:\n    tuple - (x, y) coords representing board coordinates for the square provided",
        "function_args": {
          "args": [
            "sq_num"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "board_coords_to_screen_coords",
        "line": 29565,
        "docstring": "Converts board coordinates to (x, y) coordinates to use to position things on screen\n\nIN:\n    pos_tuple - (x, y) tuple representing coordinates which need to be converted\n    inversion_tuple - (x_invert, y_invert) tuple representing direction to invert piece coords\n\nOUT:\n    Tuple - (x, y) coordinates for the screen to use",
        "function_args": {
          "args": [
            "pos_tuple",
            "inversion_tuple"
          ],
          "pos_only_args": [],
          "defaults": [
            "(False, False)"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "invert_coord",
        "line": 29590,
        "docstring": "Inverts a board coordinate\n\nIN:\n    value - coordinate part (x or y) to invert",
        "function_args": {
          "args": [
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASPiece": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASPiece",
    "class_bases": [
      "object"
    ],
    "line": 29600,
    "docstring": "MASChessPiece\n\nA better implementation of chess.Piece which also manages piece location in addition to color and symbol\n\nPROPERTIES:\n    color - Color of the piece:\n        True - white\n        False - black\n    symbol - letter symbol representing the piece. If capital, the piece is white\n    piece_map - the map containing all the pieces (the MASPiece object will be stored in it)\n    x_pos - x coordinate of this piece on the board\n    y_pos - y coordinate of this piece on the board",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 29631,
        "docstring": "MASPiece constructor\n\nIN:\n    is_white - Whether or not the piece is white\n    symbol - letter symbol representing the piece. If capital, the piece is white\n    posX - x position of the piece\n    posY - y position of the piece\n    piece_map - Map to store this piece in",
        "function_args": {
          "args": [
            "self",
            "is_white",
            "symbol",
            "posX",
            "posY",
            "piece_map"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__eq__",
        "line": 29665,
        "docstring": "Checks if this piece is the same as another piece",
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 29673,
        "docstring": "Handles a representation of this piece",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "fromPiece",
        "line": 29680,
        "docstring": "Initializes a MASPiece from a chess.Piece object\n\nIN:\n    piece - piece to base the MASPiece off of\n    pos_tuple - (x, y) tuple representing the piece's board coords\n\n    SEE: __init__ for the rest of the parameters\n\nOUT:\n    MASPiece",
        "function_args": {
          "args": [
            "piece",
            "pos_tuple",
            "piece_map"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_type",
        "line": 29701,
        "docstring": "Gets the type of piece as the lowercase letter that is its symbol\n\nOUT:\n    The lower only symbol, representing the type of piece this is",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_location",
        "line": 29710,
        "docstring": "Gets the location of this piece\n\nOUT:\n    Tuple, (x, y) coords representing the location of the piece on the board",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "promote_to",
        "line": 29719,
        "docstring": "Promotes this piece and builds a new render for it\n\nIN:\n    promoted_piece_symbol - Symbol representing the piece we're promoting to",
        "function_args": {
          "args": [
            "self",
            "promoted_piece_symbol"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "move",
        "line": 29730,
        "docstring": "Moves the piece from the given position, to the given position",
        "function_args": {
          "args": [
            "self",
            "new_x",
            "new_y"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 29743,
        "docstring": "Internal render call to render the pieces. To be called by the board\n\nIN:\n    width - screen width\n    height - screen height\n    st - start time\n    at - animation time\n    x - x position on the board to render the piece\n    y - y position on the board to render the piece\n    renderer to draw this piece on",
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at",
            "x",
            "y",
            "renderer"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASBoard": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASBoard",
    "class_bases": [
      "chess.Board"
    ],
    "line": 29761,
    "docstring": "Extension class for the chess.Board class",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 29765,
        "docstring": "MASBoard constructor\n\nIN (New property):\n    casual_rules:\n        - Whether or not we'll be using casual rules\n        (Default: False)\n\nSame as chess.Board constructor, adds two properties",
        "function_args": {
          "args": [
            "self",
            "fen",
            "chess960",
            "casual_rules"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "False",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "from_board",
        "line": 29786,
        "docstring": "Initializes a MASBoard from a chess.Board\n\nIN:\n    Board - chess.Board to convert\n    casual_rules - Whether or not we're using casual rules\n\nOUT:\n    MASBoard object representing the given Board.",
        "function_args": {
          "args": [
            "Board",
            "casual_rules"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "push",
        "line": 29799,
        "docstring": "push override\n\nUpdates the position with the given move and puts it onto the\nmove stack\n\nAlso sets a flag which the MASChessDisplayableBase can use to manage redrawing MASPieces\n\nIN:\n    chess.Move to push",
        "function_args": {
          "args": [
            "self",
            "move"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "result",
        "line": 29920,
        "docstring": "Gets the game result.\n\n``1-0``, ``0-1`` or ``1/2-1/2`` if the\n:func:`game is over <chess.Board.is_game_over()>`. Otherwise, the\nresult is undetermined: ``*``.",
        "function_args": {
          "args": [
            "self",
            "claim_draw"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "MASChessDisplayable": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASChessDisplayable",
    "class_bases": [
      "MASChessDisplayableBase"
    ],
    "line": 29962,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 29963,
        "function_args": {
          "args": [
            "self",
            "is_player_white",
            "pgn_game",
            "starting_fen",
            "practice_mode",
            "casual_rules"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None",
            "False",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__del__",
        "line": 30100,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "poll_monika_move",
        "line": 30104,
        "docstring": "Polls stockfish for a move for Monika to make\n\nOUT:\n    move - representing the best move stockfish found",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "start_monika_analysis",
        "line": 30121,
        "docstring": "Starts Monika's analysis of the board",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "additional_setup",
        "line": 30129,
        "docstring": "Additional stockfish setup to get the game going using it as Monika's engine",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "check_buttons",
        "line": 30238,
        "docstring": "Runs button checks/functions if pressed",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "undo_move",
        "line": 30276,
        "docstring": "Undoes the last move\n\nOUT:\n    None",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "handle_player_move",
        "line": 30323,
        "docstring": "Manages player move",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "handle_monika_move",
        "line": 30363,
        "docstring": "Manages Monika's move",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "set_button_states",
        "line": 30386,
        "docstring": "Manages button states",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_quitPGN",
        "line": 30434,
        "docstring": "Generates a pgn of the board, and depending on if we are\ndoing previous game or not, does appropriate header\nsetting\n\nIN:\n    quit_reason - reason the game was quit\n        0 - Normal savegame/victor found\n        1 - Player surrendered\n        2 - Player requested draw\n        (Default: 0)\n\n    giveup - True if the player surrendered, False otherwise\n    requested_draw - whether or not the player requested a draw\n\nRETURNS: tuple of the following format:\n    [0]: chess.pgn.Game object of this game\n    [1]: True if monika won, False if not\n    [2]: True if player gaveup, False otherwise\n    [3]: number of turns of this game",
        "function_args": {
          "args": [
            "self",
            "quit_reason"
          ],
          "pos_only_args": [],
          "defaults": [
            "0"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_getBackground": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getBackground",
    "line": 30517,
    "docstring": "Gets a MASFilterableBackground by id\n\nIN:\n    background_id - id of the background to get\n    default - default to return if not found\n\nOUT:\n    MASFilterableBackground if found, None otherwise",
    "function_args": {
      "args": [
        "background_id",
        "default"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getCurrentBackgroundId": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getCurrentBackgroundId",
    "line": 30533,
    "docstring": "Returns the id of the current background\n\nIN:\n    default - the fallback value to return\n        (Default: None)\n\nOUT:\n    string - the bg id\n    or default if not found",
    "function_args": {
      "args": [
        "default"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isBackgroundUnlocked": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isBackgroundUnlocked",
    "line": 30550,
    "docstring": "Checks if a background with the given id is unlocked\n\nIN:\n    id_ - str - the background id\n\nOUT:\n    boolean",
    "function_args": {
      "args": [
        "id_"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "PongDisplayable": {
    "type": "class",
    "class_decorators": [],
    "identifier": "PongDisplayable",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 30569,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 30571,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_random_offset",
        "line": 30652,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "visit",
        "line": 30655,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "check_bounce_off_top",
        "line": 30658,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "check_bounce_off_bottom",
        "line": 30692,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getCollisionY",
        "line": 30726,
        "function_args": {
          "args": [
            "self",
            "hotside",
            "is_computer"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 30754,
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 30958,
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "_mas_check_ev_type_bool": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_check_ev_type_bool",
    "line": 30991,
    "function_args": {
      "args": [
        "val",
        "name",
        "report",
        "delim",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "' | '",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_check_ev_type_dict": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_check_ev_type_dict",
    "line": 30996,
    "function_args": {
      "args": [
        "val",
        "name",
        "report",
        "delim",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "' | '",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_check_ev_type_dt": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_check_ev_type_dt",
    "line": 31001,
    "function_args": {
      "args": [
        "val",
        "name",
        "report",
        "delim",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "' | '",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_check_ev_type_evact": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_check_ev_type_evact",
    "line": 31006,
    "function_args": {
      "args": [
        "val",
        "name",
        "report",
        "delim",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "' | '",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_check_ev_type_int": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_check_ev_type_int",
    "line": 31011,
    "function_args": {
      "args": [
        "val",
        "name",
        "report",
        "delim",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "' | '",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_check_ev_type_str": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_check_ev_type_str",
    "line": 31016,
    "function_args": {
      "args": [
        "val",
        "name",
        "report",
        "delim",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "' | '",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_check_ev_type_tuli": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_check_ev_type_tuli",
    "line": 31024,
    "function_args": {
      "args": [
        "val",
        "name",
        "report",
        "delim",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "' | '",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_check_ev_type_tuli_aff": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_check_ev_type_tuli_aff",
    "line": 31035,
    "function_args": {
      "args": [
        "val",
        "name",
        "report",
        "delim",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "' | '",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_check_ev_type": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_check_ev_type",
    "line": 31040,
    "docstring": "Checks typers of the given event, then returns a string report\n\nIN:\n    ev - event to check\n\nRETURNS: single line string report",
    "function_args": {
      "args": [
        "ev",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_check_ev_type_per": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_check_ev_type_per",
    "line": 31076,
    "docstring": "Checks typers of the given event line, then returns a string report\nNOTE: this uses data that would be stored in a perdb\nASSUMES: lines match.\n\nIN:\n    ev_line - line of persistent tuple data to check\n\nRETURNS: single line string report",
    "function_args": {
      "args": [
        "ev_line",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_check_event_types": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_check_event_types",
    "line": 31119,
    "docstring": "Goes through given persistent database for events and double checks \ntypes. Returns a string report.\n\nIN:\n    per_db - persistent db of events to check types of\n    str_buffer - the string buffer we should write to.\n        If None, we do NO reporting.\n    str_rep - UNUSED\n\nRETURNS:\n    string report int he given buffer",
    "function_args": {
      "args": [
        "per_db",
        "str_buffer",
        "str_rep"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_largest_persistent_item": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_largest_persistent_item",
    "line": 31140,
    "docstring": "Determines largest item in persistent\n\nRETURNS: tuple of the following format:\n    [0] - key of item\n    [1] - size of item",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_per_dump": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_per_dump",
    "line": 31159,
    "docstring": "Dumps something from persistent\n\nIN:\n    item_key - the string name of the item to dump",
    "function_args": {
      "args": [
        "item_key"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_per_dump_dict": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_per_dump_dict",
    "line": 31177,
    "docstring": "Dumps an output of a persistent dict\n\nIN:\n    dkey - the string name of the dict to dump",
    "function_args": {
      "args": [
        "dkey"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_per_dump_list": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_per_dump_list",
    "line": 31190,
    "docstring": "Dumps an output of a persistent list\n\nIN:\n    lkey - the string name of the list to dump",
    "function_args": {
      "args": [
        "lkey"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "dev_api_key_tester": {
    "type": "function",
    "function_decorators": [],
    "identifier": "dev_api_key_tester",
    "line": 31217,
    "function_args": {
      "args": [
        "key"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "dev_api_key_tester_error": {
    "type": "function",
    "function_decorators": [],
    "identifier": "dev_api_key_tester_error",
    "line": 31222,
    "function_args": {
      "args": [
        "key"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "dev_api_key_tester_returns_not_tuple": {
    "type": "function",
    "function_decorators": [],
    "identifier": "dev_api_key_tester_returns_not_tuple",
    "line": 31226,
    "function_args": {
      "args": [
        "key"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "dev_api_key_tester_returns_not_long_enough": {
    "type": "function",
    "function_decorators": [],
    "identifier": "dev_api_key_tester_returns_not_long_enough",
    "line": 31230,
    "function_args": {
      "args": [
        "key"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "dev_api_key_tester_false_not_valid_error_msg": {
    "type": "function",
    "function_decorators": [],
    "identifier": "dev_api_key_tester_false_not_valid_error_msg",
    "line": 31234,
    "function_args": {
      "args": [
        "key"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "dev_register_multipleAPI": {
    "type": "function",
    "function_decorators": [],
    "identifier": "dev_register_multipleAPI",
    "line": 31272,
    "docstring": "For testing - use to register a ton of api keys\n\nIN:\n    count - number of keys to register",
    "function_args": {
      "args": [
        "count"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASClickZoneTester": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASClickZoneTester",
    "class_bases": [
      "MASZoomableInteractable"
    ],
    "line": 31289,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 31293,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "quick_add",
        "line": 31304,
        "function_args": {
          "args": [
            "self",
            "zone_enum"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_zones",
        "line": 31310,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "build_zone_actions",
        "line": 31324,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 31337,
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 31340,
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_canShowIslands": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_canShowIslands",
    "line": 31400,
    "docstring": "Global check for whether or not we can show the islands event\nThis only checks the technical side, NOT event unlocks\n\nIN:\n    flt - the filter to use in check\n        If None, we fetch the current filter\n        If False, we don't check the fitler at all\n        (Default: None)\n\nOUT:\n    boolean",
    "function_args": {
      "args": [
        "flt"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_startupPlushieLogic": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_startupPlushieLogic",
    "line": 31436,
    "docstring": "Runs a simple random check for the quetzal plushie.\n\nIN:\n    chance - value that determines the chance of that\n        determines if the plushie will appear\n        Defualts to 4",
    "function_args": {
      "args": [
        "chance"
      ],
      "pos_only_args": [],
      "defaults": [
        "4"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_incMoniReload": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_incMoniReload",
    "line": 31478,
    "docstring": "Increments the monika reload counter unless its at max",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isFirstSeshDay": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isFirstSeshDay",
    "line": 31485,
    "docstring": "Checks if _date is the day of first session\n\nIN:\n    _date - date to compare against\n    (NOTE: if not provided, today is assumed)",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hasRPYFiles": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hasRPYFiles",
    "line": 31498,
    "docstring": "Checks if there are rpy files in the gamedir",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getRPYFiles": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getRPYFiles",
    "line": 31504,
    "docstring": "Gets a list of rpy files in the gamedir",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_is18Over": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_is18Over",
    "line": 31512,
    "docstring": "Checks if player is over 18\n\nIN:\n    _date - date to check\n    If None, today is assumed.\n    (Default: None)\n\nOUT:\n    boolean:\n        - True if player is over 18\n        - False otherwise",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getPlayerAge": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getPlayerAge",
    "line": 31532,
    "docstring": "Gets the player age\n\nIN:\n    _date - the datetime.date to get the player age at\n    (Default: None)\n\nOUT:\n    integer representing the player's current age or None if we don't have player's bday",
    "function_args": {
      "args": [
        "_date"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_canShowRisque": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_canShowRisque",
    "line": 31557,
    "docstring": "Checks if we can show something risque\n\nConditions for this:\n    1. Player has had first kiss (No point going for risque things if this hasn't been met yet)\n    2. Player is over 18\n    3. Aff condition (raw)\n\nIN:\n    aff_thresh:\n        - Raw affection value to be greater than or equal to\n    grace:\n        - a grace period passed in as a timedelta\n        defaults to 1 week\n\nOUT:\n    boolean:\n        - True if the above conditions are satisfied\n        - False if not",
    "function_args": {
      "args": [
        "aff_thresh",
        "grace"
      ],
      "pos_only_args": [],
      "defaults": [
        "2000",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_timePastSince": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_timePastSince",
    "line": 31590,
    "docstring": "Checks if a certain amount of time has passed since the time in the timekeeper\nIN:\n    timekeeper:\n        variable holding the time we last checked whatever it restricts\n        (can be datetime.datetime or datetime.date)\n\n    passed_time:\n        datetime.timedelta of the amount of time which should\n        have passed since the last check in order to return True\n\n    _now:\n        time to check against (If none, now is assumed, (Default: None))\nOUT:\n    boolean:\n        - True if it has been passed_time units past timekeeper\n        - False otherwise",
    "function_args": {
      "args": [
        "timekeeper",
        "passed_time",
        "_now"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_pastOneDay": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_pastOneDay",
    "line": 31621,
    "docstring": "One day time past version of mas_timePastSince()\n\nIN:\n    timekeeper - variable holding the time since last event\n    _now - time to check against (Default: None)",
    "function_args": {
      "args": [
        "timekeeper",
        "_now"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_setTODVars": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_setTODVars",
    "line": 31631,
    "docstring": "Sets the mas_globals.time_of_day variable\n\nNOTE: Ignores Suntime values\n\nRULES:\n    4:0o0 AM - 11:59:59 AM == 'morning'\n    12:0o0 PM - 4:59:59 PM == 'afternoon'\n    5:0o0 PM - 8:59:59 PM == 'evening'\n    9:0o0 PM - 3:59:59 AM == 'night'",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_seenLabels": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_seenLabels",
    "line": 31662,
    "docstring": "List format for renpy.seen_label. Allows checking if we've seen multiple labels at once\n\nIN:\n    label_list - list of labels we want to check if we've seen\n    seen_all - True if all labels in label_list must have been seen in order for this function to return True.\n    False otherwise\n        (Default: False)\n        (NOTE: If seen_all is False, seeing ANY of the labels will let this function return True)\n\nOUT:\n    boolean:\n        - True if we have seen the inputted labels and met the seen_all criteria\n        - False otherwise",
    "function_args": {
      "args": [
        "label_list",
        "seen_all"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_a_an_str": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_a_an_str",
    "line": 31692,
    "docstring": "Takes in a reference string and returns it back with an 'a' prefix or 'an' prefix depending on starting letter\n\nIN:\n    ref_str - string in question to prefix\n    ignore_case - whether or not we should ignore capitalization of a/an and not adjust the capitalization of ref_str\n        (Default: True)\n\nOUT:\n    string prefixed with a/an",
    "function_args": {
      "args": [
        "ref_str",
        "ignore_case"
      ],
      "pos_only_args": [],
      "defaults": [
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_a_an": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_a_an",
    "line": 31709,
    "docstring": "Takes in a reference string and returns either a/an based on the first letter of the word\n\nIN:\n    ref_str - string in question to prefix\n    ignore_case - whether or not we should ignore capitalization of a/an and just use lowercase\n        (Default: True)\n\nOUT:\n    a/an based on the ref string",
    "function_args": {
      "args": [
        "ref_str",
        "ignore_case"
      ],
      "pos_only_args": [],
      "defaults": [
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_setEventPause": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_setEventPause",
    "line": 31728,
    "docstring": "Sets a pause 'til next event\n\nIN:\n    seconds - the number of seconds to pause for. Can be None to remove pause\n        (Default: 60)",
    "function_args": {
      "args": [
        "seconds"
      ],
      "pos_only_args": [],
      "defaults": [
        "60"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getCurrentMoniExp": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getCurrentMoniExp",
    "line": 31742,
    "docstring": "Returns Monika's current expression\n\nIN:\n    layer - the layer to check for Monika's displayable\n        You probably shouldn't change this\n        (Default: 'master')\n\nOUT:\n    string with sprite code\n    or None if we couldn't get the exp (e.g. if Monika isn't on the screen)",
    "function_args": {
      "args": [
        "layer"
      ],
      "pos_only_args": [],
      "defaults": [
        "'master'"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "FinishEnterName": {
    "type": "function",
    "function_decorators": [],
    "identifier": "FinishEnterName",
    "line": 31773,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_lastSeenInYear": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_lastSeenInYear",
    "line": 32128,
    "docstring": "Checks whether or not the even was last seen in the year provided\n\nIN:\n    ev_label - label of the event we want to check\n    year - the year we want to check if it's been last seen in\n\nOUT:\n    boolean - True if last seen this year, False otherwise\n\nNOTE: if no year provided, we assume this year",
    "function_args": {
      "args": [
        "ev_label",
        "year"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_lastSeenLastYear": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_lastSeenLastYear",
    "line": 32159,
    "docstring": "Checks if the event corresponding to ev_label was last seen last year",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_after_bath_cleanup_change_outfit": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_after_bath_cleanup_change_outfit",
    "line": 42455,
    "docstring": "After bath cleanup change outfit code",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASConsumable": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASConsumable",
    "class_bases": [],
    "line": 42562,
    "docstring": "Consumable class\n\nPROPERTIES:\n    consumable_id - id of the consumable\n    consumable_type - Type of consumable this is\n    disp_name - friendly name for this consumable\n    dlg_props - dialogue properties for flows for this consumable\n    start_end_tuple_list - list of (start_hour, end_hour) tuples\n    acs - MASAccessory to display for the consumable\n    split_list - list of split hours\n    portable - NOTE: Only for drinks, whether or not Monika can take this with her when taking her somewhere\n    should_restock_warn - whether or not Monika should warn the player that she's running out of this consumable\n    late_entry_list - list of integers storing the hour which would be considered a late entry\n    max_re_serve - amount of times Monika can get a re-serving of this consumable\n    max_stock_amount - maximum stock amount of this consumable to hold\n    cons_chance - likelihood of Monika to keep having this consumable\n    prep_low - bottom bracket of preparation time (NOTE: Should be passed in as number of seconds)\n    prep_high - top bracket of preparation time (NOTE: Should be passed in as number of seconds)\n    cons_low - bottom bracket of consumable time (NOTE: Should be passed in as number of seconds)\n    cons_high - top bracket of consumable time (NOTE: Should be passed in as number of seconds)\n    done_cons_until - the time until Monika can randomly have this consumable again\n    get_cons_evl - evl to use for getting the consumable (no prep)\n    finish_prep_evl - evl to use when finished preparing a consumable\n    finish_cons_evl - evl to use when finished having a consumable",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 42606,
        "docstring": "MASConsumable constructor\n\nIN:\n    consumable_id - id for the consumable\n        NOTE: Must be unique\n\n    consumable_type - type of consumable:\n        0 - Drink\n        1 - Food\n\n    disp_name - Friendly diaply name (for use in dialogue)\n\n    start_end_tuple_list - list of tuples storing (start_hour, end_hour)\n        NOTE: Does NOT support midnight crossover times. If needed, requires a separate entry\n        NOTE: end_hour is exclusive\n\n    acs - MASAccessory object for this consumable\n\n    split_list - list of split hours for prepping\n\n    dlg_props - dialogue properties for use in generic labels. If None, an empty dict is used, and fallback text will be shown\n        AVAILABLE PROPERTIES:\n            - mas_consumables.PROP_CONTAINER - Container for this consumable\n            - mas_consumables.PROP_OBJ_REF - Object reference for this consumable (use if container is not applicable)\n            - mas_consumables.PROP_PLUR - Whether or not this should be referenced as plural in text\n\n        (Default: None)\n\n    portable - NOTE: for drinks only. True if Monika can take this with her when going out\n        (Default: False)\n\n    should_restock_warn - should Monika warn the player that this needs to be restocked?\n        (Default: True)\n\n    late_entry_list - list of times storing when we should load in with a consumable already out\n        If None, the start times from the start_end_tuple_list are assumed\n        NOTE: must be the same length as start_end_tuple_list\n        (Default: None)\n\n    max_re_serve - amount of times Monika can get a refill of this consumable\n        (Default: None)\n\n    max_stock_amount - maximum amount of this consumable we can stock\n        (Default: 150)\n\n    cons_chance - chance for Monika to continue having this consumable\n        (Default: 80/100)\n\n    cons_low - low bracket for Monika to have this consumable\n        (NOTE: Should be passed in as seconds)\n        (Default: 10 minutes)\n\n    cons_high - high bracket for Monika to have this consumable\n        (NOTE: Should be passed in as seconds)\n        (Default: 2 hours)\n\n    prep_low - low bracket for prep time\n        (NOTE: Should be passed in as seconds)\n        (Default: 2 minutes)\n        NOTE: If set to None, this will not be considered preppable\n\n    prep_high - high bracket for prep time\n        (NOTE: Should be passed in as seconds)\n        (Default: 4 minutes)\n        NOTE: If set to None, this will not be considered preppable\n\n    get_cons_evl - evl to use for getting the consumable. If None, a generic is assumed\n        (Default: None)\n        NOTE: Should have an Event object associated with the label\n\n    finish_prep_evl - evl to use when finished prepping. If None, a generic is assumed\n        (Default: None)\n        NOTE: Should have an Event object associated with the label\n\n    finish_cons_evl - evl to use when finished consuming. If None, a generic is assumed\n        (Default: None)\n        NOTE: Should have an Event object associated with the label",
        "function_args": {
          "args": [
            "self",
            "consumable_id",
            "consumable_type",
            "disp_name",
            "start_end_tuple_list",
            "acs",
            "split_list",
            "dlg_props",
            "portable",
            "should_restock_warn",
            "late_entry_list",
            "max_re_serve",
            "max_stock_amount",
            "cons_chance",
            "cons_low",
            "cons_high",
            "prep_low",
            "prep_high",
            "get_cons_evl",
            "finish_prep_evl",
            "finish_cons_evl"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "False",
            "True",
            "None",
            "None",
            "150",
            "80",
            "10 * 60",
            "2 * 3600",
            "2 * 60",
            "4 * 60",
            "None",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "enabled",
        "line": 42770,
        "docstring": "Checks if this consumable is enabled\n\nOUT:\n    boolean:\n        - True if this consumable is enabled\n        - False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "enable",
        "line": 42781,
        "docstring": "Enables the consumable",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "disable",
        "line": 42787,
        "docstring": "Disables the consumable",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "increment",
        "line": 42793,
        "docstring": "Increments the amount of times Monika has had the consumable",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "shouldHave",
        "line": 42799,
        "docstring": "Checks if we should have this consumable now\n\nCONDITIONS:\n    1. We're within the consumable time range\n    2. We pass the chance check to have this consumable\n    3. We have not met/exceeded the maximum re-serve amount\n\nIN:\n    _now - datetime.datetime to check if we're within the timerange for this consumable\n    If None, now is assumed\n    (Default: None)\n\nOUT:\n    boolean:\n        - True if we should have this consumable (passes above conditions)\n        - False otherwise\n\nNOTE: This does NOT anticipate splits/preparation",
        "function_args": {
          "args": [
            "self",
            "_now"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hasServing",
        "line": 42838,
        "docstring": "Checks if we have a serving of this consumable in order to use it\n\nOUT:\n    boolean:\n        - True if we have at least 1 serving left of the consumable\n        - False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "restock",
        "line": 42849,
        "docstring": "Adds more servings of the consumable, protected by max_stock_amount\n\nIN:\n    servings - amount of servings to add\n    (Default: 100)\n    clear_flag - whether or not we should clear the has_restock_warned flag\n    (Default: True)",
        "function_args": {
          "args": [
            "self",
            "servings",
            "clear_flag"
          ],
          "pos_only_args": [],
          "defaults": [
            "100",
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getStock",
        "line": 42869,
        "docstring": "Gets the amount of servings left of a consumable\n\nOUT:\n    integer:\n        - The amount of servings left for the consumable",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isMaxedStock",
        "line": 42879,
        "docstring": "Checks if the current stock of the consumable is the max\n\nOUT:\n    boolean:\n        - True if stock is maxed\n        - False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getAmountHad",
        "line": 42890,
        "docstring": "Gets the amount of servings Monika has had of the consumable\n\nOUT:\n    integer:\n        - The amount of times Monika has had the consumable",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isLow",
        "line": 42900,
        "docstring": "Checks if we're running low on a consumable\n\nOUT:\n    boolean:\n        - True if we're less than or equal to the LOW_STOCK_AMT value\n        - False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isCriticalLow",
        "line": 42911,
        "docstring": "Checks if we're critically low on a consumable\n\nOUT:\n    boolean:\n        - True if we're less than or equal to the LOW_CRITICAL_STOCK_AMT value\n        - False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "flagRestockWarn",
        "line": 42922,
        "docstring": "Flags a consumable as having been restock warned",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "resetRestockWarnFlag",
        "line": 42928,
        "docstring": "Resets the restock warn flag",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "hasRestockWarned",
        "line": 42934,
        "docstring": "Return the has restock warned flag",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "use",
        "line": 42940,
        "docstring": "Uses a serving of this consumable\n\nIN:\n    amount - amount of servings to use up\n    (Default: 1)",
        "function_args": {
          "args": [
            "self",
            "amount"
          ],
          "pos_only_args": [],
          "defaults": [
            "1"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "re_serve",
        "line": 42955,
        "docstring": "Increments the re-serve count",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isLateEntry",
        "line": 42961,
        "docstring": "Checks if we should load with a consumable already out or not\n\nIN:\n    _now - datetime.datetime to check if we're within the time for the consumable\n    If None, now is assumed\n    (Default: None)\n\nOUT:\n    boolean:\n        - True if we should load in with consumable already out\n        - False otherwise",
        "function_args": {
          "args": [
            "self",
            "_now"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "prepare",
        "line": 42990,
        "docstring": "Starts preparing the consumable\n(Sets up the finished preparing event)\n\nIN:\n    _start_time - time to start prepping. If none, now is assumed",
        "function_args": {
          "args": [
            "self",
            "_start_time"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "have",
        "line": 43022,
        "docstring": "Allows Monika to have this consumable\n(Sets up the finished consumable event)\n\nIN:\n    _start_time - time to start prepping. If none, now is assumed\n    skip_leadin - whether or not we should push the event where Monika gets something to have",
        "function_args": {
          "args": [
            "self",
            "_start_time",
            "skip_leadin"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "isConsTime",
        "line": 43063,
        "docstring": "Checks if we're in the time range for this consumable\n\nIN:\n    _now - datetime.datetime to check if we're within the time for\n        If None, now is assumed\n        (Default: None)\n\nOUT:\n    boolean:\n        - True if we're within the consumable time(s) of this consumable\n        - False otherwise",
        "function_args": {
          "args": [
            "self",
            "_now"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "shouldPrep",
        "line": 43085,
        "docstring": "Checks if we're in the time range for this consumable and we should prepare it\n\nIN:\n    _time - datetime.datetime to check if we're within the time for\n        If none, now is assumed\n        (Default: None)\n\nOUT:\n    boolean:\n        - True if we're within the preparation time(s) of this consumable (and consumable is preparable)\n        - False otherwise",
        "function_args": {
          "args": [
            "self",
            "_now"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "prepable",
        "line": 43116,
        "docstring": "Checks if this consumable is preparable\n\nOUT:\n    boolean:\n        - True if this consumable has:\n            1. prep_high\n            2. prep_low\n\n        - False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "checkCanHave",
        "line": 43130,
        "docstring": "Checks if we can have this consumable again\n\nIN:\n    _now - datetime.datetime to check against\n        If None, now is assumed\n        (Default: None)\n\nOUT:\n    boolean:\n        - True if we can have this consumable\n        - False otherwise",
        "function_args": {
          "args": [
            "self",
            "_now"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_isStillCons",
        "line": 43158,
        "docstring": "Checks if we're still having something\n\nIN:\n    _type - Type of consumable to check for\n        0 - Drink\n        1 - Food\n\n    _now - datetime.datetime object representing current time\n        If none, now is assumed\n        (Default: None)\n\nOUT:\n    boolean:\n        - True if we're still having something\n        - False otdherwise",
        "function_args": {
          "args": [
            "_type",
            "_now"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_getLowCons",
        "line": 43183,
        "docstring": "Gets a list of all consumables which Monika is low on, regardless of type (and should warn about)\n\nIN:\n    - critical - Whether this list should only be populated by items Monika is critically low on or not\n        (Default: False)\n\nOUT:\n    list of all consumables Monika is low on (or critical on)",
        "function_args": {
          "args": [
            "critical"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_getLowConsNotWarned",
        "line": 43201,
        "docstring": "Gets a list of all consumables which Monika is low on that she's not restock warned\n\nIN:\n    - critical - Whether this list should only be populated by items Monika is critically low on or not\n        (Default: False)\n\nOUT:\n    list of all consumables Monika",
        "function_args": {
          "args": [
            "critical"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_getLowConsType",
        "line": 43219,
        "docstring": "Gets a list of all consumables (of the provided type) which Monika is low on (and should warn about)\n\nIN:\n    _type - Type of consumables to get a low list for\n    critical - Whether the list should be only those Monika is critically low on\n        (Default: False)\n    exclude_restock_warned - Whether or not we want to exclude consumables we've restock warned already\n        (Default: False)\n\nOUT:\n    list of all consumables of the provided type Monika is low on (or critical on), matching the entered criteria",
        "function_args": {
          "args": [
            "_type",
            "critical",
            "exclude_restock_warned"
          ],
          "pos_only_args": [],
          "defaults": [
            "False",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_reset",
        "line": 43267,
        "docstring": "Resets the events for the consumable and resets the current consumable(s)\n\nIN:\n    _type - Type of consumable to reset events for\n        (If None, all types are reset. Default: None)",
        "function_args": {
          "args": [
            "_type"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_m1_zz_consumables__shouldReset",
        "line": 43308,
        "docstring": "Checks if we should reset the current consumable type\n\nCONDITIONS:\n    1. We're having a consumable we shouldn't be having now and we opened the game after its consume time or\n    2. We're still prepping something but\n        - The consumable's finish prepping event doesn't have conditionals or\n        - It's no longer time for this consumable\n\nIN:\n    _type - type of consumable to reset\n    curr_cons - current_consumable (of _type)\n    available_cons - available consumables for the current time\n\nOUT:\n    boolean:\n        - True if we should reset the current consumable type\n        - False otherwise",
        "function_args": {
          "args": [
            "_type",
            "curr_cons",
            "available_cons"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_getCurrentDrink",
        "line": 43350,
        "docstring": "Gets the MASConsumable object for the current drink or None if we're not drinking\n\nOUT:\n    - Current MASConsumable if drinking\n    - None if not drinking",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_getCurrentFood",
        "line": 43361,
        "docstring": "Gets the MASConsumable object for the current food or None if we're not eating\n\nOUT:\n    - Current MASConsumable if eating\n    - None if not eating",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_isHaving",
        "line": 43372,
        "docstring": "Checks if we're currently drinking something right now\n\nIN:\n    _type - integer representing the consumable type\n\nOUT:\n    boolean:\n        - True if we have a current consumable of _type and consume time\n        - False otherwise",
        "function_args": {
          "args": [
            "_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_getConsumablesForTime",
        "line": 43392,
        "docstring": "Gets a list of all consumable drinks active at this time\n\nIN:\n    _type - type of consumables to get\n\nOUT:\n    list of consumable objects of _type enabled and within time range",
        "function_args": {
          "args": [
            "_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_validatePersistentData",
        "line": 43412,
        "docstring": "Verifies that the data stored in persistent._mas_current_consumable is valid to the consumables currently set up\n\nIN:\n    _type - type of consumable to validate persistent data for\n\nNOTE: If the persistent data stored isn't valid, it is reset.",
        "function_args": {
          "args": [
            "_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_checkConsumables",
        "line": 43429,
        "docstring": "Logic to handle Monika having a consumable both on startup and during runtime\n\nIN:\n    startup - Whether or not we should check for a late entry\n    (Default: False)",
        "function_args": {
          "args": [
            "startup"
          ],
          "pos_only_args": [],
          "defaults": [
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_absentUse",
        "line": 43468,
        "docstring": "Runs a check on all consumables and subtracts the amount used in the player's absence",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_getEnabledConsumables",
        "line": 43497,
        "docstring": "Gets all enabled consumables\n\nOUT:\n    List of MASConsumable objects which are enabled\n\nNOTE: enabled is regardless of stock amount",
        "function_args": {
          "args": [],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_m1_zz_consumables__getCurrentConsumable",
        "line": 43525,
        "docstring": "Gets the current consumable, provided by type\n\nIN:\n    _type - consumable type to get the current consumable for\n\nOUT:\n    MASConsumable object representing the current consumable object for the type\n    If there's no consumable out by _type, None is returned",
        "function_args": {
          "args": [
            "_type"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_m1_zz_consumables__checkingLogic",
        "line": 43541,
        "docstring": "Generalized logic to check if we should have a consumable\n\nIN:\n    _type - consumable type\n    curr_cons - current_consumable (of _type)\n    startup - whether or not to perform a startup check",
        "function_args": {
          "args": [
            "_type",
            "curr_cons",
            "startup"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_generateShoppingList": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_generateShoppingList",
    "line": 43607,
    "docstring": "Generates a list of consumables we're low on in the form of a 'shopping list'\nand exports it to the characters folder\n\nIN:\n    low_cons_list - List of MASConsumable objects that we're low on\n    If None, we get it here\n    (Default: None)",
    "function_args": {
      "args": [
        "low_cons_list"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getConsumable": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getConsumable",
    "line": 43644,
    "docstring": "Gets a consumable object by type and id\n\nIN:\n    consumable_id - id of the consumable\n\nOUT:\n    Consumable object:\n        If found, MASConsumable\n        If not found, None",
    "function_args": {
      "args": [
        "consumable_id"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_useThermos": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_useThermos",
    "line": 43661,
    "docstring": "Gets Monika to put her drink into a thermos when taking her somewhere if it is eligible",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MAS_EVL": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MAS_EVL",
    "class_bases": [
      "object"
    ],
    "line": 45642,
    "docstring": "Context manager wrapper for Event objects via event labels.\nThis has handling for when an eventlabel doesn't return an actual\nevent object via mas_getEV.\n\nUse as follows:\n    with MASev('some event label') as ev:\n        ev.<property name> = new_value\n        curr_value ev.<property_name>\n\nproperty names should be same as used on Event object.\nfunctions can also be used.\nadditionally, the resulting context object can be compared with\nother event objects like normal.\n\nIn cases where the Event does not exist, the following occurs:\n    - Event properties return their defaults (see below)\n    - property set operations do nothing\n    - functions calls do nothing\n    - The Event class is used as fallback",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 45691,
        "docstring": "Constructor\n\nIN:\n    evl - event label to build context manager for",
        "function_args": {
          "args": [
            "self",
            "evl"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 45700,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__enter__",
        "line": 45703,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__exit__",
        "line": 45706,
        "function_args": {
          "args": [
            "self",
            "exc_type",
            "exc_value",
            "traceback"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__getattr__",
        "line": 45709,
        "function_args": {
          "args": [
            "self",
            "name"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__setattr__",
        "line": 45729,
        "function_args": {
          "args": [
            "self",
            "name",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__eq__",
        "line": 45742,
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__ne__",
        "line": 45749,
        "function_args": {
          "args": [
            "self",
            "other"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_getEV": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getEV",
    "line": 45755,
    "docstring": "Global get function that retreives an event given the label\n\nDesigned to be used as a wrapper around the mas_all_ev_db dict\nNOTE: only available at RUNTIME\n\nIN:\n    ev_label - eventlabel to find event for\n\nRETURNS:\n    the event object you were looking for, or None if not found",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_checkEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_checkEVL",
    "line": 45770,
    "docstring": "Checks event properties using a lambda\n\nIN:\n    ev_label - ev_label representing the event to check properties for\n    predicate - predicate function (accepting an ev as the argument) for the test(s)\n\nOUT:\n    True if predicate function returns True, False otherwise\n\nNOTE: Does nothing if the ev does not exist",
    "function_args": {
      "args": [
        "ev_label",
        "predicate"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getEVLPropValue": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getEVLPropValue",
    "line": 45790,
    "docstring": "Safely gets an ev prop value\n\nIN:\n    ev_label - eventlabel corresponding to the event object to get the property from\n    prop - property name to get\n    default - default value to return if ev not found/prop not found\n        (Default: None)\n\nOUT:\n    Value of the given property name, or default if not found/no ev exists",
    "function_args": {
      "args": [
        "ev_label",
        "prop",
        "default"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_setEVLPropValues": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_setEVLPropValues",
    "line": 45807,
    "docstring": "Sets ev prop values in bulk if the ev exists\n\nIN:\n    ev_label - ev_label representing the event to set properties for\n    kwargs - propname=new_value. Represents the value to set to the property\n\nOUT:\n    True if the property/ies was/were set\n    False if not (ev does not exist)",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": "kwargs",
      "var_arg": null
    }
  },
  "mas_isPoolEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isPoolEVL",
    "line": 45829,
    "docstring": "Checks if the event for the given event label is pool\n\nIN:\n    ev_label - eventlabel corresponding to the event we wish to check if is pooled\n\nOUT:\n    True if the ev is pooled, False if not, or the ev doesn't exist",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isRandomEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isRandomEVL",
    "line": 45841,
    "docstring": "Checks if the event for the given event label is random\n\nIN:\n    ev_label - eventlabel corresponding to the event we wish to check if is random\n\nOUT:\n    True if the ev is random, False if not, or the ev doesn't exist",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isUnlockedEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isUnlockedEVL",
    "line": 45853,
    "docstring": "Checks if the event for the given event label is unlocked\n\nIN:\n    ev_label - eventlabel corresponding to the event we wish to check if is unlocked\n\nOUT:\n    True if the ev is unlocked, False if not, or the ev doesn't exist",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getEVL_last_seen": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getEVL_last_seen",
    "line": 45865,
    "docstring": "Gets the last_seen from the event corresponding to the given eventlabel\n\nIf the event doesn't exist, the default is returned\n\nIN:\n    ev_label - eventlabel for the event we wish to get last_seen from\n    default - value to return if the event object doesn't exist\n\nOUT:\n    The last_seen of the ev, or the default if the event doesn't exist",
    "function_args": {
      "args": [
        "ev_label",
        "default"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getEVL_shown_count": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getEVL_shown_count",
    "line": 45880,
    "docstring": "Gets the shown_count from the event corresponding to the given eventlabel\n\nIf the event doesn't exist, the default is returned\n\nIN:\n    ev_label - eventlabel for the event we wish to get shown_count from\n    default - value to return if the event object doesn't exist\n\nOUT:\n    The shown_count of the ev, or the default if the event doesn't exist",
    "function_args": {
      "args": [
        "ev_label",
        "default"
      ],
      "pos_only_args": [],
      "defaults": [
        "0"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_inRulesEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_inRulesEVL",
    "line": 45895,
    "docstring": "Checks if keys are in the event's rules dict\n\nIN:\n    ev_label - eventlabel for the event we wish to check rule keys for\n    *args - rule keys\n\nOUT:\n    True if all rule keys provided are in an event object's rules dict\n    False if the event doesn't exist or any provided keys aren't present in the rules dict",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "args"
    }
  },
  "mas_assignModifyEVLPropValue": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_assignModifyEVLPropValue",
    "line": 45917,
    "docstring": "Does an assign-modify operation\n\nIN:\n    ev_label - eventlabel representing the event that will have a property assign/modified\n    propname - property name to do the assign-modify operation on\n    operation - operator to assign/modify with. (Any of the following: +=, -=, *=, /= (as a string))\n    value - value to use in the operation\n\nOUT:\n    True if event values were assign/modified successfully\n    False otherwise",
    "function_args": {
      "args": [
        "ev_label",
        "propname",
        "operation",
        "value"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getEVCL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getEVCL",
    "line": 45942,
    "docstring": "Global get function that retrieves the calendar label for an event\ngiven the eventlabel. This is mainly to help with calendar.\n\nIN:\n    ev_label - eventlabel to find calendar label for\n\nRETURNS:\n    the calendar label you were looking for, or \"Unknown Event\" if\n    not found.",
    "function_args": {
      "args": [
        "ev_label"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_hideEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_hideEVL",
    "line": 45961,
    "docstring": "Hides an event given label and code.\n\nIN:\n    ev_label - label of event to hide\n    code - string code of the db this ev_label belongs to\n    lock - True if we want to lock this event\n        (Default: False)\n    derandom - True if we want to de random this event\n        (Default: False)\n    depool - True if we want to de pool this event\n        (Default: False)\n    decond - True if we want to remove conditoinal for this event\n        (Default: False)",
    "function_args": {
      "args": [
        "ev_label",
        "code",
        "lock",
        "derandom",
        "depool",
        "decond"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False",
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_showEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_showEVL",
    "line": 45993,
    "docstring": "Shows an event given label and code.\n\nIN:\n    ev_label - label of event to show\n    code - string code of the db this ev_label belongs to\n    unlock - True if we want to unlock this Event\n        (Default: False)\n    _random - True if we want to random this event\n        (Default: False)\n    _pool - True if we want to random thsi event\n        (Default: False)\n\nNOTE:\n    if using this to random, it does not protect labels that are in persistent._mas_player_derandomed\n    and thus will remove the label from that list if present.\n\n    if the label should not be randomed if it's in persistent._mas_player_derandomed\n    use mas_protectedShowEVL",
    "function_args": {
      "args": [
        "ev_label",
        "code",
        "unlock",
        "_random",
        "_pool"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_protectedShowEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_protectedShowEVL",
    "line": 46031,
    "docstring": "Shows an event given label and code.\n\nDoes checking if the actions should happen\nIN:\n    ev_label - label of event to show\n    code - string code of the db this ev_label belongs to\n    unlock - True if we want to unlock this Event\n        (Default: False)\n    _random - True if we want to random this event\n        (Default: False)\n    _pool - True if we want to random thsi event\n        (Default: False)",
    "function_args": {
      "args": [
        "ev_label",
        "code",
        "unlock",
        "_random",
        "_pool"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "False",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_lockEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_lockEVL",
    "line": 46060,
    "docstring": "Locks an event given label and code.\n\nIN:\n    ev_label - label of event to show\n    code - string code of the db this ev_label belongs to",
    "function_args": {
      "args": [
        "ev_label",
        "code"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_unlockEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_unlockEVL",
    "line": 46071,
    "docstring": "Unlocks an event given label and code.\n\nIN:\n    ev_label - label of event to show\n    code - string code of the db this ev_label belongs to",
    "function_args": {
      "args": [
        "ev_label",
        "code"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_stripEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_stripEVL",
    "line": 46082,
    "docstring": "Strips the conditional and action properties from an event given its label\nstart_date and end_date will be removed if remove_dates is True\nAlso removes the event from the event list if present (optional)\n\nIN:\n    ev_label - label of event to strip\n    list_pop - True if we want to remove the event from the event list\n        (Default: False)\n    remove_dates - True if we want to remove start/end_dates from the event\n        (Default: True)",
    "function_args": {
      "args": [
        "ev_label",
        "list_pop",
        "remove_dates"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_flagEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_flagEVL",
    "line": 46115,
    "docstring": "Applies flags to the given event\n\nIN:\n    ev_label - label of the event to flag\n    code - string code of the db this ev_label belongs to\n    flags - flags to apply",
    "function_args": {
      "args": [
        "ev_label",
        "code",
        "flags"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_unflagEVL": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_unflagEVL",
    "line": 46129,
    "docstring": "Unflags flags from the given event\n\nIN:\n    ev_label - label of the event to unflag\n    code - string code of the db this ev_label belongs to\n    flags - flags to unset",
    "function_args": {
      "args": [
        "ev_label",
        "code",
        "flags"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_transferTopicData": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_transferTopicData",
    "line": 46215,
    "docstring": "Transfers topic data from ev to ev\n\nIN:\n    new_topic_evl - new topic's eventlabel\n    old_topic_evl - old topic's eventlabel\n    old_topic_ev_db - event database containing the old topic\n    transfer_unlocked - whether or not we should transfer the unlocked property of the old topic\n    (Default: True)\n    transfer_shown_count - whether or not we should transfer the shown_count property of the old topic\n    (Default: True)\n    transfer_seen_data - whether or not we should transfer the _seen_ever state of the old topic\n    (Default: True)\n    transfer_last_seen - whether or not we should transfer the last_seen property of the old topic\n    (Default: True)\n    erase_topic - whether or not we should erase this topic after transferring data\n    (Defualt: True)",
    "function_args": {
      "args": [
        "new_topic_evl",
        "old_topic_evl",
        "old_topic_ev_db",
        "transfer_unlocked",
        "transfer_shown_count",
        "transfer_seen_data",
        "transfer_last_seen",
        "erase_topic"
      ],
      "pos_only_args": [],
      "defaults": [
        "True",
        "True",
        "True",
        "True",
        "True"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_isGameUnlocked": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_isGameUnlocked",
    "line": 46284,
    "docstring": "Checks if the given game is unlocked.\n\nIN:\n    gamename - name of the game to check\n\nOUT:\n    True if the game is unlocked, False if not, or the game doesn't exist",
    "function_args": {
      "args": [
        "gamename"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_unlockGame": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_unlockGame",
    "line": 46304,
    "docstring": "Unlocks the given game.\n\nIN:\n    gamename - name of the game to unlock",
    "function_args": {
      "args": [
        "gamename"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_lockGame": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_lockGame",
    "line": 46315,
    "docstring": "Locks the given game.\n\nIN:\n    gamename - name of the game to lock",
    "function_args": {
      "args": [
        "gamename"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_addClothesToHolidayMap": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_addClothesToHolidayMap",
    "line": 46336,
    "docstring": "Adds the given clothes to the holiday clothes map\n\nIN:\n    clothes - clothing item to add\n    key - dateime.date to use as key. If None, we use today",
    "function_args": {
      "args": [
        "clothes",
        "key"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_addClothesToHolidayMapRange": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_addClothesToHolidayMapRange",
    "line": 46355,
    "docstring": "Adds the given clothes to the holiday clothes map over the day range provided\n\nIN:\n    clothes - clothing item to add\n    start_date - datetime.date to start adding to the map on\n    end_date - datetime.date to stop adding to the map on",
    "function_args": {
      "args": [
        "clothes",
        "start_date",
        "end_date"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_doesBackgroundHaveHolidayDeco": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_doesBackgroundHaveHolidayDeco",
    "line": 46374,
    "docstring": "Checks if a background has support for the given deco tag(s)\n\nIN:\n    deco_tags - list of deco tags to check for\n\n    background_id - id of the background to check if it supports deco\n        If None, mas_current_background's id is used\n        (Default: None)",
    "function_args": {
      "args": [
        "deco_tags",
        "background_id"
      ],
      "pos_only_args": [],
      "defaults": [
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_backgroundUpdateCheck": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_backgroundUpdateCheck",
    "line": 46461,
    "docstring": "THIS IS A PRIVATE FUNCTION\nBackground update check",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_backgroundUpdateCheck": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_backgroundUpdateCheck",
    "line": 46495,
    "docstring": "This launches the background update thread",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_resetVersionUpdates": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_resetVersionUpdates",
    "line": 46564,
    "docstring": "Resets all version update script's seen status",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASPoem": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASPoem",
    "class_bases": [],
    "line": 46599,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 46600,
        "docstring": "MASPoem constructor\n\nSimilar to the Poem class from DDLC, but excludes the yuri variables and adds a poem id property.\n\n\npoem_id:\n    identifier for the poem.\n    (NOTE: Must be unique)\n\ncategory:\n    category for the poem is under (So we can get poems by category)\n\nprompt:\n    prompt for this poem (So it can be viewed by a scrollable menu)\n\npaper:\n    paper to use for this poem. If None, assumes from the paper category map\n        (Default: None)\n\ntitle:\n    poem title (supports renpy substitution)\n        (Default: '')\n\ntext:\n    poem contents (supports renpy substitution)\n        (Default: '')\n\nauthor:\n    poem author\n    (Default: monika)\n\nex_props:\n    extra tags for the poem (used for dialogue flow based on it)\n    If None, an empty dict is assumed\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "poem_id",
            "category",
            "prompt",
            "paper",
            "title",
            "text",
            "author",
            "ex_props"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "''",
            "''",
            "'monika'",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "is_seen",
        "line": 46663,
        "docstring": "Checks if the poem is seen\n\nOUT:\n    boolean:\n        - True if poem was seen before\n        - False otherwise",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "get_shown_count",
        "line": 46674,
        "docstring": "Gets the shown count of the poem\n\nOUT:\n    integer:\n        - The amount of times this poem was seen",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_get_player_nickname": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_get_player_nickname",
    "line": 47394,
    "docstring": "Picks a nickname for the player at random based on accepted nicknames\n\nIN:\n    capitalize - Whether or not we should capitalize the first character\n        (Default: False)\n\n    exclude_names - List of names to be excluded in the selection pool for nicknames\n        (Default: Empty list)\n\n    _default - Default name to return if affection < affectionate or no nicknames have been set/allowed\n        If None, the player's name is assumed\n        (Default: None)\n\n    regex_replace_with_nullstr - Regex str to use to identify parts of a nickname which should be replaced with an empty\n        string. If None, this is ignored\n        (Default: None)\n\nNOTE: If affection is below affectionate or player has no nicknames set, we just use the player name",
    "function_args": {
      "args": [
        "capitalize",
        "exclude_names",
        "_default",
        "regex_replace_with_nullstr"
      ],
      "pos_only_args": [],
      "defaults": [
        "False",
        "[]",
        "None",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_input": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_input",
    "line": 47447,
    "docstring": "Calling this function pops up a window asking the player to enter some\ntext.\n\nIN:\n    prompt - a string giving a prompt to display to the player\n\n    default - a string giving the initial text that will be edited by the player\n        (Default: \"\")\n\n    allow - a string giving a list of characters that will\n        be allowed in the text\n        (Default: None)\n\n    exclude - if a character is present in this string, it is not\n        allowed in the text\n        (Default: \"{}\")\n\n    length - an integer giving the maximum length of the input string\n        (Default: None)\n\n    with_none - the transition to use\n        (Default: None)\n\n    pixel_width - if not None, the input is limited to being this many pixels wide,\n        in the font used by the input to display text\n        (Default: None)\n\n    screen - the name of the screen that takes input. If not given, the 'input'\n        screen is used\n        (Default: \"input\")\n\n    screen_kwargs - the keyword arguments to pass in to the screen\n        NOTE: passing in the prompt argument is not mandatory here\n        (Default: {})\n\nOUT:\n    entered string",
    "function_args": {
      "args": [
        "prompt",
        "default",
        "allow",
        "exclude",
        "length",
        "with_none",
        "pixel_width",
        "screen",
        "screen_kwargs"
      ],
      "pos_only_args": [],
      "defaults": [
        "''",
        "None",
        "'{}'",
        "None",
        "None",
        "None",
        "'input'",
        "{}"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_getMousePos": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_getMousePos",
    "line": 47543,
    "docstring": "Gets the mouse position in terms of physical screen size\n\nOUT:\n    tuple, (x, y) coordinates representing the mouse position",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_quipExp": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_quipExp",
    "line": 47575,
    "docstring": "Allows expressions to be inserted into quips directly via function substitution\n\n(This is effectively a renpy.show that returns '' instead of None)\n\nIN:\n    exp_code - code of the expression as str (ex: '1hua')",
    "function_args": {
      "args": [
        "exp_code"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "PauseDisplayable": {
    "type": "class",
    "class_decorators": [],
    "identifier": "PauseDisplayable",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 47591,
    "docstring": "Pause until click variant of Pause\nThis is because normal pause until click is broken for some reason",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 47596,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 47599,
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 47603,
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "PauseDisplayableEvent": {
    "type": "class",
    "class_decorators": [],
    "identifier": "PauseDisplayableEvent",
    "class_bases": [
      "object"
    ],
    "line": 47609,
    "docstring": "Class to represent events for PauseDisplayableWithEvents",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 47613,
        "docstring": "Constructor for events\n\nIN:\n    timedelta - datetime.timedelta after which we'll run the event\n    functions - the func or a list of the funcs that get called on the event\n        NOTE: if you need args/kwargs use renpy.partial\n    repeatable - whether or not we'll repeat the event\n        (Default: False)\n    invoke_in_new_context - whether or not we'll invoke the functions\n        to avoid interaction issues\n        (Default: False)\n    restart_interaction - whether or not we'll also call renpy.restart_interaction\n        to update the screen\n        (Default: False)",
        "function_args": {
          "args": [
            "self",
            "timedelta",
            "functions",
            "repeatable",
            "invoke_in_new_context",
            "restart_interaction"
          ],
          "pos_only_args": [],
          "defaults": [
            "False",
            "False",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "set_end_datetime",
        "line": 47646,
        "docstring": "Sets end datetime for this event\n\nIN:\n    value - value to set",
        "function_args": {
          "args": [
            "self",
            "value"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 47655,
        "docstring": "Representation of this obj",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__call__",
        "line": 47661,
        "docstring": "Executes this event",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "PauseDisplayableWithEvents": {
    "type": "class",
    "class_decorators": [],
    "identifier": "PauseDisplayableWithEvents",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 47675,
    "docstring": "Advanced pause displayable that supports hotkeys and can run events during pause",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 47698,
        "docstring": "Constructor for this displayable\n\nIN:\n    events - a single PauseDisplayableEvent object or a list of PauseDisplayableEvent objects\n        If None, no event will be ran\n        (Default: None)\n    respected_keysims - keysims that are respected during this pause, if None we'll use some default ones.\n        If not None, assuming it's a dict with the name of a defined keybinding and its function\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "events",
            "respected_keysims"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__repr__",
        "line": 47719,
        "docstring": "Representation of this obj",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "classmethod"
        ],
        "identifier": "_m1_definitions__handle_events",
        "line": 47726,
        "docstring": "Takes events and sorts them before passing further\n\nIN:\n    events - PauseDisplayableEvent or a list of PauseDisplayableEvent's\n\nOUT:\n    sorted list",
        "function_args": {
          "args": [
            "cls",
            "events"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "set_events",
        "line": 47754,
        "docstring": "Sets new events for this PauseDisplayable\n\nIN:\n    events - PauseDisplayableEvent or a list of PauseDisplayableEvent's",
        "function_args": {
          "args": [
            "self",
            "events"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_definitions__set_end_datetimes",
        "line": 47765,
        "docstring": "Sets end datetimes for events using current time",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_definitions__reset_events",
        "line": 47773,
        "docstring": "Resets events state",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "start",
        "line": 47781,
        "docstring": "Starts this displayable\n\nOUT:\n    bool - the result of interaction:\n        True if the user clicked\n        False if the dispalyable was stopped",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "stop",
        "line": 47795,
        "docstring": "Stops this disp's interaction, aborts its event\nThis will cause the displayable to return False\n    in the event method",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "reset",
        "line": 47808,
        "docstring": "Completely resets this disp's state",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_definitions__get_events_for_time",
        "line": 47820,
        "docstring": "Returns the events that we need to run NOW\nand pops them from the event list\n\nOUT:\n    generator over the events\n\nASSUMES:\n    the events are sorted",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_definitions__set_timeout",
        "line": 47842,
        "docstring": "Sets a timeout for event generator",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 47861,
        "docstring": "Our render",
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_m1_definitions__check_keysims",
        "line": 47868,
        "docstring": "Checks if an event matches the respected keysims of this displayable\nIf it does, run the appropriate func\n\nOUT:\n    True if we ran a func, False otherwise",
        "function_args": {
          "args": [
            "self",
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 47883,
        "docstring": "Handles interactions",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "per_interact",
        "line": 47919,
        "docstring": "We don't need to do anything here",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_m1_definitions__sort_key_td",
        "line": 47926,
        "docstring": "Sort key for sorting by ev's timedelta",
        "function_args": {
          "args": [
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [
          "staticmethod"
        ],
        "identifier": "_m1_definitions__sort_key_dt",
        "line": 47933,
        "docstring": "Sort key for sorting by ev's end_datetime",
        "function_args": {
          "args": [
            "ev"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_chgCalEVul": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_chgCalEVul",
    "line": 47969,
    "docstring": "Changes the conditionals / actions / and more of the monika start date\ntopic so it unlocks after the given number of days\n\nIN:\n    number_of_days - number of days before unlocking the monika start\n        date topic",
    "function_args": {
      "args": [
        "number_of_days"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_test_sitting": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_test_sitting",
    "line": 48013,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_supertest": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_supertest",
    "line": 48076,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_matrix_cache_report": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_matrix_cache_report",
    "line": 48086,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_build_mbgfm": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_build_mbgfm",
    "line": 48140,
    "docstring": "Generates a MASBackgroundFilterManager using sample number of slice\nsizes.\n\nNOTE: verify is NOT called\n\nIN:\n    mn_sr_size - how many slices to use for the mn_sr chunk\n    mn_sr_d - passed to the is_day param\n    sr_ss_size - how many slices to use for the sr_ss chunk\n    sr_ss_d - passed to the is_day param\n    ss_mn_size - how many slices to use for the ss_mn chunk\n    ss_mn_d - passed to the is_day param\n    ml_min - minimum minlength time to use in seconds\n        NOTE: if larger than ml_max, ml_max takes precedence\n    ml_max - max minlength time to use in seconds\n    pr_min - min priority to use (must be 1-10)\n        NOTE: if larger than pr_max, pr_max takes precedence\n    pr_max - max priority to use (must be 1-10)\n    mx_min - minimum maxlength time to use in seconds\n        NOTE: if larger than mx_max, mx_max takes precdence\n    mx_max - minimum maxlength time to use in seconds\n\nRETURNS: MASBackgroundFilterManager object with the given settings",
    "function_args": {
      "args": [
        "mn_sr_size",
        "mn_sr_d",
        "sr_ss_size",
        "sr_ss_d",
        "ss_mn_size",
        "ss_mn_d",
        "ml_min",
        "ml_max",
        "pr_min",
        "pr_max",
        "mx_min",
        "mx_max"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_build_fake_slices": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_build_fake_slices",
    "line": 48251,
    "docstring": "Builds fake slices with the given size\n\nNOTE: no sanity checks so dont screw up\n\nIN:\n    flt_pfx - prefix to use for each slice filter\n    size - number of slices to make\n    ml_min - min minlength time to use in seconds\n    ml_max - max minlength time ot use in seconds\n    pr_min - min priority to use\n    pr_max - max priority to use\n    mx_min - min maxlength time to use in seconds\n    mx_max - max maxlength time ot use in seconds\n\nRETURNS: list of created slices.",
    "function_args": {
      "args": [
        "flt_pfx",
        "size",
        "ml_min",
        "ml_max",
        "pr_min",
        "pr_max",
        "mx_min",
        "mx_max"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_build_random_fake_slice": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_build_random_fake_slice",
    "line": 48301,
    "docstring": "Builds a fake slice with the given filter name and randomized\nminlength and pr based on the given values\n\nIN:\n    flt - filter name to use\n    See _mas_build_fake_slices for the other props\n\nRETURNS: MASBackgroundFilterSlice object",
    "function_args": {
      "args": [
        "flt",
        "ml_min",
        "ml_max",
        "pr_min",
        "pr_max",
        "mx_min",
        "mx_max"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_qb_mbgfm": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_qb_mbgfm",
    "line": 48329,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_qb_mbgfm_otm": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_qb_mbgfm_otm",
    "line": 48346,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_qb_mbgfm_irl": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_qb_mbgfm_irl",
    "line": 48363,
    "docstring": "once slice for everything except day, which uses a 5 minute sunrise\nand sunset",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_qb_alg_test": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_qb_alg_test",
    "line": 48416,
    "docstring": "Test alg and write output to log\n\nIN:\n    spread - pass True to use expand_sld instead of expand_once",
    "function_args": {
      "args": [
        "spread"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_qb_fast_a": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_qb_fast_a",
    "line": 48500,
    "docstring": "Pass in a mbgfm, unbuilt",
    "function_args": {
      "args": [
        "abc"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_mas_qb_fast": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_mas_qb_fast",
    "line": 48515,
    "docstring": "Makes somethign and writes it out",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_OVLDropShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_OVLDropShield",
    "line": 48788,
    "docstring": "RUNTIME ONLY\n        Enables all overlay screens. This is like \"dropping a shield\" because\n        it allows user interactions with the overlays.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_OVLHide": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_OVLHide",
    "line": 48798,
    "docstring": "RUNTIME ONLY\n        Hides all overlay screens.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_OVLRaiseShield": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_OVLRaiseShield",
    "line": 48807,
    "docstring": "RUNTIME ONLY\n        Disables all overlay screens. This is like \"raising a shield\" because\n        it prevents user interactions with the overlays.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_OVLShow": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_OVLShow",
    "line": 48817,
    "docstring": "RUNTIME ONLY\n        Shows all overlay screens.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_setWeather": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_setWeather",
    "line": 48898,
    "docstring": "Sets the initial weather.\nThis is meant for startup/ch30_reset\n\nNOTE: this does NOt call exit programming points\n\nIN:\n    _weather - weather to set to.",
    "function_args": {
      "args": [
        "_weather"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_changeWeather": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_changeWeather",
    "line": 48914,
    "docstring": "Changes weather without doing scene changes\n\nNOTE: this does NOT do scene change/spaceroom\n\nIN:\n    new_weather - weather to change to\n    by_user - flag for if user changes weather or not\n    set_persistent - whether or not we want to make this weather persistent\n    new_bg - MASFilterableBackground which will be switched to along with weather change.\n        If none, mas_current_background is used.\n        (Default: None)",
    "function_args": {
      "args": [
        "new_weather",
        "by_user",
        "set_persistent",
        "new_bg"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "False",
        "None"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_startupWeather": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_startupWeather",
    "line": 48945,
    "docstring": "Runs a weather startup alg, checking whether or not persistent weather should be used\nSets weather accordingly",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_setBackground": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_setBackground",
    "line": 48992,
    "docstring": "Sets the initial bg\n\nDoes not do anything if the current bg is same.\n\nNOTE: We don't handle exit pp's here\n\nIN:\n    _background:\n        The background we're changing to.\n        Assumes this is already built.\n\n    **kwargs:\n        Additional kwargs to send to the prog points",
    "function_args": {
      "args": [
        "_background"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": "kwargs",
      "var_arg": null
    }
  },
  "mas_changeBackground": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_changeBackground",
    "line": 49015,
    "docstring": "changes the background w/o any scene changes. Will not run progpoints\nor do any actual bg changes if the current background is already set to\nthe background we are changing to.\n\nIN:\n    new_background:\n        The background we're changing to\n\n    by_user:\n        True if the user switched the background themselves\n\n    set_persistent:\n        True if we want this to be persistent\n\n    **kwargs:\n        Additional kwargs to send to the prog points\n\nRETURNS: MASBackgroundChangeInfo object of the changes that occured.",
    "function_args": {
      "args": [
        "new_background",
        "by_user",
        "set_persistent"
      ],
      "pos_only_args": [],
      "defaults": [
        "None",
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": "kwargs",
      "var_arg": null
    }
  },
  "mas_startupBackground": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_startupBackground",
    "line": 49055,
    "docstring": "Sets up the spaceroom to start up in the background you left in if it is unlocked and still exists",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_checkBackgroundChangeDelegate": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_checkBackgroundChangeDelegate",
    "line": 49073,
    "docstring": "Checks to see if the background change delegate should be locked or unlocked and changes its state accordingly\n\nKey rule: at least 2 available backgrounds",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_remove_event": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_remove_event",
    "line": 49093,
    "docstring": "Removes an event from the persistent database and lock DB\nNOTE: runtime only\n\nUse this if you need to reseat an Event\nwill quit the game once you have done this",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "labels"
    }
  },
  "mas_remove_event_list": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_remove_event_list",
    "line": 49104,
    "docstring": "Does the same as mas_remove_event, but with a list",
    "function_args": {
      "args": [
        "label_list"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "pnmlLoadTuples": {
    "type": "function",
    "function_decorators": [],
    "identifier": "pnmlLoadTuples",
    "line": 49127,
    "docstring": "Loads piano note match lists from the saved data, wich is assumed to\nbe in the proper format. No checking is done.\n\nASSUMES:\n    persistent._mas_pnml_data\n    mas_piano_keys.pnml_bk_db",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "pnmlSaveTuples": {
    "type": "function",
    "function_decorators": [],
    "identifier": "pnmlSaveTuples",
    "line": 49141,
    "docstring": "Saves piano not match list into a pickleable format.\n\nASSUMES:\n    persistent._mas_pnml_data\n    mas_piano_keys.pnml_bk_db",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "PianoDisplayable": {
    "type": "class",
    "class_decorators": [],
    "identifier": "PianoDisplayable",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 49155,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 49484,
        "docstring": "Creates the piano displablable\n\nIN:\n    mode - the mode we want to be in\n    pnml - the piano note match list we want to use\n        (Default: None)",
        "function_args": {
          "args": [
            "self",
            "mode",
            "pnml"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_buildKeyTextOverlay",
        "line": 49938,
        "docstring": "Builds a keytext overlay for a key. This will check the keymaps\nfor the associated actual key and set everything up approptiately.\nAssumes the given key has a keymap\n\nIN:\n    key - the key to build a keytextoverlay for (the key user will\n        press)\n\nRETURNS:\n    MASButtonDisplayable of the text overlay. All states of this\n    button will be the same.",
        "function_args": {
          "args": [
            "self",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_initKeymap",
        "line": 50005,
        "docstring": "Initalizes the keymap, applying persistent adjustments.\n\nASSUMES:\n    persistent._mas_piano_keymaps\n    mas_piano_keys.KEYMAP - the defaults keymap\n    self.live_keymap - the keymap we use",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sendEventsToOverlays",
        "line": 50027,
        "docstring": "Sends event overlays to the list of config overlays.\nNOTE: massively assumes that only one clicked event can occur at a\n    time.\n\nIN:\n    ev - pygame event\n    x - x coord of event\n    y - y coord of event\n    st - same as st in event\n\nRETURNS:\n    the MASButtonDisplayable that returned a non None value, or\n    None if all of them returned None",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_singleFlow",
        "line": 50051,
        "docstring": "Special workflow for notematches that only have a single note\n\nIN:\n    ev - pygame event\n    key - key that was pressed (post map)\n\nASSUMES: self.match.is_single is True",
        "function_args": {
          "args": [
            "self",
            "ev",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_timeoutFlow",
        "line": 50066,
        "docstring": "Runs flow for timeout cases.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "findnotematch",
        "line": 50115,
        "function_args": {
          "args": [
            "self",
            "notes"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "getnotematch",
        "line": 50149,
        "function_args": {
          "args": [
            "self",
            "index"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "quitflow",
        "line": 50177,
        "docstring": "Quits the game and does the appropriate processing.\n\nRETURNS:\n    tuple of the following format:\n        [0]: true if full_combo, False if not\n        [1]: true if won, false if not\n        [2]: true if both passes and misses are greater than 0\n            (which is like practicing)\n        [3]: label to call next (like post game dialogue)",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "resetVerse",
        "line": 50253,
        "docstring": "Resets the current match back to its verse start.",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "setsongmode",
        "line": 50263,
        "function_args": {
          "args": [
            "self",
            "songmode",
            "ev_tout",
            "vis_tout"
          ],
          "pos_only_args": [],
          "defaults": [
            "True",
            "None",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "stateListen",
        "line": 50291,
        "docstring": "Flow that occurs when we in listen state\n\nIN:\n    ev - pygame event that occured\n    key - key that was pressed (post map)\n\nSTATES:\n    STATE_LISTEN",
        "function_args": {
          "args": [
            "self",
            "ev",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "stateMatch",
        "line": 50329,
        "docstring": "Flow that occurs when we are matching notes\n\nIN:\n    ev - pygame event that occured\n    key - key that was pressed (post map)\n\nSTATES:\n    STATE_MATCH\n    STATE_MISS\n    STATE_JMATCH",
        "function_args": {
          "args": [
            "self",
            "ev",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "statePost",
        "line": 50418,
        "docstring": "Flow that occurs when we are post matching notes\n\nIN:\n    ev - pygame event that occured\n    key - key that was pressed (post map)\n\nSTATES:\n    STATE_POST\n    STATE_JPOST\n    STATE_DPOST\n    STATE_DJPOST",
        "function_args": {
          "args": [
            "self",
            "ev",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "stateWaitPost",
        "line": 50494,
        "docstring": "Flow that occurs when we are in a transitional phase from a note\nmatch to another\n\nIN:\n    ev - pygame event that occured\n    key - key that was pressed (post map)\n\nSTATES:\n    STATE_WPOST\n    STATE_CPOST\n    STATE_VPOST",
        "function_args": {
          "args": [
            "self",
            "ev",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 50523,
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 50923,
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "mas_reset_d25": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_reset_d25",
    "line": 51191,
    "docstring": "Removes d25 events\n\nQuits the game",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_reset_nye": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_reset_nye",
    "line": 51221,
    "docstring": "Remogse nye events\n\nQuist tehe game",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_reset_ptods": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_reset_ptods",
    "line": 51240,
    "docstring": "Removes all PTODS from the lockDB and per_eventDB\nthis basically allows them to be refreshed on next load.\n\nNOTE: this quits the game",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_ptod_warptime": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_ptod_warptime",
    "line": 51256,
    "docstring": "Emulates moving forward 1 day by changing all currently unlocked\npython tips to have an unlock date of yesterday",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_ptod_unlocktip": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_ptod_unlocktip",
    "line": 51275,
    "docstring": "Unlocks tips with the given numbers.\nThis does not do warp time.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "nums"
    }
  },
  "mas_eventDataDump": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_eventDataDump",
    "line": 51723,
    "docstring": "Data dump for purely events stats",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_unstableDataDump": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_unstableDataDump",
    "line": 51971,
    "docstring": "This is a function called on startup and performs data dumps.\n\nPlease add your data dump to a different file than dumps.log if its\na large dump.\n\nThank you.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_progressionDataDump": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_progressionDataDump",
    "line": 51983,
    "docstring": "Dumps progression data as a string",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_sessionDataDump": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_sessionDataDump",
    "line": 52003,
    "docstring": "Dumps session data as a string",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_varDataDump": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_varDataDump",
    "line": 52055,
    "docstring": "Dumps other kinds of data.",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "mas_dataDumpFlag": {
    "type": "function",
    "function_decorators": [],
    "identifier": "mas_dataDumpFlag",
    "line": 52126,
    "docstring": "Checks if the data dump flag (file) exists",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "label_callback": {
    "type": "function",
    "function_decorators": [],
    "identifier": "label_callback",
    "line": 52145,
    "docstring": "Function to run plugin functions and store the last label",
    "function_args": {
      "args": [
        "name",
        "abnormal"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_m1_zz_submods__build_override_label_to_base_label_map": {
    "type": "function",
    "function_decorators": [
      "store.mas_submod_utils.functionplugin('ch30_reset', priority=-999)"
    ],
    "identifier": "_m1_zz_submods__build_override_label_to_base_label_map",
    "line": 52164,
    "docstring": "Populates a lookup dict for all label overrides which are in effect",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "MASExpPreviewer": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASExpPreviewer",
    "class_bases": [
      "renpy.Displayable"
    ],
    "line": 52210,
    "docstring": "we are about to go there",
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 52592,
        "docstring": "Creates the Expression previewer displayable",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_adj_sel",
        "line": 52829,
        "docstring": "Generically does a selection change.\n\nIN:\n    direct - direction to move\n    key - key to use in selection map",
        "function_args": {
          "args": [
            "self",
            "direct",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_create_sprite",
        "line": 52843,
        "docstring": "Generates the sprite Transform using the sprite chart functions\n\nRETURNS the created Transform, or None if that failed",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_xcenter",
        "line": 52891,
        "docstring": "Returns the appropriate X location to center an object with the\ngiven width\n\nIN:\n    v_width - width of the view\n    width - width of the object to center\n\nRETURNS:\n    appropiate X coord to center",
        "function_args": {
          "args": [
            "self",
            "v_width",
            "width"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_seltx_xcenter",
        "line": 52905,
        "docstring": "Returns appropraite X location to center the selection text object\nwith the given width.\n\nNOTE: This is soley meant for use with selection text\n\nIN:\n    with - width of the selection text\n\nRETURNS:\n    appropraite X coord to center",
        "function_args": {
          "args": [
            "self",
            "width"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_select",
        "line": 52920,
        "docstring": "Returns the index of the next possible selection, given a direction\n\nIN:\n    choices - list of choices we have\n    direct - direction to move in (+ -> / - <-),\n        aswell as the number of indexes to move by\n    currdex - cureent index\n\nRETURNS:\n    index of the next selection",
        "function_args": {
          "args": [
            "self",
            "choices",
            "direct",
            "currdex"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_left_button_select",
        "line": 52958,
        "docstring": "Process a left button click\n\nRETURNS:\n    True if we processed a left button click. False otherwise",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_right_button_select",
        "line": 52974,
        "docstring": "Process a right button click\n\nRETURNS:\n    True if we processed a right button click. False otherwise",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_arms",
        "line": 52996,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_blush",
        "line": 53001,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_emote",
        "line": 53006,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_eyes",
        "line": 53011,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_eyebags",
        "line": 53016,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_eyebrows",
        "line": 53021,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_hair",
        "line": 53026,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_mouth",
        "line": 53034,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_nose",
        "line": 53039,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_sweat",
        "line": 53044,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_tears",
        "line": 53049,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_time",
        "line": 53054,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_sel_torso",
        "line": 53059,
        "function_args": {
          "args": [
            "self",
            "direct"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_disable_singles",
        "line": 53070,
        "docstring": "Goes through the left / right button lists and disables buttons\nthat only have single selection avaialble",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_build_sel_tx",
        "line": 53087,
        "docstring": "Builds a Text object using the given key\n\nIN:\n    key - key to build text object\n\nRETURNS:\n    text object",
        "function_args": {
          "args": [
            "self",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_build_sel_texts",
        "line": 53105,
        "docstring": "Builds a list of Text objects using the current selection map\n\nRETURNS:\n    list of Text objects, in proper display order",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_get_sel_tx",
        "line": 53117,
        "docstring": "Gets the selection text for a given sprite key\n\nIN:\n    key - what sprite do we need selection text for\n\nRETURNS:\n    the selection text for that sprite",
        "function_args": {
          "args": [
            "self",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_update_sel_tx",
        "line": 53136,
        "docstring": "Updates the selection for a given key:\n\nIN:\n    key - key to update selection text",
        "function_args": {
          "args": [
            "self",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_build_spr_code",
        "line": 53149,
        "docstring": "Builds sprite code using the current selection map\n\nRETURNS:\n    the current sprite code",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_get_spr_code",
        "line": 53164,
        "docstring": "Get sprite code for a given sprite key\n\nIN:\n    key - what sprite code do we need\n    nose - set to True to do special handling for the nose\n        (effectilye make the default nose work with sprite code),\n        False will retrive it raw\n        (Default: True)\n\nRETURNS:\n    the sprite code we need",
        "function_args": {
          "args": [
            "self",
            "key",
            "nose"
          ],
          "pos_only_args": [],
          "defaults": [
            "True"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_reset",
        "line": 53187,
        "docstring": "Resets exp params",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_from_spr_code",
        "line": 53203,
        "docstring": "Attempts to parse a sprite code and then updates the selectors accordingly\n\nIN:\n    spr_code - sprite code",
        "function_args": {
          "args": [
            "self",
            "spr_code"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_update_spr_code",
        "line": 53261,
        "docstring": "Updates sprite code using the current selection map",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_get_img_name",
        "line": 53270,
        "docstring": "Gets the image name for a given sprite key\n\nIN:\n    key - what image name do we need\n\nRETURNS the image name we need",
        "function_args": {
          "args": [
            "self",
            "key"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "_get_img_tears",
        "line": 53285,
        "docstring": "Custom name generator for tear expressions, as they vary on\neyes.\n\nIN:\n    key - what image name do we need\n    eyes - current eyes as img name\n\nREUTRNS the image name we need",
        "function_args": {
          "args": [
            "self",
            "key",
            "eyes"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "render",
        "line": 53319,
        "docstring": "RENDER",
        "function_args": {
          "args": [
            "self",
            "width",
            "height",
            "st",
            "at"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "event",
        "line": 53392,
        "docstring": "EVENT",
        "function_args": {
          "args": [
            "self",
            "ev",
            "x",
            "y",
            "st"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  }
}