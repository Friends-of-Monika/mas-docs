{
  "_m1_zz_dm__add_idxs": {
    "type": "function",
    "identifier": "_m1_zz_dm__add_idxs",
    "line": 423,
    "function_args": {
      "args": [
        "_db",
        "_key",
        "_exp_len",
        "idx_d_list"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "INTERNAL ONLY\n        adds indexes to the given key to the given db"
  },
  "_m1_zz_dm__rm_idxs": {
    "type": "function",
    "identifier": "_m1_zz_dm__rm_idxs",
    "line": 439,
    "function_args": {
      "args": [
        "_db",
        "_key",
        "_exp_len",
        "idx_list"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "INTERNAL ONLY\n        removes indexes off the given key off the given db"
  },
  "add_idxs": {
    "type": "function",
    "identifier": "add_idxs",
    "line": 457,
    "function_args": {
      "args": [
        "_db",
        "_key",
        "_exp_len"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "idxs_d"
    },
    "docstring": "Adds indexes to the given key\n\nNOTE: indxs_d is added in reverse order.\n\nIN:\n    _db - database to add indexes to\n    _key - key of the item to add indexes to\n    _exp_len - the length the item should have prior to addition\n        Pass in less than 0 to ignore length checks\n    *idxs_d - tuples of the following format:\n        [0]: index to add\n        [1]: data to add at index"
  },
  "add_idxs_db": {
    "type": "function",
    "identifier": "add_idxs_db",
    "line": 478,
    "function_args": {
      "args": [
        "_db",
        "_exp_len"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "idxs_d"
    },
    "docstring": "Adds indexes to items in the given db\n\nIN:\n    _db - database to add indexes to\n    _exp_len - the length the item shoudl have prior to additoin\n        Pass in 0 or less to ignore length checks\n    *idxs_d - tuples of the following format:\n        [0]: index to add\n        [1]: data to add at index"
  },
  "rm_idxs": {
    "type": "function",
    "identifier": "rm_idxs",
    "line": 500,
    "function_args": {
      "args": [
        "_db",
        "_key",
        "_exp_len"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "idxs"
    },
    "docstring": "removes indexes off the given key off the given db\n\nIN:\n    _db - database to remove indexes off of\n    _key - key of the item to remove indexes off of\n    _exp_len - the length the item should have prior to removal.\n        Pass in 0 or less to ignore length checks.\n    *idxs - indexes to remove\n        If nothing is passed, nothing happens."
  },
  "rm_idxs_db": {
    "type": "function",
    "identifier": "rm_idxs_db",
    "line": 519,
    "function_args": {
      "args": [
        "_db",
        "_exp_len"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "idxs"
    },
    "docstring": "Removes indexes off items in the given db\n\nIN:\n    _db - database to remove indexes off of\n    _exp_len - the length the item should have prior to removal\n        Pass in 0 or less to ignore length checks\n    *idxs - indexes to remove\n        if Nothing is passsed, nothing happens"
  },
  "_m1_zz_dm__dm_1_to_2_helper": {
    "type": "function",
    "identifier": "_m1_zz_dm__dm_1_to_2_helper",
    "line": 541,
    "function_args": {
      "args": [
        "curr_len"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_dm_1_to_2": {
    "type": "function",
    "identifier": "_dm_1_to_2",
    "line": 555,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Data migration from version 1 to 2\n\nGOALS:\n    - remove rules property from events and shrink the tuples."
  },
  "_dm_0811_to_2": {
    "type": "function",
    "identifier": "_dm_0811_to_2",
    "line": 566,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Data migration from version 0811-0814 to 2\n\nGOALS:\n    - remove rules property from events and shrink the tuples"
  },
  "_dm_089_to_2": {
    "type": "function",
    "identifier": "_dm_089_to_2",
    "line": 577,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Data migration from version 089-0810 to 2\n\nGOALS:\n    - remove rules property from events and shrink the tuples"
  },
  "_dm_082_to_2": {
    "type": "function",
    "identifier": "_dm_082_to_2",
    "line": 588,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Data migration from version 082-088 to 2\n\nGOALS:\n    - remove rules property from events and shrink the tuples"
  },
  "_dm_080_to_2": {
    "type": "function",
    "identifier": "_dm_080_to_2",
    "line": 599,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Data migration from version 080-081 to 2\n\nGOALS:\n    - remove rules property from events and shrink the tuples"
  },
  "_dm_073_to_2": {
    "type": "function",
    "identifier": "_dm_073_to_2",
    "line": 610,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Data migration from version 0o73-074 to 2\n\nGOALS:\n    - remove rules property from events and shrink the tuples"
  },
  "_dm_2_to_1": {
    "type": "function",
    "identifier": "_dm_2_to_1",
    "line": 621,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Data migration from version 2 to 1\n\nGOALS:\n    - add rules property to events, expand tuples"
  },
  "_determine_version": {
    "type": "function",
    "identifier": "_determine_version",
    "line": 663,
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "This returns an  appropriate dm version based on version\nNOTE: this should only be used if migrating from versions 0814 and\nbelow."
  },
  "_m1_zz_dm__lessthan": {
    "type": "function",
    "identifier": "_m1_zz_dm__lessthan",
    "line": 700,
    "function_args": {
      "args": [
        "val_a",
        "val_b"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_m1_zz_dm__morethan": {
    "type": "function",
    "identifier": "_m1_zz_dm__morethan",
    "line": 704,
    "function_args": {
      "args": [
        "val_a",
        "val_b"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_find_dm_fun": {
    "type": "function",
    "identifier": "_find_dm_fun",
    "line": 708,
    "function_args": {
      "args": [
        "piv_ver",
        "adj_ver",
        "direction"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Iterates until we find a dm function and returns it.\n\nIN:\n    piv_ver - the verion number we dont want to change when searching\n    adj_ver - the verison number we change when searching\n    direction - the direction to change adj_ver\n\nRETURNS tuple of the following format:\n    [0]: data migration function found, Or none if not found\n    [1]: value of adj_ver when data migration found"
  },
  "run": {
    "type": "function",
    "identifier": "run",
    "line": 739,
    "function_args": {
      "args": [
        "start_ver",
        "end_ver"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Runs the data migration algorithms.\n\nASSUMES: start_ver != end_ver\n\nIN:\n    start_ver - start version to start\n    end_ver - ending version number"
  }
}