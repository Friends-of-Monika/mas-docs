{
  "MASSpriteException": {
    "type": "class",
    "class_decorators": [],
    "identifier": "MASSpriteException",
    "class_bases": [
      "Exception"
    ],
    "line": 351,
    "class_functions": [
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__init__",
        "line": 352,
        "function_args": {
          "args": [
            "self",
            "message"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "function_decorators": [],
        "identifier": "__str__",
        "line": 355,
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "_m1_sprite0x2ddecoder__loadSpriteMapData": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_m1_sprite0x2ddecoder__loadSpriteMapData",
    "line": 358,
    "docstring": "Loads sprite map data from the sprite map json file",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "_m1_sprite0x2ddecoder__process_blush": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_m1_sprite0x2ddecoder__process_blush",
    "line": 398,
    "docstring": "Processes a blush off the given sprite code at the given index\n\nIN:\n    spcode the spcode to check\n    index the next index to check\n    export_dict - dict to add the sprite data to\n    prefixes letters to prefix the code with\n\nOUT:\n    Tuple of the following format:\n        [0] - True if the blush was valid, False if not\n        [1] - the number of spots to increase the index by",
    "function_args": {
      "args": [
        "spcode",
        "index",
        "export_dict"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "prefixes"
    }
  },
  "_m1_sprite0x2ddecoder__process_s": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_m1_sprite0x2ddecoder__process_s",
    "line": 426,
    "docstring": "Processes the s-prefixed spcodes at the given index\n\nIN:\n    spcode the spcode to check\n    index the next index to check\n    export_dict - dict to add the sprite data to\n    prefixes letters to prefix the code with\n\nOUT:\n    Tuple of the following format:\n        [0] - True if the processes were valid, False if not\n        [1] - the number of spots to increase the index by",
    "function_args": {
      "args": [
        "spcode",
        "index",
        "export_dict"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "prefixes"
    }
  },
  "_m1_sprite0x2ddecoder__process_sweatdrop": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_m1_sprite0x2ddecoder__process_sweatdrop",
    "line": 465,
    "docstring": "Processes a sweatdrop off the given spcode at the given index\n\nIN:\n    spcode the spcode to check\n    index the next index to check\n    export_dict - dict to add the sprite data to\n    prefixes letters to prefix the code with\n\nOUT:\n    Tuple of the following format:\n        [0] - True if the sweatdrops were valid, False if not\n        [1] - the number of spots to increase the index by",
    "function_args": {
      "args": [
        "spcode",
        "index",
        "export_dict"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "prefixes"
    }
  },
  "_m1_sprite0x2ddecoder__process_tears": {
    "type": "function",
    "function_decorators": [],
    "identifier": "_m1_sprite0x2ddecoder__process_tears",
    "line": 493,
    "docstring": "Processes a tear off the given spcode at the given index\n\nIN:\n    spcode the spcode to check\n    index the next index to check\n    export_dict - dict to add the sprite data to\n    prefixes letters to prefix the code with\n\nOUT:\n    Tuple of the following format:\n        [0] - True if the tears were valid, False if not\n        [1] - the number of spots to increase the index by",
    "function_args": {
      "args": [
        "spcode",
        "index",
        "export_dict"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": "prefixes"
    }
  },
  "parse_exp_to_kwargs": {
    "type": "function",
    "function_decorators": [],
    "identifier": "parse_exp_to_kwargs",
    "line": 539,
    "docstring": "Converts exp codes to kwargs to pass into mas_drawmonika_rk\n\nIN:\n    exp - spritecode to convert\n\nOUT:\n    dict representing the exp as kwargs for mas_drawmonika_rk\n\nASSUMES:\n    exp is not in the staticsprite format (not exp_static)\n\nRAISES:\n    - KeyError if pose, eyes, eyebrows, or mouth is invalid\n    - Exception if optional sprite is invalid",
    "function_args": {
      "args": [
        "exp"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  },
  "isValidSpritecode": {
    "type": "function",
    "function_decorators": [],
    "identifier": "isValidSpritecode",
    "line": 620,
    "docstring": "Spritecode validity tester\n\nIN:\n    exp - exp to check validity\n\nOUT:\n    boolean:\n        - True if code is valid\n        - False otherwise",
    "function_args": {
      "args": [
        "exp"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    }
  }
}