{
  "_findKeymap": {
    "type": "function",
    "identifier": "_findKeymap",
    "function_args": {
      "args": [
        "value"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Finds the key that points to value in the keymap. Effectively a dict\nvalue search\n\nIN:\n    value - value to find\n\nRETURNS:\n    key in persistent._mas_piano_keymaps that returns value, or None\n    if value not found\n\nASSUMES:\n    persistent._mas_piano_keymaps"
  },
  "_setKeymap": {
    "type": "function",
    "identifier": "_setKeymap",
    "function_args": {
      "args": [
        "key",
        "new"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Sets a keymap. Checks for existing keymap and will remove it.\nWill NOT set the keymap if key == new\n\nIN:\n    key - the key we are mapping\n    new - the new key item to map to\n\nRETURNS: tuple of the following format:\n    [0] - new key that was set (could be None)\n    [1] - old key that was originally set (could be None)\n\nASSUMES:\n    persistent._mas_piano_keymaps"
  },
  "_strtoN": {
    "type": "function",
    "identifier": "_strtoN",
    "function_args": {
      "args": [
        "note"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Converts a stringified note to a regular note\n\nIN:\n    note - note string to convert\n\nRETURNS:\n    piano note version, or None if this wasnt a real ntoe"
  },
  "_strtoN_list": {
    "type": "function",
    "identifier": "_strtoN_list",
    "function_args": {
      "args": [
        "note_list"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Versin of strtoN that can handle a full list\n\nIN:\n    note_list - list of notes to convert\n\nRETURNS:\n    list of piano notes. or None if at least note wasnt real"
  },
  "_labelCheck": {
    "type": "function",
    "identifier": "_labelCheck",
    "function_args": {
      "args": [
        "key",
        "_params",
        "jobj"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "specialized json label checking function\nNOTE: only use this for optional params\n\nIN:\n    key - key of label to check\n    _params - params dict, also using key\n    jobj - json object, also using key"
  },
  "_intCheck_nl": {
    "type": "function",
    "identifier": "_intCheck_nl",
    "function_args": {
      "args": [
        "key",
        "_params",
        "jobj",
        "warn_msg"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Specialized json int checking function\nNOTE: only use this for optinal params\nNOTE: non warning list varient of _intCheck\n\nIN:\n    key - key of the integer to check\n    _params - params dict, also using key\n    jobj - json object, also using key\n    warn_msg - warning message"
  },
  "_noteCheck": {
    "type": "function",
    "identifier": "_noteCheck",
    "function_args": {
      "args": [
        "key",
        "_params",
        "_warns",
        "jobj",
        "warn_msg"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Specialized json note list checking function\nNOTE: only use this for optional params\n\nIN:\n    key - key of notes to check\n    _params - params dict, also using key\n    _warns - warnings list\n    jobj - json object, also using key\n    warn_msg - message to use for warning"
  },
  "_scCheck": {
    "type": "function",
    "identifier": "_scCheck",
    "function_args": {
      "args": [
        "key",
        "_params",
        "_warns",
        "jobj",
        "warn_msg"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Specialized json spritecode / expression checking function\nNOTE: only use this for optional params\n\nIN:\n    key - key of sprite code to check\n    _params - params dict, also using key\n    _warns - warning list\n    jobj - json object, also using key\n    warn_msg - message to use for warning"
  },
  "_floatCheck": {
    "type": "function",
    "identifier": "_floatCheck",
    "function_args": {
      "args": [
        "key",
        "_params",
        "_warns",
        "jobj",
        "warn_msg"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Specialized json float checking function\nNOTE: only use this for optional params\n\nIN:\n    key - key of the float to check\n    _params - params dict, also using key\n    _warns - warning list\n    jobj - json object also using keuy\n    warn_msg - message to use for warning"
  },
  "_intCheck": {
    "type": "function",
    "identifier": "_intCheck",
    "function_args": {
      "args": [
        "key",
        "_params",
        "_warns",
        "jobj",
        "warn_msg"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Specialized json int checking function\nNOTE: only use this for optional params\n\nIN:\n    key - key of the int to check\n    _params - params dict, also using key\n    _warns - warning list\n    jobj - json object also using keuy\n    warn_msg - message to use for warning"
  },
  "_boolCheck": {
    "type": "function",
    "identifier": "_boolCheck",
    "function_args": {
      "args": [
        "key",
        "_params",
        "_warns",
        "jobj",
        "warn_msg"
      ],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Specialized json bool checking function\nNOTE: only use this for optional params\n\nIN:\n    key - key of the bool to check\n    _params - params dict, also using key\n    _warns - warning list\n    jobj - json object also using keuy\n    warn_msg - message to use for warning"
  },
  "PianoException": {
    "type": "class",
    "identifier": "PianoException",
    "class_bases": [
      "Exception"
    ],
    "class_functions": [
      {
        "type": "function",
        "identifier": "__init__",
        "function_args": {
          "args": [
            "self",
            "msg"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "identifier": "__str__",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      }
    ]
  },
  "PianoNoteMatch": {
    "type": "class",
    "identifier": "PianoNoteMatch",
    "class_bases": [
      "object"
    ],
    "class_functions": [
      {
        "type": "function",
        "identifier": "__init__",
        "function_args": {
          "args": [
            "self",
            "say",
            "notes",
            "postnotes",
            "express",
            "postexpress",
            "ev_timeout",
            "vis_timeout",
            "verse",
            "copynotes",
            "posttext"
          ],
          "pos_only_args": [],
          "defaults": [
            "None",
            "None",
            "'1eub'",
            "'1eua'",
            "None",
            "None",
            "0",
            "None",
            "False"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "identifier": "isNoteMatch",
        "function_args": {
          "args": [
            "self",
            "new_key",
            "index"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "identifier": "isPostMatch",
        "function_args": {
          "args": [
            "self",
            "new_key",
            "index"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "identifier": "_is_match",
        "function_args": {
          "args": [
            "self",
            "new_key",
            "notes",
            "index"
          ],
          "pos_only_args": [],
          "defaults": [
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        }
      },
      {
        "type": "function",
        "identifier": "is_single",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        },
        "docstring": "RETURNS True if this notematch consists of a single note"
      },
      {
        "type": "function",
        "identifier": "reset",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        },
        "docstring": "Resets this piano note match to its default values.\n\nNOTE: this only clears the following values:\n    misses - 0\n    fails - 0\n    passes - 0\n    matchdex - 0\n    matched - False"
      },
      {
        "type": "function",
        "identifier": "fromJSON",
        "function_args": {
          "args": [
            "jobj"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        },
        "docstring": "Creates a PianoNoteMatch from a given json object (which is just\na dict)\n\nMay add warnings to log file\n\nIN:\n    jobj - JSON object (as a dict)\n\nRETURNS:\n    Tuple of the following format:\n    [0]: PianoNoteMatch associated with the given json object\n        Or NONE if the Json object is missing required information\n    [1]: List of warning strings\n        Or error message string if fatal error occurs"
      }
    ]
  },
  "PianoNoteMatchList": {
    "type": "class",
    "identifier": "PianoNoteMatchList",
    "class_bases": [
      "object"
    ],
    "docstring": "This a wrapper for a list of note matches. WE do this so we can\neasily group note matches with other information.\n\nPROPERTIES:\n    pnm_list - list of piano note matches\n    verse_list - list of verse indexes (must be in order)\n    name - song name (displayed to user in song selection mode)\n    full_combos - number of times the song has been played with no\n        no mistakes\n    wins - number of times the song has been completed\n    losses - number of the times the song has been attempted but not\n        completed\n    win_label - labelt o call to if we played the song well\n    fc_label - label to call to if we full comboed\n    fail_label - label to call to if we failed the song\n    prac_label - label to call if we are practicing\n    end_wait - seconds to wait before continuing to quit phase\n    launch_label - label to call to prepare song launch",
    "class_functions": [
      {
        "type": "function",
        "identifier": "__init__",
        "function_args": {
          "args": [
            "self",
            "pnm_list",
            "verse_list",
            "name",
            "win_label",
            "fc_label",
            "fail_label",
            "prac_label",
            "end_wait",
            "launch_label"
          ],
          "pos_only_args": [],
          "defaults": [
            "0",
            "None"
          ],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        },
        "docstring": "Creates a PianoNoteMatchList\n\nIN:\n    pnm_list - list of piano note matches\n    verse_list - list of verse indexes (must be in order)\n    name - song name (displayed to user in song selection mode)\n    win_label - label to call to if we played the song well\n    fc_label - label to call to if we full comboed the song\n    fail_label - label to call to if we failed the song\n    prac_label - label to call if we are practicing\n    end_wait - number of seoncds to wait before actually quitting\n        (Integers pleaes)\n        (Default: 0)\n    launch_label - label to call to prepare this song for play\n        (Default: None)"
      },
      {
        "type": "function",
        "identifier": "resetPNM",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        },
        "docstring": "Resets the piano note matches in this Piano Note Match List"
      },
      {
        "type": "function",
        "identifier": "_loadTuple",
        "function_args": {
          "args": [
            "self",
            "data_tup"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        },
        "docstring": "Fills in the data of this PianoNoteMatchList using the given data\ntup. (which was probably pickeled)\n\nIN:\n    data_tup - tuple of the following format:\n        [0] -> name\n        [1] -> full_combos\n        [2] -> wins\n        [3] -> losses"
      },
      {
        "type": "function",
        "identifier": "_saveTuple",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        },
        "docstring": "Generates a tuple of key data in this PianoNoteMatchList for\npickling\n\nRETURNS:\n    a tuple of the following format:\n        See _loadTuple"
      },
      {
        "type": "function",
        "identifier": "_gen_pnm_sprites",
        "function_args": {
          "args": [
            "self"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        },
        "docstring": "Generates sprites from pnm's in this list"
      },
      {
        "type": "function",
        "identifier": "fromJSON",
        "function_args": {
          "args": [
            "jobj"
          ],
          "pos_only_args": [],
          "defaults": [],
          "kw_defaults": [],
          "kw_only_args": [],
          "kw_arg": null,
          "var_arg": null
        },
        "docstring": "Creats a PianoNoteMatchList from a given JSON object (which is\njust a dict)\n\nMay add warnings to logg file\n\nIN:\n    jobj - JSON object (As a dict)\n\nRETURNS:\n    PianoNoteMatchList associated with given JSON object, or\n    None if JSON object is missing required information"
      }
    ]
  },
  "addSong": {
    "type": "function",
    "identifier": "addSong",
    "function_args": {
      "args": [
        "filepath",
        "add_main"
      ],
      "pos_only_args": [],
      "defaults": [
        "False"
      ],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Adds a song to the pnml db, given its json filepath\n\nNOTE: may raise exceptions\n\nIN:\n    filepath - filepath to the JSON we want to load in\n        - Assumed to be clean and ready to go\n    add_main - True means we should add this to the main pnml db too\n        (Default: False)"
  },
  "addCustomSongs": {
    "type": "function",
    "identifier": "addCustomSongs",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Adds the custom songs (if we find any) to the game"
  },
  "addStockSongs": {
    "type": "function",
    "identifier": "addStockSongs",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Adds the stock songs to the game"
  },
  "getSongChoices": {
    "type": "function",
    "identifier": "getSongChoices",
    "function_args": {
      "args": [],
      "pos_only_args": [],
      "defaults": [],
      "kw_defaults": [],
      "kw_only_args": [],
      "kw_arg": null,
      "var_arg": null
    },
    "docstring": "Creates a list of tuples appropriate to display as a piano song\nselection menu.\n\nRETURNS:\n    Tuple of the following format:\n    [0]: list of tuples for song selection. May be an empty list\n    [1]: Last item (the nvm) for the song selection\n\nASSUMES:\n    pnml_db"
  }
}